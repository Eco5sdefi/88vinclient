!function(t, e) {
    "object" == typeof exports && "object" == typeof module ? module.exports = e(require("libs"), require("signalR"), require("pixi-filters"), require("WebFont")) : "function" == typeof define && define.amd ? define("blackjack", ["libs", "signalR", "pixi-filters", "WebFont"], e) : "object" == typeof exports ? exports.blackjack = e(require("libs"), require("signalR"), require("pixi-filters"), require("WebFont")) : t.blackjack = e(t.libs, t.signalR, t["pixi-filters"], t.WebFont)
}(window, function(i, n, o, a) {
    return function(i) {
        var n = {};
        function o(t) {
            if (n[t])
                return n[t].exports;
            var e = n[t] = {
                i: t,
                l: !1,
                exports: {}
            };
            return i[t].call(e.exports, e, e.exports, o),
            e.l = !0,
            e.exports
        }
        return o.m = i,
        o.c = n,
        o.d = function(t, e, i) {
            o.o(t, e) || Object.defineProperty(t, e, {
                enumerable: !0,
                get: i
            })
        }
        ,
        o.r = function(t) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
                value: "Module"
            }),
            Object.defineProperty(t, "__esModule", {
                value: !0
            })
        }
        ,
        o.t = function(e, t) {
            if (1 & t && (e = o(e)),
            8 & t)
                return e;
            if (4 & t && "object" == typeof e && e && e.__esModule)
                return e;
            var i = Object.create(null);
            if (o.r(i),
            Object.defineProperty(i, "default", {
                enumerable: !0,
                value: e
            }),
            2 & t && "string" != typeof e)
                for (var n in e)
                    o.d(i, n, function(t) {
                        return e[t]
                    }
                    .bind(null, n));
            return i
        }
        ,
        o.n = function(t) {
            var e = t && t.__esModule ? function() {
                return t.default
            }
            : function() {
                return t
            }
            ;
            return o.d(e, "a", e),
            e
        }
        ,
        o.o = function(t, e) {
            return Object.prototype.hasOwnProperty.call(t, e)
        }
        ,
        o.p = "/",
        o(o.s = 1)
    }([function(t, e) {
        t.exports = i
    }
    , function(t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var n = i(2)
          , o = i(8)
          , a = function() {
            function t(t) {
                o.load({
                    custom: {
                        families: ["Roboto-Black", "Roboto-Bold", "Roboto-Medium", "Roboto-Regular", "Roboto-Light", "RobotoCondensed-Bold", "RobotoCondensed-Italic", "RobotoCondensed-Light", "RobotoCondensed-Regular", "UTM American Sans", "UTM Swiss Condensed", "UTM Swiss CondensedBold"]
                    },
                    fontactive: function() {}
                }),
                this.game = new n.games(t)
            }
            return t.prototype.delete = function() {
                this.game.Delete()
            }
            ,
            t.prototype.load = function(t) {
                this.game.Load(t)
            }
            ,
            t.prototype.join = function(t, e) {
                this.game.Join(t, e)
            }
            ,
            t.prototype.stop = function() {
                this.game.Stop()
            }
            ,
            t
        }();
        e.game = a
    }
    , function(t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var n = i(3)
          , o = i(4)
          , a = i(0)
          , s = i(6);
        i(7);
        var r = function() {
            function t(t) {
                this.accountId = 0,
                this.ready = !1,
                this.betValue = 0,
                this.isLoad = !1,
                this.players = [null, null, null, null, null],
                this.fontRobotoCondensedRegular = "RobotoCondensed-Regular",
                this.fontRobotoCondensedBold = "RobotoCondensed-Bold",
                this.fontFaceBold = "Roboto-Bold",
                this.fontFace = "Roboto-Light",
                this.isX2 = !1,
                this.Phrase = {
                    None: 0,
                    Betting: 1,
                    Dealing: 2,
                    InsurancePhrase: 3,
                    PlayerActions: 4,
                    DealerActions: 5,
                    Result: 6
                },
                this.eAction = {
                    None: 0,
                    Bet: 1,
                    Stand: 2,
                    Hit: 3,
                    DoubleDown: 4,
                    Split: 5,
                    Surrender: 6,
                    Insurance: 7,
                    EvenMoney: 8,
                    Clear: 9,
                    Fold: 19,
                    X2: 20
                },
                this.eHandStatus = {
                    None: 0,
                    Bust: 1,
                    Stand: 2,
                    Surrender: 3,
                    DoubleDown: 4,
                    MaxValue: 5,
                    Blackjack: 6
                },
                this.ePrize = {
                    Normal: 0,
                    Blackjack: 1,
                    EvenMoney: 2,
                    Insurrance: 3
                },
                this.playerPos = [[0, 128], [-190, 87], [-360, 7], [360, 7], [190, 87]],
                this.cardsPos = [[{
                    x: -50,
                    y: -20
                }, {
                    x: -50,
                    y: -55
                }, {
                    x: -50,
                    y: -90
                }, {
                    x: -50,
                    y: -125
                }], [{
                    x: -240,
                    y: -61
                }, {
                    x: -240,
                    y: -96
                }, {
                    x: -240,
                    y: -131
                }, {
                    x: -240,
                    y: -166
                }], [{
                    x: -410,
                    y: -141
                }, {
                    x: -410,
                    y: -176
                }, {
                    x: -410,
                    y: -211
                }, {
                    x: -410,
                    y: -246
                }], [{
                    x: 310,
                    y: -141
                }, {
                    x: 310,
                    y: -176
                }, {
                    x: 310,
                    y: -211
                }, {
                    x: 310,
                    y: -246
                }], [{
                    x: 140,
                    y: -61
                }, {
                    x: 140,
                    y: -96
                }, {
                    x: 140,
                    y: -131
                }, {
                    x: 140,
                    y: -166
                }]],
                this.betPos = [{
                    x: 0,
                    y: 30
                }, {
                    x: -175,
                    y: -12
                }, {
                    x: -345,
                    y: -91
                }, {
                    x: 345,
                    y: -91
                }, {
                    x: 175,
                    y: -12
                }],
                this.chipConfig = {
                    1: {
                        100: [{
                            number: "100",
                            value: 100,
                            img: "tien_2"
                        }, {
                            number: "500",
                            value: 500,
                            img: "tien_3"
                        }, {
                            number: "1K",
                            value: 1e3,
                            img: "tien_4"
                        }, {
                            number: "5K",
                            value: 5e3,
                            img: "tien_5"
                        }, {
                            number: "10K",
                            value: 1e4,
                            img: "tien_6"
                        }],
                        500: [{
                            number: "500",
                            value: 500,
                            img: "tien_2"
                        }, {
                            number: "1K",
                            value: 1e3,
                            img: "tien_3"
                        }, {
                            number: "5K",
                            value: 5e3,
                            img: "tien_4"
                        }, {
                            number: "10K",
                            value: 1e4,
                            img: "tien_5"
                        }, {
                            number: "50K",
                            value: 5e4,
                            img: "tien_6"
                        }],
                        1e3: [{
                            number: "1K",
                            value: 1e3,
                            img: "tien_2"
                        }, {
                            number: "5K",
                            value: 5e3,
                            img: "tien_3"
                        }, {
                            number: "10K",
                            value: 1e4,
                            img: "tien_4"
                        }, {
                            number: "50K",
                            value: 5e4,
                            img: "tien_5"
                        }, {
                            number: "100K",
                            value: 1e5,
                            img: "tien_6"
                        }],
                        2e3: [{
                            number: "2K",
                            value: 2e3,
                            img: "tien_2"
                        }, {
                            number: "5K",
                            value: 5e3,
                            img: "tien_3"
                        }, {
                            number: "10K",
                            value: 1e4,
                            img: "tien_4"
                        }, {
                            number: "50K",
                            value: 5e4,
                            img: "tien_5"
                        }, {
                            number: "100K",
                            value: 1e5,
                            img: "tien_6"
                        }],
                        5e3: [{
                            number: "5K",
                            value: 5e3,
                            img: "tien_2"
                        }, {
                            number: "10K",
                            value: 1e4,
                            img: "tien_3"
                        }, {
                            number: "50K",
                            value: 5e4,
                            img: "tien_4"
                        }, {
                            number: "100K",
                            value: 1e5,
                            img: "tien_5"
                        }, {
                            number: "500K",
                            value: 5e5,
                            img: "tien_6"
                        }],
                        1e4: [{
                            number: "10K",
                            value: 1e4,
                            img: "tien_2"
                        }, {
                            number: "50K",
                            value: 5e4,
                            img: "tien_3"
                        }, {
                            number: "100K",
                            value: 1e5,
                            img: "tien_4"
                        }, {
                            number: "500K",
                            value: 5e5,
                            img: "tien_5"
                        }, {
                            number: "1M",
                            value: 1e6,
                            img: "tien_6"
                        }]
                    },
                    0: {
                        1e3: [{
                            number: "1K",
                            value: 1e3,
                            img: "tien_2"
                        }, {
                            number: "5K",
                            value: 5e3,
                            img: "tien_3"
                        }, {
                            number: "10K",
                            value: 1e4,
                            img: "tien_4"
                        }, {
                            number: "50K",
                            value: 5e4,
                            img: "tien_5"
                        }, {
                            number: "100K",
                            value: 1e5,
                            img: "tien_6"
                        }],
                        5e3: [{
                            number: "5K",
                            value: 5e3,
                            img: "tien_2"
                        }, {
                            number: "10K",
                            value: 1e4,
                            img: "tien_3"
                        }, {
                            number: "50K",
                            value: 5e4,
                            img: "tien_4"
                        }, {
                            number: "100K",
                            value: 1e5,
                            img: "tien_5"
                        }, {
                            number: "500K",
                            value: 5e5,
                            img: "tien_6"
                        }],
                        1e4: [{
                            number: "10K",
                            value: 1e4,
                            img: "tien_2"
                        }, {
                            number: "50K",
                            value: 5e4,
                            img: "tien_3"
                        }, {
                            number: "100K",
                            value: 1e5,
                            img: "tien_4"
                        }, {
                            number: "500K",
                            value: 5e5,
                            img: "tien_5"
                        }, {
                            number: "1M",
                            value: 1e6,
                            img: "tien_6"
                        }],
                        5e4: [{
                            number: "50K",
                            value: 5e4,
                            img: "tien_2"
                        }, {
                            number: "100K",
                            value: 1e5,
                            img: "tien_3"
                        }, {
                            number: "500K",
                            value: 5e5,
                            img: "tien_4"
                        }, {
                            number: "1M",
                            value: 1e6,
                            img: "tien_5"
                        }, {
                            number: "5M",
                            value: 5e6,
                            img: "tien_6"
                        }],
                        1e5: [{
                            number: "100K",
                            value: 1e5,
                            img: "tien_2"
                        }, {
                            number: "500K",
                            value: 5e5,
                            img: "tien_3"
                        }, {
                            number: "1M",
                            value: 1e6,
                            img: "tien_4"
                        }, {
                            number: "5M",
                            value: 5e6,
                            img: "tien_5"
                        }, {
                            number: "10M",
                            value: 1e7,
                            img: "tien_6"
                        }],
                        5e5: [{
                            number: "500K",
                            value: 5e5,
                            img: "tien_2"
                        }, {
                            number: "1M",
                            value: 1e6,
                            img: "tien_3"
                        }, {
                            number: "5M",
                            value: 5e6,
                            img: "tien_4"
                        }, {
                            number: "10M",
                            value: 1e7,
                            img: "tien_5"
                        }, {
                            number: "50M",
                            value: 5e6,
                            img: "tien_6"
                        }]
                    }
                },
                this.moneyLog = 0,
                this.moneyBet = [0, 0, 0, 0, 0],
                this.cardsMap = ["2tep.png", "3tep.png", "4tep.png", "5tep.png", "6tep.png", "7tep.png", "8tep.png", "9tep.png", "10tep.png", "11tep.png", "12tep.png", "13tep.png", "1tep.png", "2bich.png", "3bich.png", "4bich.png", "5bich.png", "6bich.png", "7bich.png", "8bich.png", "9bich.png", "10bich.png", "11bich.png", "12bich.png", "13bich.png", "1bich.png", "2co.png", "3co.png", "4co.png", "5co.png", "6co.png", "7co.png", "8co.png", "9co.png", "10co.png", "11co.png", "12co.png", "13co.png", "1co.png", "2do.png", "3do.png", "4do.png", "5do.png", "6do.png", "7do.png", "8do.png", "9do.png", "10do.png", "11do.png", "12do.png", "13do.png", "1do.png", "joker.png"],
                this.indexTip = 0,
                this.moneyText = ["XU", "GAM"],
                this.arrBetPos = [{
                    x: 50,
                    y: 30,
                    s: .7
                }, {
                    x: 130,
                    y: 30,
                    s: .7
                }, {
                    x: 210,
                    y: 30,
                    s: .7
                }, {
                    x: 290,
                    y: 30,
                    s: .7
                }, {
                    x: 370,
                    y: 30,
                    s: .7
                }],
                this.conPos = [[{
                    x: 7,
                    y: 0
                }, {
                    x: 7,
                    y: 0
                }, {
                    x: 7,
                    y: 0
                }], [{
                    x: 26,
                    y: 3
                }, {
                    x: 26,
                    y: 7
                }, {
                    x: 26,
                    y: 10
                }], [{
                    x: 43,
                    y: 11
                }, {
                    x: 43,
                    y: 15
                }, {
                    x: 43,
                    y: 18
                }], [{
                    x: -29,
                    y: 12
                }, {
                    x: -29,
                    y: 15
                }, {
                    x: -29,
                    y: 18
                }], [{
                    x: -12,
                    y: 3
                }, {
                    x: -12,
                    y: 7
                }, {
                    x: -12,
                    y: 10
                }]],
                this.cardDealerPos = {
                    x: -20,
                    y: -190,
                    s: .8
                },
                this.timerA = null,
                this.size = t.size,
                this.target = t.target,
                this.token = t.token,
                this.loader = new n.default,
                this.currencyId = t.currencyID,
                this.lang = Message.GetLanguageCode(),
                this.ready = !1
            }
            return t.prototype.Load = function(t) {
                var e = this;
                e.loader.load(function() {
                    return e.Loading(e)
                }, function() {
                    e.isLoad = !0,
                    $("#divLoading").hide(),
                    e.InitHub(t)
                })
            }
            ,
            t.prototype.Loading = function(t) {
                $("#divLoading").show(),
                $("#loading-progress span").css("width", t.loader.loader.progress + "%"),
                $("#loading-progress-txt").html(t.loader.loader.progress + "%")
            }
            ,
            t.prototype.InitHub = function(t) {
                this.hub = new o.default(blackjackUrl + "hub",this.token,this),
                this.hub.Connect(this.currencyId, t)
            }
            ,
            t.prototype.Join = function(t, e) {
                this.hub.EnterRoom(t, e)
            }
            ,
            t.prototype.EnterRoom = function(t) {
                this.roomModel = t.r,
                this.ready || this.Init(),
                this.GetCurrentPlayer(),
                this.RenderPlayers(this.roomModel.Players),
                this.ResetGame(),
                this.DisableButtons(),
                t.r.Session && (t.r.Session.Phrase < 6 || t.r.Session.Phrase < 6 && 2 < t.r.Session.Timeout) && this.GenData(t.r.Session),
                this.boxBet.visible = !1
            }
            ,
            t.prototype.GetCurrentPlayer = function() {
                if (this.roomModel && this.roomModel.Players)
                    for (var t = 0; t < this.roomModel.Players.length; t++)
                        if (this.roomModel.Players[t].AccountId === App.account.accountID + ":" + App.account.portalID) {
                            this.currentPlayer = this.roomModel.Players[t];
                            break
                        }
            }
            ,
            t.prototype.GetPlayerByAccountId = function(t) {
                for (var e, i = 0; i < this.players.length; i++)
                    if (this.players[i] && this.players[i].accountId === t) {
                        e = this.players[i];
                        break
                    }
                return e
            }
            ,
            t.prototype.GetPlayerByPosition = function(t) {
                for (var e, i = 0; i < this.players.length; i++)
                    if (this.players[i] && this.players[i].pos === t) {
                        e = this.players[i];
                        break
                    }
                return e
            }
            ,
            t.prototype.RenderPlayers = function(t) {
                for (var e in t)
                    this.RenderPlayer(t[e])
            }
            ,
            t.prototype.PlayerJoin = function(t) {
                console.log("playerJoin", t),
                this.RenderPlayer(t)
            }
            ,
            t.prototype.PlayerLeave = function(t) {
                for (var e = 0; e < t.length; e++)
                    if (t[e].id === this.currentPlayer.AccountId)
                        t[e].reason && App.showPopupMessage({
                            content: Message.GetMessage("ca" + t[e].reason),
                            textDone: "OK"
                        }),
                        this.Delete(),
                        App.handleBack();
                    else {
                        var i = this.GetPlayerByAccountId(t[e].id);
                        if (i) {
                            var n = i.pos;
                            i.destroy({
                                children: !0
                            }),
                            delete this.players[n],
                            this.players[n] = null
                        }
                    }
            }
            ,
            t.prototype.PlayerOtherDevice = function() {
                App.showPopupMessage({
                    content: Message.GetMessage("ca-20024"),
                    textDone: "OK"
                }),
                this.Delete(),
                App.exitGame()
            }
            ,
            t.prototype.RegisterLeave = function(t) {
                console.log(t);
                var e = t.id ? t.id : t.Id
                  , i = t.status ? t.status : t.Status
                  , n = this.GetPlayerByAccountId(e);
                n && (n.leaveStatus.visible = i),
                e === this.currentPlayer.AccountId && this.ShowStatus(Message.GetMessage(i ? "me8" : "me9"))
            }
            ,
            t.prototype.UpdateConnection = function(t) {
                try {
                    var e = t.id ? t.id : t.Id
                      , i = t.status ? t.status : t.Status
                      , n = this.GetPlayerByAccountId(e);
                    n && (n.disStatus.visible = i)
                } catch (t) {}
            }
            ,
            t.prototype.RenderPlayer = function(t) {
                var e = t.Position - this.currentPlayer.Position;
                e < 0 && (e += this.roomModel.MaxPlayer),
                null !== this.players[e] && this.players[e],
                this.players[e] = new s.default({
                    position: e,
                    player: t,
                    xy: this.playerPos[e],
                    w: 90,
                    h: 90,
                    b: 60,
                    game: this
                }),
                this.playerContainer.addChild(this.players[e]);
                var i = t.RegLeave;
                this.players[e].leaveStatus.visible = i
            }
            ,
            t.prototype.EnterGame = function(t) {
                this.JoinGame(t),
                t.r.Session
            }
            ,
            t.prototype.JoinGame = function(t) {
                if (console.log("JoinGame", t),
                t) {
                    if (t.c < 0)
                        return App.showPopupMessage({
                            content: Message.GetMessage("ca" + t.c),
                            textDone: "ok"
                        }),
                        this.Delete(),
                        void App.handleBack();
                    if (this.roomModel = t.r,
                    App.joinGame({
                        value: this.roomModel.Value,
                        type: this.roomModel.Currency
                    }),
                    a.Util.ClearTimeOut(this.timerOut),
                    this.RemoveTimer(),
                    this.ready || this.EnterRoom(t),
                    this.UpdateDeck(),
                    this.UpdateGameLoopId(),
                    t.r.Session)
                        return 1 === t.r.Session.Phrase ? (this.ShowTipDealer(this),
                        void this.StartBet()) : void (2 === t.r.Session.Phrase && 2 <= t.r.Session.Timeout ? this.DrawCards() : 3 !== t.r.Session.Phrase ? 4 !== t.r.Session.Phrase ? 5 !== t.r.Session.Phrase ? 6 !== t.r.Session.Phrase || 4 !== t.r.Session.Timeout || this.ProcessResult() : this.DealerAction() : this.StartActions() : 0 < this.moneyBet[0] && this.ShowInSu())
                }
            }
            ,
            t.prototype.UpdateGameLoopId = function() {
                this.lblSession.text = Message.GetMessage("ca95").toUpperCase() + (this.roomModel.SessionId <= 0 ? " #" : this.roomModel.SessionId)
            }
            ,
            t.prototype.Init = function() {
                PIXI.utils.skipHello();
                var t = window.innerWidth < 1360 ? 1360 : window.innerWidth
                  , e = window.innerHeight < 720 ? 720 : window.innerHeight;
                this.size = [t, e],
                this.application = new PIXI.Application(this.size[0],this.size[1],{
                    antialias: !0,
                    transparent: !0,
                    resolution: 1,
                    autoResize: !0
                }),
                document.getElementById(this.target).appendChild(this.application.renderer.view),
                this.filter = new PIXI.filters.ColorMatrixFilter,
                this.filter.matrix = [1, 0, 0, .1, 0, 0, 1, 0, .1, 0, 0, 0, 1, .1, 0, 0, 0, 0, 1, 0],
                this.InitContainer(),
                this.InitFrames(),
                this.InitMachine(),
                this.InitTableInfo(),
                this.InitButton(),
                this.InitBet(),
                this.InitTip(),
                this.InitTotal(),
                this.Resize(this);
                var i = this;
                this.application.ticker.add(function() {
                    return i.Update(i)
                }),
                this.ready = !0,
                this.resizeFunc = function() {
                    return i.Resize(i)
                }
                ,
                window.addEventListener("resize", this.resizeFunc),
                this.ResetTab()
            }
            ,
            t.prototype.Resize = function(t) {
                if (t.size = [$(window).width(), $(window).height()],
                t.application.renderer.resize($(window).width(), $(window).height()),
                t.size[0] < 1360 || t.size[1] < 720) {
                    var e = Math.min(t.size[0] / 1360, t.size[1] / 720);
                    t.mainContainer.scale.set(e)
                } else
                    t.mainContainer.scale.set(1);
                t.mainContainer.anchor.set(.5),
                t.mainContainer.position.set(t.size[0] / 2, t.size[1] / 2 + 20)
            }
            ,
            t.prototype.ResetTab = function() {
                window.addEventListener("blur", function() {
                    TweenLite.lagSmoothing(0)
                }, !1),
                window.addEventListener("focus", function() {
                    TweenLite.lagSmoothing(1e3, 16)
                }, !1)
            }
            ,
            t.prototype.Update = function(t) {
                t.timer && t.timer.Tick(),
                t.timerUser && t.timerUser.tick()
            }
            ,
            t.prototype.RemoveTimer = function() {
                if (this.timerUser)
                    try {
                        this.timerUser.clearTimer(),
                        this.timerUser = null
                    } catch (t) {}
            }
            ,
            t.prototype.ShowTimer = function(t, e, i) {
                this.RemoveTimer(),
                this.timerUser = new a.Timer({
                    width: 88,
                    height: 88,
                    lineWidth: 2
                }),
                this.timerUser.position.set(t.avatar.x - 45, t.avatar.y - 45),
                this.playerContainer.addChild(this.timerUser),
                this.timerUser.startTimer(e, i)
            }
            ,
            t.prototype.ShowError = function(t) {
                this.ShowStatus(Message.GetMessage("ca" + t), 2e3)
            }
            ,
            t.prototype.ShowStatus = function(t, e) {
                var i = this;
                a.Util.ClearTimeOut(this.timerStatus),
                this.txtStatus.scale.set(.01),
                this.txtStatus.visible = !0,
                this.txtStatus.children[0].text = t,
                TweenMax.to(this.txtStatus.scale, .4, {
                    data: "blackjack",
                    x: 1,
                    y: 1
                });
                var n = this;
                this.timerStatus = setTimeout(function() {
                    TweenMax.to(i.txtStatus.scale, .2, {
                        data: "blackjack",
                        x: .01,
                        y: .01
                    }),
                    n.timerStatus = setTimeout(function() {
                        n.txtStatus.visible = !1
                    }, 300)
                }, e || 2e3)
            }
            ,
            t.prototype.InitContainer = function() {
                this.bgContainer = new Container,
                this.playerContainer = new Container,
                this.cardContainer = new Container,
                this.chipContainer = new Container,
                this.resultContainer = new Container,
                this.moneyContainer = new Container,
                this.totalContainer = new Container,
                this.effectContainer = new Container
            }
            ,
            t.prototype.InitFrames = function() {
                var t;
                for (this.framesDealerChiaBai = [],
                this.framesDealerClick = [],
                this.framesDealerPlay = [],
                this.framesDealerNormal = [],
                this.framesFireWork = [],
                this.framesWin = [],
                t = 1; t < 31; t++)
                    this.framesFireWork.push(TextureCache["fire-work-" + t + ".png"]);
                for (t = 1; t < 15; t++)
                    this.framesDealerChiaBai.push(TextureCache["dealer-chia-bai-" + t + ".png"]);
                for (t = 1; t < 25; t++)
                    this.framesDealerClick.push(TextureCache["dealer-rung-nguc-" + t + ".png"]),
                    this.framesDealerPlay.push(TextureCache["dealer-moi-choi-" + t + ".png"]);
                for (t = 1; t < 49; t++)
                    this.framesDealerNormal.push(TextureCache["dealer-normal-" + t + ".png"]);
                this.framesWin = framesFromTilesetImage("blackjack.win", 230, 230)
            }
            ,
            t.prototype.InitMachine = function() {
                this.mainContainer = new Sprite(TextureCache["blackjack_table_" + this.roomModel.Currency]),
                this.mainContainer.anchor.set(.5),
                this.mainContainer.position.set(this.size[0] / 2, this.size[1] / 2),
                this.application.stage.addChild(this.mainContainer),
                this.dealer = new AnimatedSprite(this.framesDealerNormal),
                this.dealer.anchor.set(.5),
                this.dealer.position.set(0, -283),
                this.dealer.animationSpeed = .2,
                this.dealer.interactive = !0,
                this.dealer.buttonMode = !0,
                this.dealer.on("pointerdown", this.DealerDown.bind(this.dealer, this)),
                this.dealer.play();
                var t = new Sprite(TextureCache["blackjack_text_" + this.lang]);
                t.anchor.set(.5),
                t.position.set(0, -110);
                var e = new Sprite(TextureCache.blackjack_machine);
                e.anchor.set(.5),
                e.scale.set(.8),
                e.position.set(160, -240),
                this.txtNumb = new PIXI.Text("100",{
                    fontFamily: this.fontFaceBold,
                    fontSize: 14,
                    fill: ["yellow", "white"]
                }),
                this.txtNumb.anchor.set(.5),
                this.txtNumb.rotation = 19.8,
                this.txtNumb.position.set(155, -238),
                this.bgContainer.addChild(t, this.dealer, e, this.txtNumb),
                this.txtStatus = new Sprite(TextureCache["small-bg-notify"]),
                this.txtStatus.anchor.set(.5),
                this.txtStatus.position.set(0, 68),
                this.txtStatus.addChild(new PIXI.Text("thông báo",{
                    fontFamily: this.fontFaceBold,
                    fontSize: 12,
                    fill: "white"
                })),
                this.txtStatus.children[0].anchor.set(.5),
                this.txtStatus.visible = !1;
                for (var i = 0; i < this.playerPos.length; i++) {
                    var n = new Sprite(TextureCache["ic-ad-user"]);
                    n.anchor.set(.5),
                    n.position.set(this.playerPos[i][0], this.playerPos[i][1]),
                    this.bgContainer.addChild(n)
                }
                for (i = 0; i < this.betPos.length; i++) {
                    var o = new Sprite(TextureCache["blackjack_cua_dat_" + (1 === this.roomModel.Id ? this.roomModel.Id : 0)]);
                    o.anchor.set(.5),
                    o.position.set(this.betPos[i].x, this.betPos[i].y),
                    this.bgContainer.addChild(o)
                }
                this.btnBet = new Sprite(TextureCache["blackjack_cua_dat_" + (1 === this.roomModel.Id ? this.roomModel.Id : 0)]),
                this.btnBet.anchor.set(.5),
                this.btnBet.position.set(this.betPos[0].x, this.betPos[0].y),
                this.btnBet.addChild(new Sprite(TextureCache["blackjack_cua_dat_" + (1 === this.roomModel.Id ? this.roomModel.Id : 0) + "_active_1"])),
                this.btnBet.children[0].anchor.set(.5),
                this.btnBet.addChild(new Sprite(TextureCache["blackjack_cua_dat_" + (1 === this.roomModel.Id ? this.roomModel.Id : 0) + "_active_2"])),
                this.btnBet.children[1].anchor.set(.5),
                this.btnBet.children[1].scale.set(.9),
                this.btnBet.children[1].alpha = .2,
                this.btnBet.addChild(new Sprite(TextureCache["blackjack_cua_dat_" + (1 === this.roomModel.Id ? this.roomModel.Id : 0) + "_active_2"])),
                this.btnBet.children[2].anchor.set(.5),
                this.btnBet.interactive = !0,
                this.btnBet.buttonMode = !0,
                this.btnBet.on("pointerdown", this.BtnBetDown.bind(this.btnBet, this)),
                this.btnBet.visible = !1,
                this.timer = new a.TimerC({
                    radius: 35,
                    bg: "time-green",
                    cir: "time-black",
                    fontSize: 26
                }),
                this.timer.position.set(0, -190),
                this.bgContainer.addChild(this.timer),
                this.mainContainer.addChild(this.bgContainer, this.playerContainer, this.btnBet, this.chipContainer, this.cardContainer, this.moneyContainer, this.resultContainer, this.totalContainer, this.effectContainer, this.txtStatus)
            }
            ,
            t.prototype.DealerChia = function(t) {
                var e = this;
                e.stop(),
                e.interactive = !1,
                e.buttonMode = !1,
                e.loop = !1,
                e.textures = t.framesDealerChiaBai,
                e.gotoAndPlay(0),
                e.onComplete = function() {
                    t.DealerNormal()
                }
            }
            ,
            t.prototype.DealerDown = function(t) {
                var e = this;
                e.stop(),
                e.interactive = !1,
                e.buttonMode = !1,
                e.loop = !1,
                e.textures = t.framesDealerClick,
                e.gotoAndPlay(0),
                e.onComplete = function() {
                    t.DealerNormal()
                }
            }
            ,
            t.prototype.DealerNormal = function() {
                var t = this.dealer;
                t.stop(),
                t.interactive = !0,
                t.buttonMode = !0,
                t.loop = !0,
                t.textures = this.framesDealerNormal,
                t.gotoAndPlay(0)
            }
            ,
            t.prototype.InitTip = function() {
                this.tipArr = [],
                this.tipArr.push(Message.GetMessage("ca157")),
                this.tipArr.push(Message.GetMessage("ca150") + " {0}"),
                this.tipArr.push(Message.GetMessage("ca148") + " {0} ")
            }
            ,
            t.prototype.ShowBoxTip = function(t) {
                this.boxTip && this.boxTip.destroy({
                    children: !0
                });
                var e = new PIXI.Text(t,{
                    fontFamily: this.fontFace,
                    fontSize: 14,
                    fill: "white"
                });
                this.boxTip = new Graphics,
                this.boxTip.beginFill(0, .5),
                this.boxTip.drawRoundedRect(0, 0, e.width + 10, e.height + 10, e.height / 2),
                this.boxTip.addChild(e),
                e.position.set(5, 5),
                this.boxTip.position.set(80, -340),
                this.mainContainer.addChild(this.boxTip)
            }
            ,
            t.prototype.ShowTipDealer = function(t) {
                if (a.Util.ClearTimeOut(t.timerTip),
                t.ready) {
                    t.indexTip++,
                    2 < t.indexTip && (t.indexTip = 0);
                    var e = t.tipArr[t.indexTip].replace("{0}", a.Util.ParseMoney(t.roomModel.Value * (0 === t.indexTip ? 1 : 1 === t.indexTip ? 100 : 20)));
                    t.ShowBoxTip(e),
                    t.timerTip = setTimeout(function() {
                        return t.ShowTipDealer(t)
                    }, 2e3)
                }
            }
            ,
            t.prototype.InitTableInfo = function() {
                this.infoContainer = new Container,
                this.mainContainer.addChild(this.infoContainer);
                var t = this.roomModel;
                this.btnBack = new Sprite(TextureCache["btn-def"]),
                this.btnBack.anchor.set(.5),
                this.btnBack.position.set(-460, -340),
                this.btnBack.addChild(new Sprite(TextureCache["ic-back"])),
                this.btnBack.children[0].anchor.set(.5),
                this.btnBack.interactive = !0,
                this.btnBack.buttonMode = !0,
                this.btnBack.on("pointerover", this.BtnBackOver).on("pointerout", this.BtnBackOut).on("pointerdown", this.BtnBackDown.bind(this.btnBack, this));
                var e = new PIXI.Text(Message.GetMessage(0 === t.Currency ? "tb113" : "tb112") + ": " + a.Util.NumberToString(t.Id, 3),{
                    fontFamily: this.fontRobotoCondensedRegular,
                    fontSize: 17,
                    fill: ["#a17eb0"]
                });
                e.anchor.set(0, .5),
                e.position.set(-420, -360);
                var i = new PIXI.Text(Message.GetMessage("ca81").toUpperCase() + a.Util.ParseMoney(t.Value) + " " + Config.MoneyText[t.Currency],{
                    fontFamily: this.fontRobotoCondensedRegular,
                    fontSize: 17,
                    fill: ["#a17eb0"]
                });
                i.anchor.set(0, .5),
                i.position.set(-420, -340),
                this.lblSession = new PIXI.Text(Message.GetMessage("ca95").toUpperCase() + " #",{
                    fontFamily: this.fontRobotoCondensedRegular,
                    fontSize: 17,
                    fill: ["#a17eb0"]
                }),
                this.lblSession.anchor.set(0, .5),
                this.lblSession.position.set(-420, -320),
                this.infoContainer.addChild(this.btnBack, e, i, this.lblSession)
            }
            ,
            t.prototype.BtnBackOver = function() {
                this.texture = TextureCache["btn-def-h"]
            }
            ,
            t.prototype.BtnBackOut = function() {
                this.texture = TextureCache["btn-def"]
            }
            ,
            t.prototype.BtnBackDown = function(e) {
                e.hub.connection.invoke("ExitRoom").then(function(t) {
                    console.log("ExitRoom", t),
                    0 === t.c ? (e.Delete(),
                    App.handleBack()) : e.RegisterLeave(t.r)
                })
            }
            ,
            t.prototype.InitButton = function() {
                this.buttonContainer = new Container,
                this.mainContainer.addChild(this.buttonContainer),
                this.btnReady = new Sprite(TextureCache["btn-game-normal"]),
                this.btnReady.name = "btn-game-normal",
                this.btnReady.anchor.set(.5),
                this.btnReady.position.set(480, 290),
                this.btnReady.addChild(new PIXI.Text(Message.GetMessage("ca153").toUpperCase(),{
                    fontFamily: this.fontFaceBold,
                    fontSize: "vi" === this.lang ? 20 : 14,
                    fill: ["#ffffff", "#fff2c5"]
                })),
                this.btnReady.getChildAt(0).anchor.set(.5),
                this.btnReady.getChildAt(0).position.set(0, 0),
                this.btnReady.interactive = !0,
                this.btnReady.buttonMode = !0,
                this.btnReady.on("pointerover", this.BtnHover).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnReadyClick.bind(this.btnReady, this)),
                this.btnX2 = new Sprite(TextureCache["btn-game-normal"]),
                this.btnX2.name = "btn-game-normal",
                this.btnX2.anchor.set(.5),
                this.btnX2.position.set(340, 290),
                this.btnX2.addChild(new PIXI.Text(Message.GetMessage("ca99").toUpperCase(),{
                    fontFamily: this.fontFaceBold,
                    fontSize: "vi" === this.lang ? 20 : 14,
                    fill: ["#ffffff", "#fff2c5"]
                })),
                this.btnX2.getChildAt(0).anchor.set(.5),
                this.btnX2.getChildAt(0).position.set(0, 0),
                this.btnX2.interactive = !0,
                this.btnX2.buttonMode = !0,
                this.btnX2.on("pointerover", this.BtnHover).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnX2Click.bind(this.btnX2, this)),
                this.btnReBet = new Sprite(TextureCache["btn-game-normal"]),
                this.btnReBet.name = "btn-game-normal",
                this.btnReBet.anchor.set(.5),
                this.btnReBet.position.set(200, 290),
                this.btnReBet.addChild(new PIXI.Text(Message.GetMessage("ca98").toUpperCase(),{
                    fontFamily: this.fontFaceBold,
                    fontSize: "vi" === this.lang ? 20 : 14,
                    fill: ["#ffffff", "#fff2c5"]
                })),
                this.btnReBet.getChildAt(0).anchor.set(.5),
                this.btnReBet.getChildAt(0).position.set(0, 0),
                this.btnReBet.interactive = !0,
                this.btnReBet.buttonMode = !0,
                this.btnReBet.on("pointerover", this.BtnHover).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnReBetClick.bind(this.btnReBet, this)),
                this.btnCancel = new Sprite(TextureCache["btn-game-normal"]),
                this.btnCancel.name = "btn-game-normal",
                this.btnCancel.anchor.set(.5),
                this.btnCancel.position.set(60, 290),
                this.btnCancel.addChild(new PIXI.Text(Message.GetMessage("ca154").toUpperCase(),{
                    fontFamily: this.fontFaceBold,
                    fontSize: "vi" === this.lang ? 20 : 14,
                    fill: ["#ffffff", "#fff2c5"]
                })),
                this.btnCancel.getChildAt(0).anchor.set(.5),
                this.btnCancel.getChildAt(0).position.set(0, 0),
                this.btnCancel.interactive = !0,
                this.btnCancel.buttonMode = !0,
                this.btnCancel.on("pointerover", this.BtnHover).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnCancelClick.bind(this.btnCancel, this)),
                this.btnHit = new Sprite(TextureCache["btn-game-normal"]),
                this.btnHit.name = "btn-game-normal",
                this.btnHit.anchor.set(.5),
                this.btnHit.position.set(480, 290),
                this.btnHit.addChild(new PIXI.Text(Message.GetMessage("ca120").toUpperCase(),{
                    fontFamily: this.fontFaceBold,
                    fontSize: "vi" === this.lang ? 20 : 14,
                    fill: ["#ffffff", "#fff2c5"]
                })),
                this.btnHit.getChildAt(0).anchor.set(.5),
                this.btnHit.getChildAt(0).position.set(0, 0),
                this.btnHit.interactive = !0,
                this.btnHit.buttonMode = !0,
                this.btnHit.on("pointerover", this.BtnHover).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnHitClick.bind(this.btnHit, this)),
                this.btnHit.visible = !1,
                this.btnSplit = new Sprite(TextureCache["btn-game-normal"]),
                this.btnSplit.name = "btn-game-normal",
                this.btnSplit.anchor.set(.5),
                this.btnSplit.position.set(340, 290),
                this.btnSplit.addChild(new PIXI.Text(Message.GetMessage("ca121").toUpperCase(),{
                    fontFamily: this.fontFaceBold,
                    fontSize: "vi" === this.lang ? 20 : 14,
                    fill: ["#ffffff", "#fff2c5"]
                })),
                this.btnSplit.getChildAt(0).anchor.set(.5),
                this.btnSplit.getChildAt(0).position.set(0, 0),
                this.btnSplit.interactive = !0,
                this.btnSplit.buttonMode = !0,
                this.btnSplit.on("pointerover", this.BtnHover).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnSplitClick.bind(this.btnSplit, this)),
                this.btnSplit.visible = !1,
                this.btnSurrender = new Sprite(TextureCache["btn-game-normal"]),
                this.btnSurrender.name = "btn-game-normal",
                this.btnSurrender.anchor.set(.5),
                this.btnSurrender.position.set(200, 290),
                this.btnSurrender.addChild(new PIXI.Text(Message.GetMessage("ca118").toUpperCase(),{
                    fontFamily: this.fontFaceBold,
                    fontSize: "vi" === this.lang ? 20 : 14,
                    fill: ["#ffffff", "#fff2c5"]
                })),
                this.btnSurrender.getChildAt(0).anchor.set(.5),
                this.btnSurrender.getChildAt(0).position.set(0, 0),
                this.btnSurrender.interactive = !0,
                this.btnSurrender.buttonMode = !0,
                this.btnSurrender.on("pointerover", this.BtnHover).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnSurrenderClick.bind(this.btnSurrender, this)),
                this.btnSurrender.visible = !1,
                this.btnDouble = new Sprite(TextureCache["btn-game-normal"]),
                this.btnDouble.name = "btn-game-normal",
                this.btnDouble.anchor.set(.5),
                this.btnDouble.position.set(60, 290),
                this.btnDouble.addChild(new PIXI.Text(Message.GetMessage("ca122").toUpperCase(),{
                    fontFamily: this.fontFaceBold,
                    fontSize: "vi" === this.lang ? 20 : 14,
                    fill: ["#ffffff", "#fff2c5"]
                })),
                this.btnDouble.getChildAt(0).anchor.set(.5),
                this.btnDouble.getChildAt(0).position.set(0, 0),
                this.btnDouble.interactive = !0,
                this.btnDouble.buttonMode = !0,
                this.btnDouble.on("pointerover", this.BtnHover).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnDoubleClick.bind(this.btnDouble, this)),
                this.btnDouble.visible = !1,
                this.btnStop = new Sprite(TextureCache["btn-game-normal"]),
                this.btnStop.name = "btn-game-normal",
                this.btnStop.anchor.set(.5),
                this.btnStop.position.set(-80, 290),
                this.btnStop.addChild(new PIXI.Text(Message.GetMessage("ca119").toUpperCase(),{
                    fontFamily: this.fontFaceBold,
                    fontSize: "vi" === this.lang ? 20 : 14,
                    fill: ["#ffffff", "#fff2c5"]
                })),
                this.btnStop.getChildAt(0).anchor.set(.5),
                this.btnStop.getChildAt(0).position.set(0, 0),
                this.btnStop.interactive = !0,
                this.btnStop.buttonMode = !0,
                this.btnStop.on("pointerover", this.BtnHover).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnStopClick.bind(this.btnStop, this)),
                this.btnStop.visible = !1,
                this.buttonContainer.addChild(this.btnReady, this.btnX2, this.btnReBet, this.btnCancel, this.btnHit, this.btnSplit, this.btnSurrender, this.btnDouble, this.btnStop)
            }
            ,
            t.prototype.DisableButton = function(t) {
                t.interactive = !1,
                t.buttonMode = !1,
                t.texture = TextureCache[t.name.replace("normal", "disable")]
            }
            ,
            t.prototype.EnableButton = function(t) {
                t.interactive = !0,
                t.buttonMode = !0,
                t.texture = TextureCache[t.name],
                t.visible = !0
            }
            ,
            t.prototype.DisableButtons = function() {
                this.DisableButton(this.btnReady),
                this.DisableButton(this.btnReBet),
                this.DisableButton(this.btnX2),
                this.DisableButton(this.btnCancel),
                this.DisableButton(this.btnDouble),
                this.DisableButton(this.btnStop),
                this.DisableButton(this.btnSplit),
                this.DisableButton(this.btnHit),
                this.DisableButton(this.btnSurrender)
            }
            ,
            t.prototype.ShowButtonsBet = function() {
                this.btnBet.visible = this.btnCancel.visible = this.btnReady.visible = this.btnReBet.visible = this.btnX2.visible = this.boxBet.visible = !0,
                this.tBet = new TweenMax.to(this.btnBet,.3,{
                    data: "blackjack",
                    alpha: .3,
                    yoyo: !0,
                    repeat: -1
                })
            }
            ,
            t.prototype.HideButtonsBet = function() {
                if (this.btnBet.visible = this.btnCancel.visible = this.btnReady.visible = this.btnReBet.visible = this.btnX2.visible = this.boxBet.visible = !1,
                this.tBet) {
                    try {
                        this.tBet.kill()
                    } catch (t) {}
                    this.tBet = null,
                    this.btnBet.alpha = 1
                }
            }
            ,
            t.prototype.ShowButtonsGame = function() {
                this.HideButtonsBet(),
                this.btnDouble.visible = this.btnHit.visible = this.btnSplit.visible = this.btnStop.visible = this.btnSurrender.visible = !0
            }
            ,
            t.prototype.HideButtonsGame = function() {
                this.btnDouble.visible = this.btnHit.visible = this.btnSplit.visible = this.btnStop.visible = this.btnSurrender.visible = !1
            }
            ,
            t.prototype.BtnHover = function() {
                this.texture = TextureCache[this.name.replace("normal", "hover")]
            }
            ,
            t.prototype.BtnOut = function() {
                this.texture = TextureCache[this.name]
            }
            ,
            t.prototype.BtnDown = function() {
                this.texture = TextureCache[this.name.replace("normal", "click")]
            }
            ,
            t.prototype.BtnBetDown = function(e) {
                e.hub.connection.invoke("Bet", e.betValue, e.currentPlayer.Position).then(function(t) {
                    console.log("call bet", t),
                    0 <= t.c ? e.Bet(t.r) : e.ShowError(t.c)
                })
            }
            ,
            t.prototype.BtnReadyClick = function(e) {
                e.hub.connection.invoke("FinishBetting").then(function(t) {
                    console.log("FinishBetting", t),
                    0 <= t.c && e.ConfirmBet(t.r)
                })
            }
            ,
            t.prototype.BtnX2Click = function(e) {
                0 < e.moneyLog && e.hub.connection.invoke("Bet", 2 * e.moneyLog, e.currentPlayer.Position).then(function(t) {
                    console.log("call bet", t),
                    0 <= t.c ? e.Bet(t.r) : e.ShowError(t.c)
                })
            }
            ,
            t.prototype.BtnCancelClick = function(e) {
                e.hub.connection.invoke("ClearBetting").then(function(t) {
                    console.log("ClearBetting", t),
                    0 <= t.c && e.ClearBet(t.r)
                })
            }
            ,
            t.prototype.BtnReBetClick = function(e) {
                0 < e.moneyLog && e.hub.connection.invoke("Bet", e.moneyLog, e.currentPlayer.Position).then(function(t) {
                    console.log("call bet", t),
                    0 <= t.c ? e.Bet(t.r) : e.ShowError(t.c)
                })
            }
            ,
            t.prototype.BtnHitClick = function(e) {
                e.DisableButtons(),
                e.hub.connection.invoke("Request", e.eAction.Hit, !1).then(function(t) {
                    console.log("hit", t),
                    0 == t.c && e.PlayerAction(t.r)
                })
            }
            ,
            t.prototype.BtnSplitClick = function(e) {
                e.DisableButtons(),
                e.hub.connection.invoke("Request", e.eAction.Split, !1).then(function(t) {
                    0 == t.c ? e.Split(t.r) : e.ShowError(t.c)
                })
            }
            ,
            t.prototype.BtnSurrenderClick = function(e) {
                e.DisableButtons(),
                e.hub.connection.invoke("Request", e.eAction.Surrender, !1).then(function(t) {
                    0 == t.c || e.ShowError(t.c)
                })
            }
            ,
            t.prototype.BtnDoubleClick = function(e) {
                e.DisableButtons(),
                e.hub.connection.invoke("Request", e.eAction.DoubleDown, !1).then(function(t) {
                    0 == t.c && (e.isX2 = !0,
                    e.Double(t.r))
                })
            }
            ,
            t.prototype.BtnStopClick = function(e) {
                e.DisableButtons(),
                e.hub.connection.invoke("Request", e.eAction.Stand, !1).then(function(t) {
                    0 == t.c && e.PlayerAction(t.r)
                })
            }
            ,
            t.prototype.InitBet = function() {
                this.boxBet = new Graphics,
                this.boxBet.beginFill(0),
                this.boxBet.drawRoundedRect(0, 0, 416, 72, 36),
                this.boxBet.position.set(-540, 251),
                this.buttonContainer.addChild(this.boxBet),
                this.arrBetChip = [],
                this.arrBetText = [];
                for (var t = this.chipConfig[this.roomModel.Currency][this.roomModel.Value], e = 0; e < t.length; e++) {
                    var i = new Sprite(TextureCache[t[e].img]);
                    i.anchor.set(.5),
                    i.position.set(this.arrBetPos[e].x, this.arrBetPos[e].y),
                    i.scale.set(this.arrBetPos[e].s),
                    i.value = t[e].value,
                    i.posY = this.arrBetPos[e].y,
                    i.active = !1,
                    i.i = e,
                    i.interactive = !0,
                    i.buttonMode = !0,
                    i.on("pointerover", this.ChipOver).on("pointerout", this.ChipOut).on("pointerdown", this.ChipDown.bind(i, this));
                    var n = new PIXI.Text(t[e].number,{
                        fontFamily: this.fontFaceBold,
                        fontSize: 14,
                        fill: ["white"],
                        padding: 10,
                        align: "center"
                    });
                    n.anchor.set(.5),
                    n.position.set(this.arrBetPos[e].x, this.arrBetPos[e].y + 30),
                    this.boxBet.addChild(i, n),
                    this.arrBetChip.push(i),
                    this.arrBetText.push(n)
                }
                this.SetActiveBet(this, this.arrBetChip[0])
            }
            ,
            t.prototype.ChipOver = function() {
                this.y = this.posY - 5
            }
            ,
            t.prototype.ChipOut = function() {
                this.active || (this.y = this.posY)
            }
            ,
            t.prototype.ChipDown = function(t) {
                t.ResetBet(t),
                t.SetActiveBet(t, this)
            }
            ,
            t.prototype.ResetBet = function(t) {
                for (var e = 0; e < t.arrBetChip.length; e++)
                    t.arrBetChip[e].y = t.arrBetChip[e].posY,
                    t.arrBetChip[e].active = !1,
                    t.arrBetText[e].style.fill = "white"
            }
            ,
            t.prototype.SetActiveBet = function(t, e) {
                e.active = !0,
                e.y = e.posY - 5,
                t.arrBetText[e.i].style.fill = "yellow",
                t.betValue = e.value
            }
            ,
            t.prototype.InitTotal = function() {
                this.arrMoney = [],
                this.arrStatus = [];
                for (var t = 0; t < this.playerPos.length; t++) {
                    var e = new Sprite(TextureCache.blackjack_tien_dat);
                    e.anchor.set(.5),
                    e.position.set(this.betPos[t].x, this.betPos[t].y + 38);
                    var i = new PIXI.Text("0",{
                        fontFamily: this.fontFaceBold,
                        fontSize: 12,
                        fill: "yellow"
                    });
                    i.anchor.set(.5),
                    e.addChild(i),
                    e.visible = !1,
                    this.arrMoney.push(e);
                    var n = new Sprite(TextureCache["blackjack_them_" + this.lang]);
                    n.anchor.set(.5),
                    n.position.set(this.betPos[t].x, this.betPos[t].y + 38),
                    this.arrStatus.push(n),
                    n.visible = !1,
                    this.totalContainer.addChild(e, n)
                }
                this.boxInsu = new Sprite(TextureCache["blackjack_bao_hiem_box_" + (1 === this.roomModel.Id ? this.roomModel.Id : 0)]),
                this.boxInsu.anchor.set(.5),
                this.boxInsu.y = 30,
                this.boxInsu.visible = !1;
                var o = new Sprite(TextureCache["blackjack_bao_hiem_" + (1 === this.roomModel.Id ? this.roomModel.Id : 0) + "_ok"]);
                o.anchor.set(.5),
                o.x = 27.5,
                o.interactive = !0,
                o.buttonMode = !0,
                o.on("pointerover", this.BtnFilterOver.bind(o, this)).on("pointerout", this.BtnFilterOut.bind(o, this)).on("pointerdown", this.BtnInsuOkDown.bind(o, this));
                var a = new Sprite(TextureCache["blackjack_bao_hiem_" + (1 === this.roomModel.Id ? this.roomModel.Id : 0) + "_cancel"]);
                a.anchor.set(.5),
                a.x = -27.5,
                a.interactive = !0,
                a.buttonMode = !0,
                a.on("pointerover", this.BtnFilterOver.bind(a, this)).on("pointerout", this.BtnFilterOut.bind(a, this)).on("pointerdown", this.BtnInsuCancelDown.bind(a, this)),
                this.boxInsu.addChild(o, a),
                this.totalContainer.addChild(this.boxInsu)
            }
            ,
            t.prototype.BtnFilterOver = function(t) {
                this.filters = [t.filter]
            }
            ,
            t.prototype.BtnFilterOut = function(t) {
                this.filters = null
            }
            ,
            t.prototype.BtnInsuOkDown = function(e) {
                e.DisableButtons(),
                e.hub.connection.invoke("Request", e.eAction.Insurance, !0).then(function(t) {
                    0 == t.c && e.PlayerAction(t.r)
                })
            }
            ,
            t.prototype.BtnInsuCancelDown = function(t) {
                t.boxInsu.visible = !1
            }
            ,
            t.prototype.ShowInSu = function() {
                this.boxInsu.visible = !0
            }
            ,
            t.prototype.RemoveEffect = function() {
                if (this.resultContainer)
                    try {
                        this.resultContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                this.resultContainer = new Container,
                this.mainContainer.addChildAt(this.resultContainer, 3)
            }
            ,
            t.prototype.ResetContainer = function() {
                if (this.resultContainer)
                    try {
                        this.resultContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                if (this.resultContainer = new Container,
                this.mainContainer.addChildAt(this.resultContainer, 3),
                this.moneyContainer)
                    try {
                        this.moneyContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                if (this.moneyContainer = new Container,
                this.mainContainer.addChildAt(this.moneyContainer, 3),
                this.cardContainer)
                    try {
                        this.cardContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                if (this.cardContainer = new Container,
                this.mainContainer.addChildAt(this.cardContainer, 3),
                this.dealerContainer = new Container,
                this.cardContainer.addChild(this.dealerContainer),
                this.chipContainer)
                    try {
                        this.chipContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                if (this.chipContainer = new Container,
                this.mainContainer.addChildAt(this.chipContainer, 3),
                this.effectContainer)
                    try {
                        this.effectContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                this.effectContainer = new Container,
                this.mainContainer.addChildAt(this.effectContainer, this.mainContainer.children.length - 1)
            }
            ,
            t.prototype.DeleteTween = function() {
                for (var t = TweenMax.getAllTweens(), e = 0; e < t.length; e++)
                    "blackjack" === t[e].data && t[e].kill()
            }
            ,
            t.prototype.HideReady = function() {
                for (var t = 0; t < this.players.length; t++)
                    this.players[t] && (this.players[t].icReady.visible = !1)
            }
            ,
            t.prototype.ResetGame = function() {
                a.Util.ClearTimeOut(this.timerTip),
                this.DeleteTween(),
                this.StopJack(),
                this.HideReady(),
                this.ResetContainer(),
                this.isX2 = !1,
                this.moneyLog = this.moneyBet[0],
                this.moneyBet = [0, 0, 0, 0, 0];
                for (var t = 0; t < this.players.length; t++)
                    this.arrMoney[t].text = "0",
                    this.arrMoney[t].visible = !1,
                    this.arrStatus[t].visible = !1,
                    this.players[t] && this.players[t].Reset()
            }
            ,
            t.prototype.UpdateDeck = function() {
                this.txtNumb.text = this.roomModel.Deck
            }
            ,
            t.prototype.UpdateAction = function(t, e) {
                this.arrStatus[e].visible = 0 !== t,
                this.arrStatus[e].texture = TextureCache[2 === t ? "blackjack_dung_" + this.lang : 3 === t ? "blackjack_them_" + this.lang : 5 === t ? "blackjack_tachbai_" + this.lang : 4 === t ? "blackjack_gapdoi_" + this.lang : ""]
            }
            ,
            t.prototype.GenData = function(t) {
                for (var e = t.Boxes, i = 0; i < e.length; i++) {
                    var n = e[i]
                      , o = this.GetPlayerByAccountId(n.Owner);
                    if (o && n.Hands && 0 < n.Hands.length) {
                        var a = n.Hands;
                        o.ReHand(a);
                        for (var s = 0; s < a.length; s++) {
                            if (a[s].BettingLogs && 0 < a[s].BettingLogs.length)
                                for (var r = 0; r < a[s].BettingLogs.length; r++)
                                    o.Bet(a[s].BettingLogs[r]);
                            a[s].Cards && 0 < a[s].Cards.length && (o.UpdatePoint(a[s].Sum, a[s].Index, a[s].BestSum),
                            o.CheckJack(a[s].Status))
                        }
                    }
                }
                t.DealerHand && this.ReCardDealer(t.DealerHand)
            }
            ,
            t.prototype.StartBet = function() {
                this.HideButtonsGame(),
                this.ShowButtonsBet(),
                this.timer.StartTimer(this.roomModel.Session.Timeout, this.roomModel.Session.Timeout),
                0 < this.moneyLog && (this.EnableButton(this.btnReBet),
                this.EnableButton(this.btnX2))
            }
            ,
            t.prototype.Bet = function(t) {
                var e = this.GetPlayerByAccountId(null != t.id ? t.id : t.Id);
                e && (e.Bet(t),
                e.accountId === this.currentPlayer.AccountId && 1 === this.roomModel.Session.Phrase && (this.EnableButton(this.btnReady),
                this.EnableButton(this.btnCancel),
                this.DisableButton(this.btnReBet),
                this.DisableButton(this.btnX2)))
            }
            ,
            t.prototype.GetTextureMoney = function(t) {
                var e, i = this.chipConfig[this.roomModel.Currency][this.roomModel.Value];
                return i[0].value <= t && t < i[1].value ? e = i[0].img : i[1].value <= t && t < i[2].value ? e = i[1].img : i[2].value <= t && t < i[3].value ? e = i[2].img : i[3].value <= t && t < i[4].value ? e = i[3].img : t >= i[4].value && (e = i[4].img),
                e
            }
            ,
            t.prototype.ConfirmBet = function(t) {
                var e = this.GetPlayerByAccountId(t.id);
                e && (e.icReady.visible = !0,
                e.accountId === this.currentPlayer.AccountId && (this.DisableButtons(),
                this.boxBet.visible = !1))
            }
            ,
            t.prototype.ClearBet = function(t) {
                var e = this
                  , i = this.GetPlayerByAccountId(t.id);
                if (i) {
                    for (var n = 0; n < i.moneyContainer.children.length; n++)
                        i.moneyContainer.children[n].visible = !1;
                    i.player.Balance = t.balance,
                    i.UndoChip(this.moneyBet[i.pos]);
                    var o = new PIXI.Text("+" + a.Util.ParseMoney(this.moneyBet[i.pos]),{
                        fontFamily: this.fontFaceBold,
                        fontSize: 14,
                        fill: "yellow"
                    });
                    o.anchor.set(.5),
                    o.position.set(i.avatar.x, i.avatar.y),
                    i.moneyContainer.addChild(o),
                    TweenMax.to(o, .8, {
                        data: "blackjack",
                        y: o.y - 80,
                        onComplete: function() {
                            o.visible = !1
                        }
                    }),
                    i.UpdateBalance(i.player.Balance),
                    i.moneyBet = 0,
                    e.moneyBet[i.pos] = 0,
                    e.arrMoney[i.pos].visible = !1,
                    i.accountId === this.currentPlayer.AccountId && (e.DisableButtons(),
                    e.boxBet.visible = !0,
                    e.ShowButtonsBet(),
                    e.HideButtonsGame(),
                    0 < e.moneyLog && (e.EnableButton(e.btnX2),
                    e.EnableButton(e.btnReBet)))
                }
            }
            ,
            t.prototype.DrawCards = function() {
                this.arrCards = [],
                a.Util.ClearTimeOut(this.timerTip);
                try {
                    this.boxTip.visible = !1
                } catch (t) {}
                this.DisableButtons(),
                this.HideButtonsBet(),
                this.HideButtonsGame(),
                this.HideReady(),
                this.timer.ClearTimer();
                for (var t = this.roomModel.Session.Boxes, e = 0; e < t.length; e++) {
                    var i = t[e];
                    (o = this.GetPlayerByAccountId(i.Owner)) && o.CreateHand(i.Hands)
                }
                for (e = 0; e < 2; e++)
                    for (var n = 0; n < t.length; n++) {
                        var o;
                        i = t[n];
                        (o = this.GetPlayerByAccountId(i.Owner)) && 0 < o.handCards[0].length && this.arrCards.push(o.handCards[0][e])
                    }
                this.DivideCards()
            }
            ,
            t.prototype.DivideCards = function() {
                if (0 < this.arrCards.length)
                    for (var t = 0; t < this.arrCards.length; t++)
                        this.Draw(this.arrCards[t], .1 * t);
                var e = this;
                this.timerOut = setTimeout(function() {
                    e.DrawCardDealer(),
                    e.ShowPoint()
                }, 500 + 100 * this.arrCards.length)
            }
            ,
            t.prototype.ShowPoint = function() {
                for (var t = this.roomModel.Session.Boxes, e = 0; e < t.length; e++) {
                    var i = t[e]
                      , n = this.GetPlayerByAccountId(i.Owner);
                    n && (n.UpdatePoint(i.Hands[0].Sum, i.Hands[0].Index, i.Hands[0].BestSum),
                    n.CheckJack(i.Hands[0].Status))
                }
            }
            ,
            t.prototype.DrawCardDealer = function() {
                this.arrCardDealer = [];
                for (var t = this.roomModel.Session.DealerHand.Cards, e = 0; e < t.length; e++) {
                    var i = new Sprite(TextureCache["joker.png"]);
                    i.anchor.set(.5),
                    i.scale.set(.01),
                    i.rotation = 2 * Math.PI,
                    i.position.set(this.txtNumb.x, this.txtNumb.y),
                    i.value = t[e],
                    i.posX = this.cardDealerPos.x + 25 * e,
                    i.posY = this.cardDealerPos.y,
                    i.s = this.cardDealerPos.s,
                    this.arrCardDealer.push(i),
                    this.dealerContainer.addChild(i)
                }
                if (this.pointDealer = new Sprite(TextureCache.blackjack_ketqua_2),
                this.pointDealer.anchor.set(.5),
                this.pointDealer.addChild(new PIXI.Text("0",{
                    fontFamily: this.fontFace,
                    fontSize: 10,
                    fill: "white"
                })),
                this.pointDealer.children[0].anchor.set(.5),
                this.pointDealer.position.set(0, -160),
                this.pointDealer.visible = !1,
                this.dealerContainer.addChild(this.pointDealer),
                0 < this.arrCardDealer.length)
                    for (e = 0; e < this.arrCardDealer.length; e++)
                        this.Draw(this.arrCardDealer[e], .6 * e)
            }
            ,
            t.prototype.ReCardDealer = function(t) {
                this.arrCardDealer = [];
                for (var e = t.Cards, i = 0; i < e.length; i++) {
                    -1 === e[i];
                    var n = new Sprite(TextureCache[-1 !== e[i] ? this.cardsMap[e[i]] : "joker.png"]);
                    n.anchor.set(.5),
                    n.scale.set(this.cardDealerPos.s),
                    n.position.set(this.cardDealerPos.x + 25 * i, this.cardDealerPos.y),
                    n.value = e[i],
                    n.posX = this.cardDealerPos.x + 25 * i,
                    n.posY = this.cardDealerPos.y,
                    n.s = this.cardDealerPos.s,
                    this.arrCardDealer.push(n),
                    this.dealerContainer.addChild(n)
                }
                if (this.pointDealer = new Sprite(TextureCache.blackjack_ketqua_2),
                this.pointDealer.anchor.set(.5),
                this.pointDealer.addChild(new PIXI.Text("0",{
                    fontFamily: this.fontFace,
                    fontSize: 10,
                    fill: "white"
                })),
                this.pointDealer.children[0].anchor.set(.5),
                this.pointDealer.position.set(0, -160),
                this.pointDealer.visible = !1,
                this.dealerContainer.addChild(this.pointDealer),
                0 < this.arrCardDealer.length)
                    for (i = 0; i < this.arrCardDealer.length; i++)
                        this.Draw(this.arrCardDealer[i], .6 * i);
                t.Sum && (this.UpdatePointDealer(t.Sum),
                this.CheckDealerStatus(t.Status))
            }
            ,
            t.prototype.UpdatePointDealer = function(t) {
                var e;
                e = 1 < t.length ? t[0] + "/" + t[1] : t[0],
                this.pointDealer.visible = !0,
                this.pointDealer.children[0].text = 21 < t[0] ? Message.GetMessage("ca221") : e
            }
            ,
            t.prototype.Draw = function(t, e) {
                var i = this;
                TweenMax.to(t, .5, {
                    x: t.posX,
                    y: t.posY,
                    rotation: 0,
                    data: "blackjack",
                    delay: e
                }),
                TweenMax.to(t.scale, .5, {
                    x: t.s,
                    y: t.s,
                    rotation: 0,
                    data: "blackjack",
                    delay: e,
                    onComplete: function() {
                        0 <= t.value && i.Flip(t)
                    }
                })
            }
            ,
            t.prototype.MoveCard = function(t, e) {}
            ,
            t.prototype.MoveAndFlip = function(t) {}
            ,
            t.prototype.Flip = function(t) {
                var e = this;
                if (t)
                    try {
                        TweenMax.to(t.scale, .3, {
                            data: "blackjack",
                            x: .01,
                            onComplete: function() {
                                t.texture = TextureCache[e.cardsMap[t.value]];
                                try {
                                    TweenMax.to(t.scale, .3, {
                                        data: "blackjack",
                                        x: t.s
                                    })
                                } catch (t) {}
                            }
                        })
                    } catch (t) {}
            }
            ,
            t.prototype.StartActions = function() {
                a.Util.ClearTimeOut(this.timerTip),
                this.boxInsu.visible = !1,
                this.DisableButtons(),
                this.HideButtonsBet(),
                this.ShowButtonsGame(),
                this.ShowBoxTip(Message.GetMessage("ca158"));
                var t = this.roomModel.Session.Roles[0]
                  , e = this.GetPlayerByAccountId(t.AccountId);
                this.ShowTimer(e, this.roomModel.Session.Timeout, this.roomModel.Session.Timeout),
                this.ShowAction(t)
            }
            ,
            t.prototype.ShowAction = function(t) {
                try {
                    var e = t.Actions;
                    if (0 < e.length && t.AccountId === this.currentPlayer.AccountId)
                        for (var i = 0; i < e.length; i++)
                            switch (e[i]) {
                            case 2:
                                this.EnableButton(this.btnStop);
                                break;
                            case 3:
                                this.EnableButton(this.btnHit);
                                break;
                            case 5:
                                this.EnableButton(this.btnSplit);
                                break;
                            case 6:
                                this.EnableButton(this.btnSurrender);
                                break;
                            case 4:
                                this.EnableButton(this.btnDouble)
                            }
                    var n = this.GetPlayerByAccountId(t.AccountId);
                    TweenMax.to(n.cardContainer.getChildByName("hand-" + t.Hand).scale, .3, {
                        x: 1.1,
                        y: 1.1,
                        data: "blackjack"
                    }),
                    TweenMax.to(n.cardContainer.getChildByName("hand-" + t.Hand), .3, {
                        x: this.conPos[n.pos][t.Hand].x,
                        y: this.conPos[n.pos][t.Hand].y,
                        data: "blackjack"
                    }),
                    this.StopBlink(),
                    this.cArrow = n.cardContainer.getChildByName("hand-" + t.Hand).children[0],
                    this.cArrow.visible = !0,
                    this.timerA = TweenMax.to(this.cArrow, .3, {
                        alpha: .3,
                        data: "blackjack",
                        repeat: -1,
                        yoyo: !0
                    })
                } catch (t) {}
            }
            ,
            t.prototype.StopBlink = function() {
                try {
                    this.timerA.kill()
                } catch (t) {}
                try {
                    this.timerA = null
                } catch (t) {}
                try {
                    this.cArrow.visible = !1
                } catch (t) {}
            }
            ,
            t.prototype.PlayerAction = function(t) {
                this.RemoveTimer();
                var e = this.GetPlayerByAccountId(t.accountId);
                if (t.action != this.eAction.Bet)
                    if (t.action != this.eAction.Stand)
                        if (t.action != this.eAction.Hit)
                            if (t.action != this.eAction.Split) {
                                if (t.action == this.eAction.Insurance) {
                                    var i = this.moneyBet[e.pos] / 2;
                                    return e.Bet({
                                        amount: i,
                                        balance: e.player.Balance - i
                                    }, !0),
                                    void (this.boxInsu.visible = !1)
                                }
                            } else
                                this.Split(t);
                        else
                            this.Hit(t);
                    else
                        this.Stand(t);
                else
                    this.Bet(t)
            }
            ,
            t.prototype.Stand = function(t) {
                console.log("dung", t),
                this.DisableButtons();
                var e = this.GetPlayerByAccountId(t.accountId);
                e && (this.UpdateAction(2, e.pos),
                this.StopBlink(),
                TweenMax.to(e.cardContainer.getChildByName("hand-" + t.hand.Index).scale, .5, {
                    data: "blackjack",
                    x: 1,
                    y: 1
                }),
                TweenMax.to(e.cardContainer.getChildByName("hand-" + t.hand.Index), .5, {
                    data: "blackjack",
                    x: 0,
                    y: 0
                }))
            }
            ,
            t.prototype.Hit = function(t) {
                console.log("them", t);
                var e = this.GetPlayerByAccountId(t.accountId);
                e && (e.AddCard(t.hand),
                this.UpdateAction(t.action, e.pos))
            }
            ,
            t.prototype.Split = function(t) {
                console.log("tach bai", t);
                var e = this.GetPlayerByAccountId(t.accountId);
                if (e) {
                    var i = t.hand.BettingLogs[0].Amount;
                    e.Bet({
                        amount: i,
                        balance: e.player.Balance - i
                    }, !0),
                    this.UpdateAction(t.action, e.pos),
                    e.Split(t)
                }
            }
            ,
            t.prototype.Double = function(t) {
                console.log("gap doi", t);
                var e = this.GetPlayerByAccountId(t.accountId);
                if (e) {
                    var i = t.hand.BettingLogs[t.hand.BettingLogs.length - 1].Amount / 2;
                    e.Bet({
                        amount: i,
                        balance: e.player.Balance - i
                    }, !0, !0),
                    this.UpdateAction(t.action, e.pos),
                    e.AddCard(t.hand)
                }
            }
            ,
            t.prototype.DealerAction = function() {
                this.RemoveTimer(),
                this.StopBlink(),
                this.ShowBoxTip(Message.GetMessage("ca159"));
                var t = this.roomModel.Session.DealerHand;
                this.arrCardDealer[1].value = t.Cards[1],
                this.Flip(this.arrCardDealer[1]);
                var e = this;
                this.timerOut = setTimeout(function() {
                    e.CheckDealerStatus(t.Status),
                    e.UpdatePointDealer(t.Sum)
                }, 600)
            }
            ,
            t.prototype.UpdateHand = function(t) {
                var e = t.Cards
                  , i = new Sprite(TextureCache["joker.png"]);
                i.anchor.set(.5),
                i.scale.set(.01),
                i.rotation = 2 * Math.PI,
                i.position.set(this.txtNumb.x, this.txtNumb.y),
                i.value = e[e.length - 1],
                i.posX = this.cardDealerPos.x + 25 * (e.length - 1),
                i.posY = this.cardDealerPos.y,
                i.s = this.cardDealerPos.s,
                this.arrCardDealer.push(i),
                this.dealerContainer.addChildAt(i, this.dealerContainer.children.length - 1),
                this.Draw(i, 0);
                var n = this;
                this.timerOut = setTimeout(function() {
                    n.CheckDealerStatus(t.Status),
                    n.UpdatePointDealer(t.Sum)
                }, 500)
            }
            ,
            t.prototype.CheckDealerStatus = function(t) {
                if (6 !== t) {
                    if (1 === t)
                        for (var e = 0; e < this.arrCardDealer.length; e++)
                            this.arrCardDealer[e].tint = 5592405
                } else
                    this.CreateJack(!0).position.set(0, -190)
            }
            ,
            t.prototype.CreateJack = function(t) {
                var e = new Container;
                this.cardContainer.addChild(e);
                var i = new Sprite(TextureCache.blackjack_blackjack_3);
                i.anchor.set(.5);
                var n = new Sprite(TextureCache.blackjack_blackjack_4);
                n.anchor.set(.5);
                var o = new Sprite(TextureCache.blackjack_blackjack_27);
                o.anchor.set(.5);
                var a = new Sprite(TextureCache.blackjack_sao);
                a.anchor.set(.5),
                a.scale.set(.7),
                a.position.set(-15, -3);
                var s = new Sprite(TextureCache.blackjack_sao);
                s.anchor.set(.5),
                s.scale.set(.7),
                s.position.set(15, -3);
                var r = new Sprite(TextureCache.blackjack_sao);
                r.anchor.set(.5),
                r.position.set(0, -10);
                var h = new Sprite(TextureCache.blackjack_light);
                h.anchor.set(.5),
                h.position.set(-50, -3);
                var l = new Sprite(TextureCache.blackjack_light);
                l.anchor.set(.5),
                l.position.set(50, -3);
                var c = new Sprite(TextureCache.blackjack_light);
                c.anchor.set(.5),
                c.position.set(30, -43);
                var d = new Sprite(TextureCache.blackjack_light);
                d.anchor.set(.5),
                d.position.set(-30, -43);
                var u = new Sprite(TextureCache.blackjack_light);
                u.anchor.set(.5),
                u.position.set(0, 40);
                var p = new Sprite(TextureCache.blackjack_blackjack_1);
                return p.anchor.set(.5),
                p.scale.set(.8),
                p.y = 25,
                o.addChild(h, l, c, d, u, a, s, r),
                e.addChild(i, n, o, p),
                TweenMax.to(h.scale, .4, {
                    x: .5,
                    y: .5,
                    data: "blackjack-jack",
                    yoyo: !0,
                    repeat: -1
                }),
                TweenMax.to(l.scale, .4, {
                    x: .5,
                    y: .5,
                    data: "blackjack-jack",
                    yoyo: !0,
                    repeat: -1,
                    delay: .3
                }),
                TweenMax.to(c.scale, .4, {
                    x: .5,
                    y: .5,
                    data: "blackjack-jack",
                    yoyo: !0,
                    repeat: -1,
                    delay: .5
                }),
                TweenMax.to(d.scale, .4, {
                    x: .5,
                    y: .5,
                    data: "blackjack-jack",
                    yoyo: !0,
                    repeat: -1,
                    delay: .25
                }),
                TweenMax.to(u.scale, .4, {
                    x: .5,
                    y: .5,
                    data: "blackjack-jack",
                    yoyo: !0,
                    repeat: -1,
                    delay: .4
                }),
                TweenMax.to(i, 3, {
                    rotation: 2 * Math.PI,
                    data: "blackjack-jack",
                    yoyo: !0,
                    repeat: -1
                }),
                TweenMax.to(n, 3, {
                    rotation: 2 * Math.PI,
                    data: "blackjack-jack",
                    yoyo: !0,
                    repeat: -1,
                    delay: .4
                }),
                TweenMax.to(a.scale, .4, {
                    x: .5,
                    y: .5,
                    data: "blackjack-jack",
                    yoyo: !0,
                    repeat: -1
                }),
                TweenMax.to(s.scale, .2, {
                    x: .5,
                    y: .5,
                    data: "blackjack-jack",
                    yoyo: !0,
                    repeat: -1,
                    delay: .5
                }),
                TweenMax.to(r.scale, .2, {
                    x: 1.2,
                    y: 1.2,
                    data: "blackjack-jack",
                    yoyo: !0,
                    repeat: -1,
                    delay: .3
                }),
                setTimeout(function() {
                    i.visible = !1,
                    n.visible = !1,
                    o.visible = !1,
                    TweenMax.to(p, .2, {
                        y: -35,
                        data: "blackjack-jack"
                    })
                }, 1500),
                e
            }
            ,
            t.prototype.StopJack = function() {
                for (var t = TweenMax.getAllTweens(), e = 0; e < t.length; e++)
                    "blackjack-jack" === t[e].data && t[e].kill()
            }
            ,
            t.prototype.UpdatePrizes = function(i) {
                console.log("updateprizés", i);
                for (var t = function(t) {
                    var e = n.GetPlayerByAccountId(i[t].accountId);
                    e.isJack = !0,
                    i[t].totalPrize > i[t].totalBet && e.MoneyDealerToBet(i[t].totalPrize),
                    e.player.Balance += i[t].totalPrize,
                    e.UpdateMoney(i[t].totalPrize),
                    e.UpdateBalance(e.player.Balance),
                    setTimeout(function() {
                        e.MoneyToOwner(i[t].totalPrize)
                    }, 500),
                    e.Result(i[t].totalPrize, i[t].totalBet)
                }, n = this, e = 0; e < i.length; e++)
                    t(e)
            }
            ,
            t.prototype.ProcessResult = function() {
                a.Util.ClearTimeOut(this.timerTip),
                this.ShowBoxTip(Message.GetMessage("me18"));
                for (var c, d = this.roomModel.Session.Prizes, t = function(t) {
                    if (u.players[t]) {
                        var e = u.players[t]
                          , i = 0 < e.moneyBet
                          , n = !1
                          , o = 0;
                        c = u.roomModel.Session.Boxes;
                        for (var a = 0; a < c.length; a++)
                            if (c[a].Owner === e.accountId) {
                                for (var s = c[a].Hands, r = 0; r < s.length; r++)
                                    if (6 == s[r].Status) {
                                        e.isJack = !0;
                                        break
                                    }
                                break
                            }
                        if (i)
                            if (d) {
                                a = 0;
                                for (var h = function(t) {
                                    d[t].AccountId === e.accountId && (n = !0,
                                    o += d[t].TotalPrize,
                                    setTimeout(function() {
                                        d[t].TotalPrize > d[t].TotalBet && e.MoneyDealerToBet(d[t].TotalPrize),
                                        e.player.Balance += d[t].TotalPrize,
                                        e.UpdateMoney(d[t].TotalPrize),
                                        e.UpdateBalance(e.player.Balance),
                                        setTimeout(function() {
                                            e.MoneyToOwner(d[t].TotalPrize)
                                        }, 500)
                                    }, 200 * a),
                                    a++)
                                }, l = 0; l < d.length; l++)
                                    h(l);
                                n || e.isJack || e.MoneyToDealer(),
                                e.isJack || e.Result(o, e.moneyBet)
                            } else
                                e.isJack || (e.MoneyToDealer(),
                                e.Result(0, e.moneyBet))
                    }
                }, u = this, e = 0; e < this.players.length; e++)
                    t(e);
                var i = this;
                this.timerOut = setTimeout(function() {
                    return i.ResetGame()
                }, 2800)
            }
            ,
            t.prototype.Stop = function() {
                this.hub.ExitGame(),
                this.hub.connection.stop()
            }
            ,
            t.prototype.Delete = function() {
                a.Util.ClearTimeOut(this.timerOut),
                a.Util.ClearTimeOut(this.timerStatus),
                a.Util.ClearTimeOut(this.timerTip),
                window.removeEventListener("resize", this.resizeFunc);
                for (var t = TweenMax.getAllTweens(), e = 0; e < t.length; e++)
                    "blackjack" === t[e].data && t[e].kill();
                try {
                    this.application.view.remove(),
                    this.application.destroy(!0),
                    this.target.html("")
                } catch (t) {}
            }
            ,
            t
        }();
        e.games = r
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        );
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var a = function(e) {
            function t() {
                var t = e.call(this) || this;
                return t.assets = [{
                    id: "",
                    src: "/assets/images/common/bai.json"
                }, {
                    id: "",
                    src: "/assets/images/common/common-casino.json"
                }, {
                    id: "",
                    src: "/assets/images/common/dealer.json"
                }, {
                    id: "",
                    src: "/assets/images/blackjack/blackjack.json"
                }, {
                    id: "blackjack.win",
                    src: "/assets/images/common/win.png"
                }],
                t.add(t.assets),
                t
            }
            return o(t, e),
            t
        }(i(0).Assets);
        e.default = a
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        );
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var a = i(0)
          , s = i(5)
          , r = function(n) {
            function t(t, e, i) {
                return n.call(this, t, e, i) || this
            }
            return o(t, n),
            t.prototype.Connect = function(t, e) {
                var i = this;
                this.connection = (new s.HubConnectionBuilder).withUrl(this.url, {
                    accessTokenFactory: function() {
                        return i.token
                    },
                    skipNegotiation: !0,
                    transport: s.HttpTransportType.WebSockets
                }).build(),
                this.connection.serverTimeoutInMilliseconds = 1e5,
                this.connection.start().then(function() {
                    console.log("connected"),
                    i.EnterGame(t),
                    i.Listen(),
                    "function" == typeof e && e()
                }).catch(function(t) {
                    return console.error(t)
                })
            }
            ,
            t.prototype.Listen = function() {
                n.prototype.Listen.call(this);
                var e = this;
                e.connection.on("roomData", function(t) {
                    e.game && e.game.JoinGame(t)
                }),
                e.connection.on("joinRoom", function(t) {
                    console.log("joinRoom", t),
                    e.game && e.game.PlayerJoin(t.r)
                }),
                e.connection.on("leaveRoom", function(t) {
                    console.log("leaveRoom", t),
                    e.game && e.game.PlayerLeave(t.r)
                }),
                e.connection.on("registerLeavingRoom", function(t) {
                    console.log("registerLeavingRoom", t),
                    e.game && e.game.RegisterLeave(t.r)
                }),
                e.connection.on("connectionChanged", function(t) {
                    console.log("connectionChanged", t),
                    e.game && e.game.UpdateConnection(t.r)
                }),
                e.connection.on("UpdateHand", function(t) {
                    console.log("updateHand", t),
                    e.game && e.game.UpdateHand(t)
                }),
                e.connection.on("rejectBetting", function(t) {
                    console.log("rejectBetting", t)
                }),
                e.connection.on("playerBet", function(t) {
                    console.log("playerBet", t);
                    t.r;
                    e.game && e.game.Bet(t.r)
                }),
                e.connection.on("clearBetting", function(t) {
                    console.log("clearBetting", t),
                    e.game && e.game.ClearBet(t.r)
                }),
                e.connection.on("confirmBetting", function(t) {
                    console.log("confirmBetting", t),
                    e.game && e.game.ConfirmBet(t.r)
                }),
                e.connection.on("playerOtherDevice", function(t) {
                    console.log("playerOtherDevice", t),
                    e.game && e.game.PlayerOtherDevice(t.r)
                }),
                e.connection.on("playerAction", function(t) {
                    console.log("playerAction", t),
                    e.game && e.game.PlayerAction(t.r)
                }),
                e.connection.on("updatePrizes", function(t) {
                    console.log("updatePrizes", t),
                    e.game && e.game.UpdatePrizes(t)
                })
            }
            ,
            t.prototype.EnterGame = function(t) {
                var e = this;
                this.connection.invoke("EnterGame", t).then(function(t) {
                    if (console.log("EnterGame", t),
                    t.c < 0)
                        return -10004 === t.c && (t.c = 10014),
                        App.showPopupMessage({
                            content: Message.GetMessage((10014 === t.c ? "me" : "ca") + t.c),
                            textDone: "OK"
                        }),
                        void App.handleBack();
                    if (1 === t.c) {
                        if (!e.game)
                            return;
                        e.game.EnterGame(t)
                    }
                })
            }
            ,
            t.prototype.ExitGame = function() {
                this.connection.invoke("ExitGame").then(function(t) {
                    console.log("ExitGame", t)
                })
            }
            ,
            t.prototype.EnterRoom = function(t, e) {
                var i = this;
                this.connection.invoke("EnterRoom", t, e).then(function(t) {
                    console.log("EnterRoom", t),
                    i.game && i.game.EnterGame(t)
                })
            }
            ,
            t.prototype.ExitRoom = function() {
                this.connection.invoke("ExitRoom").then(function(t) {
                    console.log("ExitRoom", t)
                })
            }
            ,
            t.prototype.ClearBetting = function() {
                this.connection.invoke("ClearBetting").then(function(t) {
                    console.log("ClearBetting", t)
                })
            }
            ,
            t.prototype.FinishBetting = function() {
                this.connection.invoke("FinishBetting").then(function(t) {
                    console.log("FinishBetting", t)
                })
            }
            ,
            t.prototype.GetGameHistory = function(t) {
                this.connection.invoke("GetGameHistory", t).then(function(t) {
                    console.log("GetGameHistory", t)
                })
            }
            ,
            t.prototype.Bet = function(t, e) {
                this.connection.invoke("Bet", t, e).then(function(t) {
                    console.log("Bet", t)
                })
            }
            ,
            t
        }(a.Hub);
        e.default = r
    }
    , function(t, e) {
        t.exports = n
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        );
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var h = i(0)
          , a = function(i) {
            function t(t) {
                var e = i.call(this, t) || this;
                return e.moneyBet = 0,
                e.iSplit = 0,
                e.arrPoint = [0, 0, 0, 0],
                e.arrPointTxt = [null, null, null, null],
                e.currentSum = 0,
                e.isJack = !1,
                e.icReady = new Sprite(TextureCache.ready),
                e.icReady.anchor.set(.5),
                e.icReady.position.set(e.avatar.x, e.avatar.y - e.avatar.height / 2),
                e.icReady.visible = !1,
                e.addChild(e.icReady),
                e.Reset(),
                e
            }
            return o(t, i),
            t.prototype.CreateHand = function(t) {
                for (var e = 0; e < t.length; e++) {
                    var i = new Sprite(TextureCache["blackjack_cua_dat_" + this.game.roomModel.Id + "_active_3"]);
                    i.anchor.set(.5),
                    i.position.set(this.game.cardsPos[this.pos][t[e].Index].x - 14, this.game.cardsPos[this.pos][t[e].Index].y - i.height / 2 - 26.5),
                    i.visible = !1;
                    var n = new Sprite(TextureCache.blackjack_ketqua_2);
                    n.anchor.set(.5),
                    n.position.set(this.game.cardsPos[this.pos][t[e].Index].x + 20, this.game.cardsPos[this.pos][t[e].Index].y - n.height / 2 - 23.5),
                    this.cardContainer.getChildByName("hand-" + e).addChild(i, n);
                    var o = new PIXI.Text("0",{
                        fontFamily: this.game.fontFace,
                        fontSize: 10,
                        fill: "white"
                    });
                    o.anchor.set(.5),
                    n.addChild(o),
                    (this.arrPointTxt[e] = n).visible = !1;
                    for (var a = 0; a < t[e].Cards.length; a++) {
                        var s = new Sprite(TextureCache["joker.png"]);
                        s.anchor.set(.5),
                        s.scale.set(.01),
                        s.rotation = 2 * Math.PI,
                        s.position.set(this.game.txtNumb.x, this.game.txtNumb.y),
                        s.value = t[e].Cards[a],
                        s.posX = this.game.cardsPos[this.pos][t[e].Index].x + 20 * a,
                        s.posY = this.game.cardsPos[this.pos][t[e].Index].y,
                        s.s = .65,
                        this.cardContainer.getChildByName("hand-" + e).addChild(s),
                        this.handCards[e].push(s)
                    }
                }
            }
            ,
            t.prototype.ReHand = function(t) {
                for (var e = 0; e < t.length; e++)
                    if (t[e].Cards && 0 < t[e].Cards.length) {
                        var i = new Sprite(TextureCache["blackjack_cua_dat_" + this.game.roomModel.Id + "_active_3"]);
                        i.anchor.set(.5),
                        i.position.set(this.game.cardsPos[this.pos][t[e].Index].x - 14, this.game.cardsPos[this.pos][t[e].Index].y - i.height / 2 - 26.5),
                        i.visible = !1;
                        var n = new Sprite(TextureCache.blackjack_ketqua_2);
                        n.anchor.set(.5),
                        n.position.set(this.game.cardsPos[this.pos][t[e].Index].x + 20, this.game.cardsPos[this.pos][t[e].Index].y - n.height / 2 - 23.5),
                        this.cardContainer.getChildByName("hand-" + e).addChild(i, n);
                        var o = new PIXI.Text("0",{
                            fontFamily: this.game.fontFace,
                            fontSize: 10,
                            fill: "white"
                        });
                        o.anchor.set(.5),
                        n.addChild(o),
                        (this.arrPointTxt[e] = n).visible = !1;
                        for (var a = 0; a < t[e].Cards.length; a++) {
                            var s = new Sprite(TextureCache[this.game.cardsMap[t[e].Cards[a]]]);
                            s.anchor.set(.5),
                            s.scale.set(.65),
                            s.rotation = 0,
                            s.position.set(this.game.cardsPos[this.pos][t[e].Index].x + 20 * a, this.game.cardsPos[this.pos][t[e].Index].y),
                            s.value = t[e].Cards[a],
                            s.posX = this.game.cardsPos[this.pos][t[e].Index].x + 20 * a,
                            s.posY = this.game.txtNumb.y,
                            this.game.cardsPos[this.pos][t[e].Index].y,
                            s.s = .65,
                            this.cardContainer.getChildByName("hand-" + e).addChild(s),
                            this.handCards[e].push(s)
                        }
                    }
            }
            ,
            t.prototype.ShowPoint = function(t) {
                this.arrPointTxt[t].visible = !0
            }
            ,
            t.prototype.UpdatePoint = function(t, e, i) {
                var n = "";
                n = 1 < t.length ? t[0] + "/" + t[1] : t[0];
                try {
                    this.arrPointTxt[e].children[0].text = n,
                    this.arrPointTxt[e].visible = !0,
                    this.currentSum = i
                } catch (t) {}
            }
            ,
            t.prototype.RemoveChip = function() {
                if (this.chipContainer)
                    try {
                        this.chipContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                this.chipContainer = new Container,
                this.game.chipContainer.addChild(this.chipContainer)
            }
            ,
            t.prototype.RemoveMoney = function() {
                if (this.moneyContainer)
                    try {
                        this.moneyContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                if (this.moneyContainer = new Container,
                this.betContainer)
                    try {
                        this.betContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                this.betContainer = new Container,
                this.game.moneyContainer.addChild(this.betContainer, this.moneyContainer)
            }
            ,
            t.prototype.RemoveResult = function() {
                if (this.resultContainer)
                    try {
                        this.resultContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                this.resultContainer = new Container,
                this.game.resultContainer.addChild(this.resultContainer)
            }
            ,
            t.prototype.RemoveCard = function() {
                if (this.cardContainer)
                    try {
                        this.cardContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                this.cardContainer = new Container;
                for (var t = 3; 0 <= t; t--) {
                    var e = new Container;
                    e.name = "hand-" + t,
                    this.cardContainer.addChild(e)
                }
                this.game.cardContainer.addChild(this.cardContainer)
            }
            ,
            t.prototype.Bet = function(t, e, i) {
                var n = void 0 !== t.amount ? t.amount : t.Amount
                  , o = t.balance || 0 === t.balance ? t.balance : t.Balance || 0 === t.Balance ? t.Balance : -1
                  , a = new Sprite(TextureCache[this.game.GetTextureMoney(n)]);
                a.anchor.set(.5),
                a.scale.set(.5),
                a.position.set(this.avatar.x, this.avatar.y),
                this.chipContainer.addChild(a),
                TweenMax.to(a, .5, {
                    data: "blackjack",
                    x: this.game.betPos[this.pos].x,
                    y: this.game.betPos[this.pos].y
                });
                var s = new PIXI.Text("-" + h.Util.ParseMoney(t.amount ? t.amount : t.Amount),{
                    fontFamily: this.game.fontFaceBold,
                    fontSize: 14,
                    fill: "yellow"
                });
                s.anchor.set(.5),
                s.position.set(this.avatar.x, this.avatar.y),
                this.betContainer.addChild(s),
                TweenMax.to(s, .5, {
                    data: "blackjack",
                    y: s.y - 80
                });
                var r = this;
                0 <= o && (this.UpdateBalance(o),
                this.player.Balance = o),
                setTimeout(function() {
                    a.visible = !1,
                    s.visible = !1,
                    r.CalChip()
                }, 600),
                this.moneyBet += n,
                e || (this.game.moneyBet[this.pos] = this.moneyBet),
                this.UpdateMoneyBet(this.moneyBet),
                0 === this.pos && 1 === this.game.roomModel.Session.Phrase && (this.game.EnableButton(this.game.btnReady),
                this.game.EnableButton(this.game.btnCancel),
                this.game.DisableButton(this.game.btnReBet),
                this.game.DisableButton(this.game.btnX2))
            }
            ,
            t.prototype.UpdateMoneyBet = function(t) {
                this.game.arrMoney[this.pos].children[0].text = h.Util.MoneyHelper(t),
                this.game.arrMoney[this.pos].visible = 0 < t
            }
            ,
            t.prototype.CalChip = function() {
                for (var t = 0; t < this.moneyContainer.children.length; t++)
                    this.moneyContainer.children[t].visible = !1;
                var e = new Sprite(TextureCache[this.game.GetTextureMoney(this.moneyBet)]);
                e.anchor.set(.5),
                e.scale.set(.5),
                e.position.set(this.game.betPos[this.pos].x, this.game.betPos[this.pos].y),
                this.moneyContainer.addChild(e)
            }
            ,
            t.prototype.UndoChip = function(t) {
                for (var e = 0; e < 10; e++) {
                    var i = new Sprite(TextureCache[this.game.GetTextureMoney(t)]);
                    i.anchor.set(.5),
                    i.scale.set(.5),
                    i.position.set(this.game.betPos[this.pos].x, this.game.betPos[this.pos].y),
                    this.chipContainer.addChild(i),
                    TweenMax.to(i, .5, {
                        x: this.avatar.x,
                        y: this.avatar.y,
                        delay: .05 * e,
                        alpha: 0
                    })
                }
            }
            ,
            t.prototype.MoneyToDealer = function() {
                for (var t = 0; t < this.moneyContainer.children.length; t++)
                    this.moneyContainer.children[t].visible = !1;
                this.ChipToDealer(this.moneyBet)
            }
            ,
            t.prototype.ChipToDealer = function(t) {
                try {
                    for (var e = 0; e < 30; e++) {
                        var i = new Sprite(TextureCache[this.game.GetTextureMoney(t)]);
                        i.anchor.set(.5),
                        i.scale.set(.5),
                        i.position.set(this.game.betPos[this.pos].x, this.game.betPos[this.pos].y),
                        this.chipContainer.addChild(i),
                        TweenMax.to(i, 1, {
                            data: "blackjack",
                            x: this.game.dealer.x,
                            y: this.game.dealer.y,
                            delay: .05 * e,
                            alpha: 0
                        })
                    }
                } catch (t) {}
            }
            ,
            t.prototype.MoneyToOwner = function(t) {
                try {
                    for (var e = 0; e < 20; e++) {
                        var i = new Sprite(TextureCache[this.game.GetTextureMoney(t)]);
                        i.anchor.set(.5),
                        i.scale.set(.5),
                        i.position.set(this.game.betPos[this.pos].x, this.game.betPos[this.pos].y),
                        this.chipContainer.addChild(i),
                        TweenMax.to(i, 1, {
                            data: "blackjack",
                            x: this.avatar.x,
                            y: this.avatar.y,
                            delay: .05 * e,
                            alpha: 0
                        })
                    }
                } catch (t) {}
                for (e = 0; e < this.moneyContainer.children.length; e++)
                    this.moneyContainer.children[e].visible = !1
            }
            ,
            t.prototype.MoneyDealerToBet = function(t) {
                try {
                    for (var e = 0; e < 20; e++) {
                        var i = new Sprite(TextureCache[this.game.GetTextureMoney(t)]);
                        i.anchor.set(.5),
                        i.scale.set(.5),
                        i.position.set(this.game.dealer.x, this.game.dealer.y),
                        this.chipContainer.addChild(i),
                        TweenMax.to(i, 1, {
                            data: "blackjack",
                            x: this.game.betPos[this.pos].x,
                            y: this.game.betPos[this.pos].y,
                            delay: .05 * e,
                            alpha: 0
                        })
                    }
                } catch (t) {}
            }
            ,
            t.prototype.UpdateMoney = function(t) {
                var e = new PIXI.Text((0 < t ? "+" : "") + h.Util.ParseMoney(t),{
                    fontFamily: this.game.fontFaceBold,
                    fontSize: 14,
                    fill: "yellow"
                });
                e.anchor.set(.5),
                e.position.set(this.avatar.x, this.avatar.y),
                this.game.effectContainer.addChild(e),
                TweenMax.to(e, 1.8, {
                    data: "blackjack",
                    y: e.y - 80
                }),
                setTimeout(function() {
                    e.visible = !1
                }, 1900)
            }
            ,
            t.prototype.ShowWin = function(t, e) {
                if (t) {
                    var i = new Sprite(TextureCache[(e ? "thang-" : "thua-") + this.game.lang]);
                    i.anchor.set(.5),
                    i.position.set(this.box.x, this.box.y),
                    this.moneyContainer.addChild(i),
                    TweenMax.to(i.scale, .3, {
                        data: "blackjack",
                        x: 1.2,
                        y: 1.2,
                        yoyo: !0,
                        repeat: 7
                    })
                }
            }
            ,
            t.prototype.Reset = function() {
                this.RemoveChip(),
                this.RemoveMoney(),
                this.RemoveResult(),
                this.RemoveCard(),
                this.handCards = [[], [], [], []],
                this.arrPoint = [0, 0, 0, 0],
                this.arrPointTxt = [null, null, null, null],
                this.moneyBet = 0,
                this.iSplit = 0,
                this.isJack = !1
            }
            ,
            t.prototype.AddCard = function(t) {
                var e = t.Cards
                  , i = new Sprite(TextureCache["joker.png"]);
                i.anchor.set(.5),
                i.scale.set(.01),
                i.rotation = 2 * Math.PI,
                i.position.set(this.game.txtNumb.x, this.game.txtNumb.y),
                i.value = e[e.length - 1],
                i.posX = this.game.cardsPos[this.pos][t.Index].x + 20 * (e.length - 1),
                i.posY = this.game.cardsPos[this.pos][t.Index].y,
                i.s = .65,
                this.handCards[t.Index].push(i),
                this.cardContainer.getChildByName("hand-" + t.Index).addChild(i),
                this.game.Draw(i, 0);
                var n = this;
                this.game.timeOut = setTimeout(function() {
                    n.UpdatePoint(t.Sum, t.Index, t.BestSum),
                    n.CheckHand(t)
                }, 800)
            }
            ,
            t.prototype.Split = function(t) {
                var e = t.hand.Index;
                this.handCards[e + 1].push(this.handCards[e][1]),
                this.handCards[e].slice(1, 1);
                var i = new Sprite(TextureCache["blackjack_cua_dat_" + this.game.roomModel.Id + "_active_3"]);
                i.anchor.set(.5),
                i.position.set(this.game.cardsPos[this.pos][e + 1].x - 14, this.game.cardsPos[this.pos][e + 1].y - i.height / 2 - 26.5),
                i.visible = !1;
                var n = new Sprite(TextureCache.blackjack_ketqua_2);
                n.anchor.set(.5),
                n.position.set(this.game.cardsPos[this.pos][e + 1].x + 20, this.game.cardsPos[this.pos][e + 1].y - n.height / 2 - 23.5),
                this.cardContainer.getChildByName("hand-" + (e + 1)).addChild(i, n);
                var o = "";
                o = t.splittedhand ? 1 < t.splittedhand.Sum.length ? t.splittedhand.Sum[0] + "/" + t.splittedhand.Sum[1] : t.splittedhand.BestSum.toString() : 1 < t.hand.Sum.length ? t.hand.Sum[0] + "/" + t.hand.Sum[1] : (this.currentSum - t.hand.BestSum).toString();
                var a = new PIXI.Text(o,{
                    fontFamily: this.game.fontFace,
                    fontSize: 10,
                    fill: "white"
                });
                a.anchor.set(.5),
                n.addChild(a),
                (this.arrPointTxt[e + 1] = n).visible = !1,
                this.cardContainer.getChildByName("hand-" + (e + 1)).addChild(this.handCards[e + 1][0]);
                var s = this;
                TweenMax.to(this.handCards[e + 1][0], .5, {
                    data: "blackjack",
                    x: this.game.cardsPos[this.pos][e + 1].x,
                    y: this.game.cardsPos[this.pos][e + 1].y
                }),
                this.game.timeOut = setTimeout(function() {
                    t.splittedhand ? (s.AddCard(t.hand),
                    setTimeout(function() {
                        s.AddCard(t.splittedhand)
                    }, 300)) : (s.UpdatePoint(t.hand.Sum, e, t.hand.BestSum),
                    n.visible = !0)
                }, 600)
            }
            ,
            t.prototype.Double = function(t) {}
            ,
            t.prototype.CheckHand = function(t) {
                var e = this;
                if (0 !== t.Status && (TweenMax.to(this.cardContainer.getChildByName("hand-" + t.Index).scale, .3, {
                    x: 1,
                    y: 1,
                    data: "blackjack"
                }),
                TweenMax.to(this.cardContainer.getChildByName("hand-" + t.Index), .3, {
                    x: 0,
                    y: 0,
                    data: "blackjack"
                }),
                1 === t.Status)) {
                    for (var i = this.cardContainer.getChildByName("hand-" + t.Index), n = 0; n < i.children.length; n++)
                        "undefined" !== i.children[n].value && (i.children[n].tint = 5592405);
                    var o = new Sprite(TextureCache.blackjack_ketqua_2);
                    o.anchor.set(.5),
                    o.position.set(e.game.cardsPos[e.pos][t.Index].x - 46, e.game.cardsPos[e.pos][t.Index].y - 20);
                    var a = new PIXI.Text(Message.GetMessage("ca221"),{
                        fontFamily: e.game.fontFace,
                        fontSize: 10,
                        fill: "white"
                    });
                    a.anchor.set(.5),
                    o.addChild(a),
                    i.addChild(o),
                    this.game.StopBlink(),
                    this.game.arrStatus[this.pos].texture = TextureCache["blackjack_sap_" + this.game.lang]
                }
            }
            ,
            t.prototype.Result = function(t, e) {
                var i;
                i = e < t ? "thang-" + this.game.lang : t === e ? "blackjack_hoa_" + this.game.lang : "thua-" + this.game.lang;
                var n = new Sprite(TextureCache[i]);
                n.anchor.set(.5),
                n.position.set(this.game.betPos[this.pos].x, this.game.betPos[this.pos].y - 38.5),
                this.game.cardContainer.addChild(n)
            }
            ,
            t.prototype.CheckJack = function(t) {
                if (6 === t) {
                    var e = this.game.CreateJack(!1);
                    this.isJack = !0,
                    e.position.set(this.game.cardsPos[this.pos][0].x, this.game.cardsPos[this.pos][0].y)
                }
            }
            ,
            t
        }(h.PlayerC);
        e.default = a
    }
    , function(t, e) {
        t.exports = o
    }
    , function(t, e) {
        t.exports = a
    }
    ])
});
