!function(t, e) {
    "object" == typeof exports && "object" == typeof module ? module.exports = e(require("libs"), require("signalR"), require("pixi-filters"), require("pixi-sound"), require("WebFont")) : "function" == typeof define && define.amd ? define("poker", ["libs", "signalR", "pixi-filters", "pixi-sound", "WebFont"], e) : "object" == typeof exports ? exports.poker = e(require("libs"), require("signalR"), require("pixi-filters"), require("pixi-sound"), require("WebFont")) : t.poker = e(t.libs, t.signalR, t["pixi-filters"], t["pixi-sound"], t.WebFont)
}(window, function(i, n, o, s, a) {
    return l = {},
    r.m = h = [function(t, e) {
        t.exports = i
    }
    , function(t, e) {
        t.exports = n
    }
    , function(t, e) {
        t.exports = o
    }
    , function(t, e) {
        t.exports = s
    }
    , function(t, e) {
        t.exports = a
    }
    , function(t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
        e.game = void 0;
        var n = i(6)
          , o = i(4)
          , s = (a.prototype.delete = function() {
            this.game.clear()
        }
        ,
        a.prototype.load = function(t) {
            console.log("load", t),
            this.game.load(t)
        }
        ,
        a.prototype.join = function(t, e, i, n, o) {
            this.game.joinTour(t, e, i, n, o)
        }
        ,
        a.prototype.lobby = function(t) {
            console.log("EnterLobby", t)
        }
        ,
        a);
        function a(t) {
            o.load({
                custom: {
                    families: ["Roboto-Black", "Roboto-Bold", "Roboto-Medium", "Roboto-Regular", "Roboto-Light", "RobotoCondensed-Bold", "RobotoCondensed-Italic", "RobotoCondensed-Light", "RobotoCondensed-Regular", "UTM American Sans", "UTM Swiss Condensed", "UTM Swiss CondensedBold"]
                },
                fontactive: function() {}
            }),
            this.game = new n.games(t)
        }
        e.game = s
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        );
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
        e.games = void 0;
        var s = i(7)
          , a = i(8)
          , p = i(0)
          , r = i(9);
        i(2),
        i(3);
        var h, b = i(10), l = i(11), c = (h = b.variable,
        o(u, h),
        u.prototype.load = function(t) {
            var e = this;
            e.assets.load(null, function() {
                e.isLoad = !0,
                t && t()
            })
        }
        ,
        u.prototype.init = function() {
            PIXI.utils.skipHello(),
            this.filter = new PIXI.filters.ColorMatrixFilter,
            this.filter.matrix = [1, 0, 0, .1, 0, 0, 1, 0, .1, 0, 0, 0, 1, .1, 0, 0, 0, 0, 1, 0],
            this.filterGray = new PIXI.filters.ColorMatrixFilter,
            this.filterGray.matrix = [.3, .59, .11, 0, 0, .3, .59, .11, 0, 0, .3, .59, .11, 0, 0, 0, 0, 0, 1, 0],
            this.size = [window.innerWidth, window.innerHeight];
            var t = document.getElementById(this.target);
            this.application = new PIXI.Application(this.size[0],this.size[1],{
                antialias: !0,
                transparent: !0,
                resolution: 1,
                autoResize: !0,
                view: t
            }),
            this.initFrames(),
            this.initContainer(),
            this.initTable(),
            this.initChipBg(),
            this.initButton(),
            this.resetTab(),
            this.resize(this),
            this.bgSound = this.assets.loader.resources.sound_bg.sound,
            this.bgSound.volume = .2,
            this.bgSound.loop = !0;
            var e = this;
            this.application.ticker.add(function() {
                return e.update(e)
            }),
            window.addEventListener("resize", function() {
                return e.resize(e)
            }),
            this.ready = !0
        }
        ,
        u.prototype.resetTab = function() {
            window.addEventListener("blur", function() {
                TweenLite.lagSmoothing(0)
            }, !1),
            window.addEventListener("focus", function() {
                TweenLite.lagSmoothing(1e3, 16)
            }, !1)
        }
        ,
        u.prototype.update = function(t) {
            t.timer && t.timer.tick()
        }
        ,
        u.prototype.resize = function(t) {
            try {
                var e;
                t.size = [$(window).width(), $(window).height()],
                t.application.renderer.resize($(window).width(), $(window).height()),
                t.size[0] < 1280 || t.size[1] < 720 ? (e = Math.min(t.size[0] / 1280, t.size[1] / 720),
                t.bgGame.scale.set(e)) : t.bgGame.scale.set(1),
                t.bgGame.anchor.set(.5),
                t.bgGame.position.set(t.size[0] / 2, t.size[1] / 2)
            } catch (t) {}
        }
        ,
        u.prototype.initHub = function() {
            this.hub = new s.default(this.token,this.hubUrl,this)
        }
        ,
        u.prototype.joinTour = function(t, e, i, n, o) {
            this.tourId = e,
            this.roomId = i,
            this.hubUrl = window.Config.Tour[t].hub[i - 1],
            this.music = n,
            this.sound = o,
            this.initHub()
        }
        ,
        u.prototype.joinRoom = function(t) {
            if (t) {
                this.roomModel = t,
                this.getCurrentPlayer(),
                this.ready || this.init(),
                this.deleteWaitScreen();
                try {
                    this.clearForNewGame()
                } catch (t) {}
                if (this.renderPlayers(t.Players),
                this.inVisibleButtons(),
                this.music && !this.bgSound.isPlaying)
                    try {
                        this.bgSound.play()
                    } catch (t) {}
                this.roomModel.IsStartGame && this.checkGame()
            }
        }
        ,
        u.prototype.joinGame = function(t, e) {
            t && e ? (this.ready || this.init(),
            this.initWaitScreen(t, e)) : window.location.hash = "#/tournament/poker/"
        }
        ,
        u.prototype.checkGame = function() {
            var a;
            this.roomModel.IsStartGame ? (a = this,
            setTimeout(function() {
                var t = a.roomModel
                  , e = t.Phrase
                  , i = t.CommunityCards
                  , n = t.CurrentState
                  , o = n.Account
                  , s = n.Actions;
                e >= b.EPokerPhrases.Showdown ? a.onWaiting() : (a.updateChip(),
                a.updatePot(a.roomModel.GamePot),
                e > b.EPokerPhrases.PreFlop && a.dealPreFlop(!0),
                a.renderCardInJoin(i, e),
                a.roomModel && a.roomModel._betsInRound && 0 < a.roomModel._betsInRound.length && a.changeDealer(a.roomModel.Dealer),
                a.checkGamePhrase(),
                e < 6 && $.each(a.roomModel.Players, function() {
                    var t = a.getPlayerByAccountId(this.AccountID);
                    if (t && (this.BetInRound && t.updateBetting(this.BetInRound),
                    this.IsFold))
                        try {
                            t.fold(),
                            this.foldCard(this.AccountID)
                        } catch (t) {}
                }),
                a.startTimer(o, s, 20))
            }, 300)) : this.showNotify(Message.GetMessage("me6"))
        }
        ,
        u.prototype.dealerDown = function(t) {
            var e = this;
            e.stop(),
            e.interactive = !1,
            e.buttonMode = !1,
            e.loop = !1,
            e.textures = t.framesDealerClick,
            e.gotoAndPlay(0),
            e.onComplete = function() {
                t.dealerNormal(t)
            }
        }
        ,
        u.prototype.dealerNormal = function(t) {
            var e = this;
            e.stop(),
            e.interactive = !0,
            e.buttonMode = !0,
            e.loop = !0,
            e.textures = t.framesDealerNormal,
            e.gotoAndPlay(0)
        }
        ,
        u.prototype.getPlayerByAccountId = function(t) {
            for (var e, i = 0; i < this.players.length; i++)
                if (this.players[i] && this.players[i].accountId === t) {
                    e = this.players[i];
                    break
                }
            return e
        }
        ,
        u.prototype.getPlayerByPosition = function(t) {
            for (var e, i = 0; i < this.players.length; i++)
                if (this.players[i] && this.players[i].pos === t) {
                    e = this.players[i];
                    break
                }
            return e
        }
        ,
        u.prototype.getCurrentPlayer = function() {
            var t = App.account.portalID
              , e = App.account.accountID;
            if (this.roomModel && this.roomModel.Players)
                for (var i in this.roomModel.Players)
                    this.roomModel.Players[i].AccountID === e + ":" + t && (this.currentPlayer = this.roomModel.Players[i])
        }
        ,
        u.prototype.showNotify = function(t, e) {
            var i, n = this;
            this.txtNotify.scale.set(.01),
            this.txtNotify.visible = !0,
            this.txtNotify.children[0].text = t,
            TweenMax.to(this.txtNotify.scale, .4, {
                data: "poker-tournament",
                x: 1,
                y: 1
            }),
            e && (i = this,
            setTimeout(function() {
                TweenMax.to(n.txtNotify.scale, .2, {
                    data: "poker-tournament",
                    x: .01,
                    y: .01
                }),
                setTimeout(function() {
                    i.txtNotify.visible = !1
                }, 300)
            }, e))
        }
        ,
        u.prototype.hideNotify = function() {
            this.txtNotify.visible = !1
        }
        ,
        u.prototype.initTable = function() {
            this.waitSound = this.assets.loader.resources.sound_count_down.sound,
            this.waitSound.loop = !0,
            this.bgGame = new PIXI.Sprite(this.assets.loader.resources.assetsTourPoker.textures["background.png"]);
            var t = new PIXI.Sprite(this.assets.loader.resources.assetsTourPoker.textures["table.png"]);
            t.anchor.set(.5),
            this.btnBack = new PIXI.Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-back.png"]),
            this.btnBack.anchor.set(.5),
            this.btnBack.position.set(-600, -320),
            this.btnBack.interactive = !0,
            this.btnBack.buttonMode = !0,
            this.btnBack.on("pointerover", this.btnTintOver.bind(this.btnBack, this)).on("pointerout", this.btnTintOut.bind(this.btnBack, this)).on("pointerdown", this.btnBackDown.bind(this.btnBack, this)),
            this.btnInfo = new PIXI.Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-info.png"]),
            this.btnInfo.anchor.set(.5),
            this.btnInfo.position.set(600, -320),
            this.btnInfo.interactive = !0,
            this.btnInfo.buttonMode = !0,
            this.btnInfo.on("pointerover", this.btnTintOver.bind(this.btnInfo, this)).on("pointerout", this.btnTintOut.bind(this.btnInfo, this)).on("pointerdown", this.btnInfoDown.bind(this.btnInfo, this)),
            this.btnTable = new PIXI.Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-bxh.png"]),
            this.btnTable.anchor.set(.5),
            this.btnTable.position.set(525, -320),
            this.btnTable.interactive = !0,
            this.btnTable.buttonMode = !0,
            this.btnTable.on("pointerover", this.btnTintOver.bind(this.btnTable, this)).on("pointerout", this.btnTintOut.bind(this.btnTable, this)).on("pointerdown", this.btnTableDown.bind(this.btnTable, this)),
            this.dealer = new AnimatedSprite(this.framesDealerNormal),
            this.dealer.anchor.set(.5),
            this.dealer.position.set(0, -223),
            this.dealer.animationSpeed = .2,
            this.dealer.interactive = !0,
            this.dealer.buttonMode = !0,
            this.dealer.on("pointerdown", this.dealerDown.bind(this.dealer, this)),
            this.dealer.play();
            var e = new PIXI.Text("POKER TOURNAMENT",{
                fontFamily: this.fontFaceBold,
                fontSize: 60,
                fill: "#000"
            });
            e.alpha = .1,
            e.anchor.set(.5),
            e.y = -10;
            var i = new PIXI.Text(p.Util.ParseMoney(window.Config.Tour.poker.value[this.roomId - 1]),{
                fontFamily: this.fontFaceBold,
                fontSize: 60,
                fill: "#000"
            });
            i.alpha = .1,
            i.anchor.set(.5),
            i.y = 50,
            t.addChild(this.dealer, e, i, this.btnBack, this.btnInfo, this.btnTable);
            for (var n = 0; n < this.playerPos.length; n++) {
                var o = new Sprite(this.assets.loader.resources.commonTourPoker.textures["ic-ad-user.png"]);
                o.anchor.set(.5),
                o.position.set(this.playerPos[n][0], this.playerPos[n][1]),
                t.addChild(o)
            }
            this.txtNotify = new Sprite(this.assets.loader.resources.commonTourPoker.textures["big-bg-notify.png"]),
            this.txtNotify.anchor.set(.5),
            this.txtNotify.position.set(0, -72),
            this.txtNotify.addChild(new PIXI.Text(Message.GetMessage("me7"),{
                fontFamily: this.fontFaceBold,
                fontSize: 18,
                fill: "white"
            })),
            this.txtNotify.children[0].anchor.set(.5),
            this.txtNotify.visible = !1,
            this.txtResult = new Sprite(this.assets.loader.resources.commonTourPoker.textures["big-bg-notify.png"]),
            this.txtResult.anchor.set(.5),
            this.txtResult.position.set(0, 65),
            this.txtResult.addChild(new PIXI.Text("",{
                fontFamily: this.fontFaceBold,
                fontSize: 30,
                fill: "white"
            })),
            this.txtResult.children[0].anchor.set(.5),
            this.txtResult.visible = !1,
            this.txtStatus = new Sprite(this.assets.loader.resources.commonTourPoker.textures["small-bg-notify.png"]),
            this.txtStatus.anchor.set(.5),
            this.txtStatus.position.set(0, 102),
            this.txtStatus.addChild(new PIXI.Text(Message.GetMessage("me7"),{
                fontFamily: this.fontFaceBold,
                fontSize: 12,
                fill: "white"
            })),
            this.txtStatus.children[0].anchor.set(.5),
            this.txtStatus.visible = !1,
            this.bgGame.addChild(t, this.infoContainer, this.playerContainer, this.divideContainer, this.txtNotify, this.txtStatus, this.cardContainer, this.messageContainer, this.buttonContainer, this.resultContainer, this.chipContainer, this.txtResult),
            this.icDeal = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["icon-dealer.png"]),
            this.icDeal.anchor.set(.5),
            this.icDeal.position.set(this.dealer.x, this.dealer.y),
            this.icDeal.visible = !1,
            this.bgGame.addChild(this.icDeal),
            this.frameContainer = new Container,
            this.bgGame.addChild(this.frameContainer),
            this.application.stage.addChild(this.bgGame)
        }
        ,
        u.prototype.initFrames = function() {
            var t;
            for (this.framesDealerChiaBai = [],
            this.framesDealerClick = [],
            this.framesDealerPlay = [],
            this.framesDealerNormal = [],
            this.framesWin = [],
            this.framesWin = framesFromTilesetImage("win.effect", 230, 230),
            t = 1; t < 15; t++)
                this.framesDealerChiaBai.push(this.assets.loader.resources.dealerTourPoker.textures["dealer-chia-bai-" + t + ".png"]);
            for (t = 1; t < 25; t++)
                this.framesDealerClick.push(this.assets.loader.resources.dealerTourPoker.textures["dealer-rung-nguc-" + t + ".png"]),
                this.framesDealerPlay.push(this.assets.loader.resources.dealerTourPoker.textures["dealer-moi-choi-" + t + ".png"]);
            for (t = 1; t < 49; t++)
                this.framesDealerNormal.push(this.assets.loader.resources.dealerTourPoker.textures["dealer-normal-" + t + ".png"]);
            this.framesFinalEffect = this.framesFinal.map(function(t) {
                return frame(TextureCache.finalTablePoker, t[0], t[1], t[2], t[3])
            })
        }
        ,
        u.prototype.initContainer = function() {
            this.infoContainer = new Container,
            this.playerContainer = new Container,
            this.chipContainer = new Container,
            this.divideContainer = new Container,
            this.cardContainer = new Container,
            this.drawCardsContainer = new Container,
            this.cardContainer.addChild(this.drawCardsContainer),
            this.messageContainer = new Container,
            this.effectContainer = new Container,
            this.messageContainer.addChild(this.effectContainer),
            this.buttonContainer = new Container,
            this.resultContainer = new Container
        }
        ,
        u.prototype.deleteChip = function() {
            for (; 0 < this.chipContainer.children.length; )
                this.chipContainer.children[0].destroy({
                    children: !0
                })
        }
        ,
        u.prototype.initChipBg = function() {
            this.arrChipBg = [],
            this.deleteChip();
            for (var t = 0; t < 6; t++) {
                var e = new Sprite(this.assets.loader.resources.commonTourPoker.textures["bg-chip.png"]);
                e.anchor.set(0, .5),
                e.position.set(this.chipPos[t][0], this.chipPos[t][1]),
                e.visible = !1,
                e.addChild(new Sprite(this.assets.loader.resources.commonTourPoker.textures["chip-in-game.png"])),
                e.children[0].anchor.set(0, .5),
                e.children[0].scale.set(.6),
                e.children[0].x = 5,
                e.addChild(new PIXI.Text("",{
                    fontFamily: "Roboto-Bold",
                    fontSize: 14,
                    fill: ["yellow"]
                })),
                e.children[1].x = 30,
                e.children[1].anchor.set(0, .5),
                this.chipContainer.addChild(e),
                this.arrChipBg.push(e)
            }
        }
        ,
        u.prototype.updateTableInfo = function(t) {
            for (; 0 < this.infoContainer.children.length; )
                this.infoContainer.children[0].destroy({
                    children: !0
                });
            var e = new PIXI.Text("#" + this.roomModel.GameSessionID,{
                fontFamily: this.fontFaceBold,
                fontSize: 12,
                fill: ["#fff"],
                padding: 10,
                align: "center"
            });
            e.anchor.set(0, .5),
            e.position.set(-555, -345);
            var i = new PIXI.Text(Message.GetMessage("tour11", [t.CurrentAccounts, t.TotalPlayer]),{
                fontFamily: this.fontFaceBold,
                fontSize: 12,
                fill: ["#fff"],
                padding: 10,
                align: "center"
            });
            i.anchor.set(0, .5),
            i.position.set(-555, -330);
            var n = new PIXI.Text(Message.GetMessage("tour12", [t.Level.SmallBlind, t.Level.BigBlind, t.Level.Ante]),{
                fontFamily: this.fontFaceBold,
                fontSize: 12,
                fill: ["#fff"],
                padding: 10,
                align: "center"
            });
            n.anchor.set(0, .5),
            n.position.set(-555, -315);
            var o = new PIXI.Text(Message.GetMessage("tour15", [t.Level.LevelID, Math.ceil(t.RemainTime / 60)]),{
                fontFamily: this.fontFaceBold,
                fontSize: 12,
                fill: ["#fff"],
                padding: 10,
                align: "center"
            });
            o.anchor.set(0, .5),
            o.position.set(-555, -300),
            this.infoContainer.addChild(e, i, n, o)
        }
        ,
        u.prototype.initWaitScreen = function(t, e) {
            if (this.roomModel = e,
            this.timeRemain = e.RemainTime,
            this.txtTimeRemain = new PIXI.Text(this.formatTimeRemain(this.timeRemain),{
                fontFamily: this.fontFaceBold,
                fontSize: 50,
                fill: ["#fff"]
            }),
            this.txtTimeRemain.anchor.set(.5),
            this.txtTimeRemain.position.set(0, 20),
            this.showNotify(Message.GetMessage("tour10")),
            this.playerContainer.addChild(this.txtTimeRemain),
            this.sound)
                try {
                    this.waitSound.play()
                } catch (t) {}
            for (var i = 0; i < 1; i++) {
                var n = PIXI.Sprite.fromImage("/assets/images/avatar/" + p.Util.RandomFrom(0, 29) + ".png");
                n.anchor.set(.5),
                n.width = 0 === i ? 140 : 120,
                n.height = 0 === i ? 140 : 120,
                n.position.set(this.playerPos[i][0], this.playerPos[i][1]),
                n.tint = 10066329,
                this.playerContainer.addChild(n)
            }
            this.countDown(this)
        }
        ,
        u.prototype.countDown = function(t) {
            try {
                if (t.timeRemain--,
                t.timeRemain <= 0)
                    return t.txtTimeRemain.destroy({
                        children: !0
                    }),
                    void (t.notify.visible = !1);
                t.txtTimeRemain.text = t.formatTimeRemain(t.timeRemain),
                this.timeCount = setTimeout(function() {
                    return t.countDown(t)
                }, 1e3)
            } catch (t) {}
        }
        ,
        u.prototype.reRenderPlayer = function(t) {
            this.getCurrentPlayer();
            var e = this.roomModel.Players;
            for (var i in e) {
                var n = e[i];
                if (0 <= n.Position && n.Position < 6 && n.AccountID === t) {
                    this.renderPlayer(n);
                    break
                }
            }
        }
        ,
        u.prototype.renderPlayer = function(t, e) {
            if (0 <= t.Position && t.Position < 6) {
                var i = t.Position - (-1 === this.currentPlayer.Position ? 0 : this.currentPlayer.Position);
                i < 0 && (i += this.roomModel.MaxPlayerInRoom);
                try {
                    this.players[i].destroy({
                        children: !0
                    })
                } catch (t) {}
                this.players[i] = new r.default({
                    position: i,
                    player: t,
                    xy: this.playerPos[i],
                    w: t.AccountID === this.currentPlayer.AccountID || 0 === i ? 140 : 120,
                    h: t.AccountID === this.currentPlayer.AccountID || 0 === i ? 140 : 120,
                    b: t.AccountID === this.currentPlayer.AccountID || 0 === i ? 95 : 75,
                    game: this
                }),
                this.players[i].updateBalance(t.Chips),
                this.playerContainer.addChild(this.players[i]);
                try {
                    e && this.players[i].fold()
                } catch (t) {}
            }
        }
        ,
        u.prototype.renderPlayers = function(t) {
            this.getCurrentPlayer();
            for (var e = 0; e < this.players.length; e++) {
                try {
                    this.players[e].destroy({
                        children: !0
                    })
                } catch (t) {}
                this.players[e] = null
            }
            this.players = [null, null, null, null, null, null];
            var i = this.currentPlayer.Position;
            for (var e in t) {
                var n = t[e];
                0 <= n.Position && n.Position < 6 && (n.Position - (-1 === i ? 0 : i) < 0 && this.roomModel.MaxPlayerInRoom,
                this.renderPlayer(n))
            }
        }
        ,
        u.prototype.errorMessage = function(t) {
            if (-22005 === t.c || -314 === t.c || -335 === t.c || -339 === t.c || -340 === t.c || -229 === t.c || -228 === t.c) {
                try {
                    this.delete()
                } catch (t) {}
                window.location.hash = "#/tournament/poker/"
            } else if (-22009 === t.c)
                return void this.setFinalTable();
            App.showPopupMessage({
                content: Message.GetMessage((t.c < 0 ? "me" : "") + t.c),
                textDone: "OK"
            })
        }
        ,
        u.prototype.initButton = function() {
            this.btnFlip = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]),
            this.btnFlip.name = "btn-normal.png",
            this.btnFlip.anchor.set(.5),
            this.btnFlip.position.set(480, 315),
            this.btnFlip.addChild(new PIXI.Text(Message.GetMessage("ca80").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            })),
            this.btnFlip.getChildAt(0).anchor.set(.5),
            this.btnFlip.getChildAt(0).position.set(0, 0),
            this.btnFlip.interactive = !0,
            this.btnFlip.buttonMode = !0,
            this.btnFlip.id = "btnFlip",
            this.btnFlip.on("pointerover", this.btnHover.bind(this.btnFlip, this)).on("pointerout", this.btnOut.bind(this.btnFlip, this)).on("pointerdown", this.btnDown.bind(this.btnFlip, this)).on("pointerup", this.onButtonClick.bind(this.btnFlip, this.btnFlip, this)),
            this.btnAllIn = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]),
            this.btnAllIn.name = "btn-normal.png",
            this.btnAllIn.id = "btnAllIn",
            this.btnAllIn.anchor.set(.5),
            this.btnAllIn.position.set(480, 315),
            this.btnAllIn.addChild(new PIXI.Text(Message.GetMessage("ca05").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            })),
            this.btnAllIn.getChildAt(0).anchor.set(.5),
            this.btnAllIn.getChildAt(0).position.set(0, 0),
            this.btnAllIn.interactive = !0,
            this.btnAllIn.buttonMode = !0,
            this.btnAllIn.on("pointerover", this.btnHover.bind(this.btnAllIn, this)).on("pointerout", this.btnOut.bind(this.btnAllIn, this)).on("pointerdown", this.btnDown.bind(this.btnAllIn, this)).on("pointerup", this.onButtonClick.bind(this.btnAllIn, this.btnAllIn, this)),
            this.btnRaise = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]),
            this.btnRaise.name = "btn-normal.png",
            this.btnRaise.anchor.set(.5),
            this.btnRaise.position.set(340, 315),
            this.btnRaise.addChild(new PIXI.Text(Message.GetMessage("ca01").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            })),
            this.btnRaise.getChildAt(0).anchor.set(.5),
            this.btnRaise.getChildAt(0).position.set(0, 0),
            this.btnRaise.interactive = !0,
            this.btnRaise.buttonMode = !0,
            this.btnRaise.id = "btnRaise",
            this.btnRaise.on("pointerover", this.btnHover.bind(this.btnRaise, this)).on("pointerout", this.btnOut.bind(this.btnRaise, this)).on("pointerdown", this.btnDown.bind(this.btnRaise, this)).on("pointerup", this.onButtonClick.bind(this.btnRaise, this.btnRaise, this)),
            this.btnBet = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]),
            this.btnBet.name = "btn-normal.png",
            this.btnBet.anchor.set(.5),
            this.btnBet.position.set(340, 315),
            this.btnBet.addChild(new PIXI.Text(Message.GetMessage("ca04").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            })),
            this.btnBet.getChildAt(0).anchor.set(.5),
            this.btnBet.getChildAt(0).position.set(0, 0),
            this.btnBet.interactive = !0,
            this.btnBet.buttonMode = !0,
            this.btnBet.id = "btnBet",
            this.btnBet.on("pointerover", this.btnHover.bind(this.btnBet, this)).on("pointerout", this.btnOut.bind(this.btnBet, this)).on("pointerdown", this.btnDown.bind(this.btnBet, this)).on("pointerup", this.onButtonClick.bind(this.btnBet, this.btnBet, this)),
            this.btnConfirm = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]),
            this.btnConfirm.name = "btn-normal.png",
            this.btnConfirm.anchor.set(.5),
            this.btnConfirm.position.set(340, 315),
            this.btnConfirm.addChild(new PIXI.Text(Message.GetMessage("ca54").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            })),
            this.btnConfirm.getChildAt(0).anchor.set(.5),
            this.btnConfirm.getChildAt(0).position.set(0, -15),
            this.btnConfirm.addChild(new PIXI.Text("",{
                fontFamily: this.fontFaceBold,
                fontSize: 22,
                fontWeight: "bold",
                fill: ["#E7B70B"],
                padding: 10,
                align: "center"
            })),
            this.btnConfirm.getChildAt(1).anchor.set(.5),
            this.btnConfirm.getChildAt(1).position.set(0, 15),
            this.btnConfirm.interactive = !0,
            this.btnConfirm.buttonMode = !0,
            this.btnConfirm.id = "btnConfirm",
            this.btnConfirm.on("pointerover", this.btnHover.bind(this.btnConfirm, this)).on("pointerout", this.btnOut.bind(this.btnConfirm, this)).on("pointerdown", this.btnDown.bind(this.btnConfirm, this)).on("pointerup", this.onButtonClick.bind(this.btnConfirm, this.btnConfirm, this)),
            this.btnView = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]),
            this.btnView.name = "btn-normal.png",
            this.btnView.id = "btnView",
            this.btnView.anchor.set(.5),
            this.btnView.position.set(200, 315),
            this.btnView.addChild(new PIXI.Text(Message.GetMessage("ca06").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            })),
            this.btnView.getChildAt(0).anchor.set(.5),
            this.btnView.getChildAt(0).position.set(0, 0),
            this.btnView.interactive = !0,
            this.btnView.buttonMode = !0,
            this.btnView.on("pointerover", this.btnHover.bind(this.btnView, this)).on("pointerout", this.btnOut.bind(this.btnView, this)).on("pointerdown", this.btnDown.bind(this.btnView, this)).on("pointerup", this.onButtonClick.bind(this.btnView, this.btnView, this)),
            this.btnFollow = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]),
            this.btnFollow.name = "btn-normal.png",
            this.btnFollow.anchor.set(.5),
            this.btnFollow.position.set(200, 315),
            this.btnFollow.addChild(new PIXI.Text(Message.GetMessage("ca02").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            })),
            this.btnFollow.getChildAt(0).anchor.set(.5),
            this.btnFollow.getChildAt(0).position.set(0, -15),
            this.btnFollow.addChild(new PIXI.Text("",{
                fontFamily: this.fontFaceBold,
                fontSize: 22,
                fontWeight: "bold",
                fill: ["#E7B70B"],
                padding: 10,
                align: "center"
            })),
            this.btnFollow.getChildAt(1).anchor.set(.5),
            this.btnFollow.getChildAt(1).position.set(0, 15),
            this.btnFollow.interactive = !0,
            this.btnFollow.buttonMode = !0,
            this.btnFollow.id = "btnFollow",
            this.btnFollow.on("pointerover", this.btnHover.bind(this.btnFollow, this)).on("pointerout", this.btnOut.bind(this.btnFollow, this)).on("pointerdown", this.btnDown.bind(this.btnFollow, this)).on("pointerup", this.onButtonClick.bind(this.btnFollow, this.btnFollow, this)),
            this.btnFold = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]),
            this.btnFold.name = "btn-normal.png",
            this.btnFold.anchor.set(.5),
            this.btnFold.position.set(60, 315),
            this.btnFold.addChild(new PIXI.Text(Message.GetMessage("ca03").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            })),
            this.btnFold.getChildAt(0).anchor.set(.5),
            this.btnFold.getChildAt(0).position.set(0, 0),
            this.btnFold.interactive = !0,
            this.btnFold.buttonMode = !0,
            this.btnFold.id = "btnFold",
            this.btnFold.on("pointerover", this.btnHover.bind(this.btnFold, this)).on("pointerout", this.btnOut.bind(this.btnFold, this)).on("pointerdown", this.btnDown.bind(this.btnFold, this)).on("pointerup", this.onButtonClick.bind(this.btnFold, this.btnFold, this)),
            this.buttonContainer.addChild(this.btnFold, this.btnView, this.btnAllIn, this.btnBet, this.btnRaise, this.btnFollow, this.btnConfirm, this.btnFlip),
            this.inVisibleButtons(),
            this.initAutoButton()
        }
        ,
        u.prototype.initAutoButton = function() {
            this.btnAutoFold = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]),
            this.btnAutoFold.name = "btn-normal.png",
            this.btnAutoFold.anchor.set(.5),
            this.btnAutoFold.position.set(200, 315),
            this.btnAutoFold.addChild(new PIXI.Text(Message.GetMessage("ca03").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            }));
            var t = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["checkbox.png"]);
            t.name = "check",
            t.anchor.set(.5),
            t.position.set(-40, 0);
            var e = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["icon-check.png"]);
            e.name = "check",
            e.anchor.set(.5),
            e.position.set(-40, 0),
            e.visible = !0,
            this.btnAutoFold.addChild(t, e),
            this.btnAutoFold.getChildAt(0).anchor.set(.5),
            this.btnAutoFold.getChildAt(0).position.set(10, 0),
            this.btnAutoFold.interactive = !0,
            this.btnAutoFold.buttonMode = !0,
            this.btnAutoFold.id = "btnAutoFold",
            this.btnAutoFold.on("pointerover", this.btnHover.bind(this.btnAutoFold, this)).on("pointerout", this.btnOut.bind(this.btnAutoFold, this)).on("pointerdown", this.btnDown.bind(this.btnAutoFold, this)).on("pointerup", this.onButtonClick.bind(this.btnAutoFold, this.btnAutoFold, this)),
            this.btnAutoCheck = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]),
            this.btnAutoCheck.name = "btn-normal.png",
            this.btnAutoCheck.anchor.set(.5),
            this.btnAutoCheck.position.set(340, 315),
            this.btnAutoCheck.addChild(new PIXI.Text(Message.GetMessage("ca06").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            }));
            var i = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["checkbox.png"]);
            i.name = "check",
            i.anchor.set(.5),
            i.position.set(-40, 0);
            var n = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["icon-check.png"]);
            n.name = "check",
            n.anchor.set(.5),
            n.position.set(-40, 0),
            n.visible = !0,
            this.btnAutoCheck.addChild(i, n),
            this.btnAutoCheck.getChildAt(0).anchor.set(.5),
            this.btnAutoCheck.getChildAt(0).position.set(10, 0),
            this.btnAutoCheck.interactive = !0,
            this.btnAutoCheck.buttonMode = !0,
            this.btnAutoCheck.id = "btnAutoCheck",
            this.btnAutoCheck.on("pointerover", this.btnHover.bind(this.btnAutoCheck, this)).on("pointerout", this.btnOut.bind(this.btnAutoCheck, this)).on("pointerdown", this.btnDown.bind(this.btnAutoCheck, this)).on("pointerup", this.onButtonClick.bind(this.btnAutoCheck, this.btnAutoCheck, this)),
            this.btnAutoCall = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]),
            this.btnAutoCall.name = "btn-normal.png",
            this.btnAutoCall.anchor.set(.5),
            this.btnAutoCall.position.set(340, 315),
            this.btnAutoCall.addChild(new PIXI.Text(Message.GetMessage("ca02").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            }));
            var o = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["checkbox.png"]);
            o.name = "check",
            o.anchor.set(.5),
            o.position.set(-40, 0);
            var s = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["icon-check.png"]);
            s.name = "check",
            s.anchor.set(.5),
            s.position.set(-40, 0),
            s.visible = !0,
            this.btnAutoCall.addChild(o, s),
            this.btnAutoCall.addChild(new PIXI.Text("",{
                fontFamily: this.fontFaceBold,
                fontSize: 22,
                fontWeight: "bold",
                fill: ["#E7B70B"],
                padding: 10,
                align: "center"
            })),
            this.btnAutoCall.getChildAt(0).anchor.set(.5),
            this.btnAutoCall.getChildAt(0).position.set(10, -15),
            this.btnAutoCall.getChildAt(3).anchor.set(.5),
            this.btnAutoCall.getChildAt(3).position.set(10, 15),
            this.btnAutoCall.interactive = !0,
            this.btnAutoCall.buttonMode = !0,
            this.btnAutoCall.id = "btnAutoCall",
            this.btnAutoCall.on("pointerover", this.btnHover.bind(this.btnAutoCall, this)).on("pointerout", this.btnOut.bind(this.btnAutoCall, this)).on("pointerdown", this.btnDown.bind(this.btnAutoCall, this)).on("pointerup", this.onButtonClick.bind(this.btnAutoCall, this.btnAutoCall, this)),
            this.autoButtonContainer = new Container,
            this.autoButtonContainer.addChild(this.btnAutoFold, this.btnAutoCheck, this.btnAutoCall),
            this.buttonContainer.addChild(this.autoButtonContainer),
            this.autoButtonContainer.visible = !1
        }
        ,
        u.prototype.btnTintOver = function(t) {
            this.filters = [t.filter]
        }
        ,
        u.prototype.btnTintOut = function(t) {
            this.filters = null
        }
        ,
        u.prototype.btnHover = function(t) {
            this.texture = t.assets.loader.resources.assetsTourPoker.textures[this.name.replace("normal", "hover")]
        }
        ,
        u.prototype.btnOut = function(t) {
            this.texture = t.assets.loader.resources.assetsTourPoker.textures[this.name]
        }
        ,
        u.prototype.btnDown = function(t) {
            this.texture = t.assets.loader.resources.assetsTourPoker.textures[this.name.replace("normal", "click")]
        }
        ,
        u.prototype.disableButton = function(t) {
            t && (t.interactive = !1,
            t.buttonMode = !1,
            t.name && (t.texture = this.assets.loader.resources.assetsTourPoker.textures[t.name.replace("normal", "disable")]))
        }
        ,
        u.prototype.btnBackDown = function(t) {
            try {
                t.delete()
            } catch (t) {}
            window.location.hash = "#/tournament/poker/"
        }
        ,
        u.prototype.btnInfoDown = function(t) {
            t.showInfo(t.tourId, !1)
        }
        ,
        u.prototype.btnTableDown = function(e) {
            if (e.tableCon) {
                try {
                    e.tableCon.destroy({
                        children: !0
                    })
                } catch (t) {}
                e.tableCon = null
            } else
                $.ajax({
                    type: "GET",
                    url: Config.Tour.poker.api + ("GetTopPlayer?TournamentID=" + e.roomModel.TournamentID + "&ingame=true&CurrencyID" + e.currencyId),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    cache: !1,
                    crossDomain: !0,
                    xhrFields: {
                        withCredentials: !0
                    },
                    success: function(t) {
                        console.log("gettop", t),
                        0 === t.c && 0 < t.d.data.length && e.genTopPlayer(t.d.data)
                    },
                    error: function() {}
                })
        }
        ,
        u.prototype.genTopPlayer = function(t) {
            var e, h, l;
            !t || t.length <= 0 || (this.tableCon = new PIXI.Sprite(this.assets.loader.resources.assetsTourPoker.textures["title-tour-right.png"]),
            this.tableCon.anchor.set(1, .5),
            this.tableCon.position.set(640, -200),
            (e = new PIXI.Text(Message.GetMessage("tour16"),{
                fontFamily: this.fontFaceBold,
                fontSize: 16,
                fontWeight: "bold",
                fill: ["white"],
                padding: 10
            })).anchor.set(0, .5),
            e.position.set(-210, 15),
            this.tableCon.addChild(e),
            this.bgGame.addChild(this.tableCon),
            h = 0,
            l = this,
            $.each(t, function() {
                var t = new PIXI.Sprite(l.assets.loader.resources.assetsTourPoker.textures["bg-user-tour.png"]);
                t.anchor.set(1, .5),
                t.position.set(0, 90 + 53 * h);
                var e = "0" !== this.avatarID ? this.avatarID : this.accountID % 30
                  , i = PIXI.Sprite.fromImage("/assets/images/avatar/" + e + ".png");
                i.anchor.set(0, .5),
                i.width = i.height = 40,
                i.position.set(-210, 0);
                var n = new PIXI.Text(11 < this.nickname.length ? this.nickname.substring(0, 8) + "***" : this.nickname,{
                    fontFamily: l.fontFaceBold,
                    fontSize: 13,
                    fontWeight: "bold",
                    fill: [l.currentPlayer.AccountID === this.accountID + ":" + this.portalID ? "red" : "white"],
                    padding: 10
                });
                n.position.set(-160, -16);
                var o = new PIXI.Sprite(l.assets.loader.resources.commonTourPoker.textures["chip-in-game.png"]);
                o.anchor.set(0, .5),
                o.scale.set(.4),
                o.position.set(-160, 10);
                var s = new PIXI.Text(l.formatNumber(this.chips),{
                    fontFamily: l.fontFaceBold,
                    fontSize: 13,
                    fontWeight: "bold",
                    fill: ["yellow"],
                    padding: 10
                });
                s.anchor.set(0, .5),
                s.position.set(-140, 10);
                var a, r = new PIXI.Sprite(l.assets.loader.resources.assetsTourPoker.textures[this.rank < 4 ? "rank-" + this.rank + ".png" : "bg-rank.png"]);
                r.anchor.set(0, .5),
                r.position.set(-40, 0),
                3 < this.rank && ((a = new PIXI.Text(this.rank,{
                    fontFamily: l.fontFaceBold,
                    fontSize: 13,
                    fill: "#fff"
                })).anchor.set(.5),
                a.position.set(r.width / 2, 0),
                r.addChild(a)),
                t.addChild(i, n, o, s, r),
                l.tableCon.addChild(t),
                h++
            }))
        }
        ,
        u.prototype.inVisibleButtons = function(t) {
            void 0 === t && (t = !1),
            this.inVisibleButton(this.btnFold),
            this.inVisibleButton(this.btnView),
            this.inVisibleButton(this.btnAllIn),
            this.inVisibleButton(this.btnBet),
            this.inVisibleButton(this.btnRaise),
            this.inVisibleButton(this.btnFollow),
            this.inVisibleButton(this.btnConfirm),
            t || this.inVisibleButton(this.btnFlip)
        }
        ,
        u.prototype.inVisibleButton = function(t) {
            t && (t.visible = !1)
        }
        ,
        u.prototype.enableButton = function(t) {
            t && (t.interactive = !0,
            t.buttonMode = !0,
            t.texture = this.assets.loader.resources.assetsTourPoker.textures[t.name],
            t.visible = !0)
        }
        ,
        u.prototype.onButtonClick = function(t, e) {
            var i = t.id;
            if (i)
                switch (e.toggleBar(!1),
                i) {
                case "btnView":
                    if (e.sound)
                        try {
                            PIXI.sound.play("sound_button_check")
                        } catch (t) {}
                    e.hub.bet(0, b.EPokerActionName.Check, e.tourId);
                    break;
                case "btnFold":
                    if (e.sound)
                        try {
                            PIXI.sound.play("sound_button_fold")
                        } catch (t) {}
                    e.hub.bet(0, b.EPokerActionName.Fold, e.tourId);
                    break;
                case "btnFollow":
                    if (e.sound)
                        try {
                            PIXI.sound.play("sound_button_call")
                        } catch (t) {}
                    e.hub.bet(0, b.EPokerActionName.Call, e.tourId);
                    break;
                case "btnAllIn":
                    if (e.sound)
                        try {
                            PIXI.sound.play("sound_button_all_in")
                        } catch (t) {}
                    e.hub.bet(0, b.EPokerActionName.AllIn, e.tourId);
                    break;
                case "btnBet":
                    if (e.sound)
                        try {
                            PIXI.sound.play("sound_button_Raise")
                        } catch (t) {}
                    e.onBetEvent();
                    break;
                case "btnRaise":
                    if (e.sound)
                        try {
                            PIXI.sound.play("sound_button_Raise")
                        } catch (t) {}
                    e.onRaiseEvent();
                    break;
                case "btnConfirm":
                    if (e.sound)
                        try {
                            PIXI.sound.play("sound_button_Raise")
                        } catch (t) {}
                    e.onConfirmEvent();
                    break;
                case "btnFlip":
                    if (e.sound)
                        try {
                            PIXI.sound.play("sound_button_check")
                        } catch (t) {}
                    e.hub.flipCards(e.tourId, e.currencyId);
                    break;
                case "btnAutoFold":
                    e.btnAutoClick(t, b.EPokerAutoAction.FOLD);
                    break;
                case "btnAutoCheck":
                    e.btnAutoClick(t, b.EPokerAutoAction.CHECK);
                    break;
                case "btnAutoCall":
                    e.btnAutoClick(t, b.EPokerAutoAction.CALL);
                    break;
                case "btnBuyin":
                    e.handleBuyin()
                }
        }
        ,
        u.prototype.formatNumber = function(t) {
            return void 0 === t && (t = 0),
            t.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".")
        }
        ,
        u.prototype.updateAccount = function(t, e, i) {
            var n = this.getPlayerByAccountId(t.AccountID);
            if (n)
                try {
                    n.player.Account = t,
                    n.updateBalance(e),
                    n.showMoney(i),
                    this.roomModel.Players[t.AccountID].Chips = e
                } catch (t) {
                    console.log(t)
                }
        }
        ,
        u.prototype.onBetEvent = function() {
            this.btnBet.visible = !1,
            this.btnConfirm.visible = !0,
            this.initBar(b.EPokerActionName.Bet)
        }
        ,
        u.prototype.onRaiseEvent = function() {
            this.btnRaise.visible = !1,
            this.btnConfirm.visible = !0,
            this.initBar(b.EPokerActionName.Raise)
        }
        ,
        u.prototype.onConfirmEvent = function() {
            var t = this.betRaise
              , e = this.barContainer.type;
            !t || t < 0 || !e || this.hub.bet(t, e, this.tourId)
        }
        ,
        u.prototype.updateBetOrRaise = function(t, e) {
            null == e || void 0 === t || isNaN(t) || (this.betRaise = t,
            this.btnConfirm.getChildAt(1).text = this.formatNumber(t))
        }
        ,
        u.prototype.toggleBar = function(t) {
            void 0 === t && (t = !0),
            this.barContainer && (this.barContainer.visible = t)
        }
        ,
        u.prototype.displayCheckAuto = function(t) {
            this.resetAutoButtons();
            var e = this;
            (t[1].Valid || t[2].Valid || t[3].Valid || t[4].Valid) && (t[2].Valid && (e.disableButton(e.btnAutoCheck),
            e.enableButton(e.btnAutoCall),
            e.btnAutoCall.getChildAt(3).text = p.Util.ParseMoney(t[2].Value)),
            t[3].Valid && (e.disableButton(e.btnAutoCall),
            e.enableButton(e.btnAutoCheck)),
            t[4].Valid && e.enableButton(e.btnAutoFold))
        }
        ,
        u.prototype.resetAutoButtons = function(t) {
            void 0 === t && (t = !0),
            this.inVisibleButtons(),
            this.autoButtonContainer.visible = t,
            this.btnAutoFold.visible = !1,
            this.btnAutoCall.visible = !1,
            this.btnAutoCheck.visible = !1
        }
        ,
        u.prototype.disableAutoTicks = function() {
            this.btnAutoFold.getChildAt(2).visible = !1,
            this.btnAutoCall.getChildAt(2).visible = !1,
            this.btnAutoCheck.getChildAt(2).visible = !1
        }
        ,
        u.prototype.changeCheckAuto = function(t) {
            this.disableAutoTicks(),
            1 == t ? console.log("action", 1) : 2 == t ? this.btnAutoCall.getChildAt(2).visible = !0 : 3 == t ? this.btnAutoCheck.getChildAt(2).visible = !0 : 4 == t && (this.btnAutoFold.getChildAt(2).visible = !0)
        }
        ,
        u.prototype.initBar = function(t, e) {
            void 0 === e && (e = !0);
            try {
                this.barContainer && (this.bgGame.removeChild(this.barContainer),
                this.barContainer = null);
                var i = this.roomModel
                  , n = (i.Players,
                i.GamePot);
                this.barContainer = new l.default({
                    min: this.betMin,
                    max: this.betMax,
                    step: this.roomModel.BigBlind,
                    game: this,
                    pot: n,
                    type: t,
                    money: this.currentPlayer.Chips
                }),
                this.barContainer.position.set(200, 220),
                this.bgGame.addChild(this.barContainer)
            } catch (t) {
                console.log(t)
            }
        }
        ,
        u.prototype.disconnect = function(t) {
            -20017 === t && (this.errorMessage({
                c: -20017
            }),
            this.delete(),
            setTimeout(function() {
                window.location.hash = "#/tournament/poker/"
            }, 1e3))
        }
        ,
        u.prototype.updateConnectionStatus = function(t) {
            var e;
            null == t.id || null != (e = this.getPlayerByAccountId(t.id)) && e.updateConnectionStatus(t.status)
        }
        ,
        u.prototype.playerLeave = function(t) {
            if (this.sound)
                try {
                    PIXI.sound.play("sound_leave_room")
                } catch (t) {}
            if (t === this.currentPlayer.AccountID)
                return this.errorMessage({
                    c: -22007
                }),
                this.delete(),
                void setTimeout(function() {
                    window.location.hash = "#/tournament/poker/"
                }, 1e3);
            var e, i = this.getPlayerByAccountId(t);
            i && (i.accountId === this.roomModel.Dealer && (this.icDeal.visible = !1),
            i.reset(),
            e = i.pos,
            i.destroy({
                children: !0
            }),
            delete this.players[e],
            this.players[e] = null),
            this.checkPlayer()
        }
        ,
        u.prototype.playerJoin = function(t) {
            if (this.sound)
                try {
                    PIXI.sound.play("sound_join_room")
                } catch (t) {}
            0 <= t.Position && this.renderPlayer(t, !0)
        }
        ,
        u.prototype.checkPlayer = function() {
            for (var t, e = 0, i = 0; i < this.players.length; i++)
                this.players[i] && (e++,
                t = this.players[i]);
            1 === e && (this.removeTimer(),
            t.reset(),
            this.changeDealer(t.accountId))
        }
        ,
        u.prototype.updatePlayer = function() {
            var t = this.roomModel.Players;
            for (var e in t) {
                var i = this.getPlayerByAccountId(t[e].AccountID);
                i && (i.player = t[e],
                i.chipInPhrase = t[e].Chips)
            }
        }
        ,
        u.prototype.playerJoinAnotherTable = function(t) {
            t !== this.currentPlayer.AccountID ? this.playerLeave(t) : this.clearForNewGame()
        }
        ,
        u.prototype.changeDealer = function(t) {
            var e = this.getPlayerByAccountId(t);
            if (e) {
                this.icDeal.visible = !0;
                try {
                    TweenMax.to(this.icDeal, .5, {
                        data: "poker-tournament",
                        x: e.avatar.x + 30,
                        y: e.avatar.y - e.avatar.height / 2 + 10
                    })
                } catch (t) {}
            }
        }
        ,
        u.prototype.deleteDiCards = function() {
            for (var t = 0; t < this.divideCard.length; t++)
                this.divideCard[t].destroy({
                    children: !0
                });
            for (t = 0; t < this.divisionCard.length; t++)
                this.divisionCard[t].destroy({
                    children: !0
                });
            this.divisionCard = [],
            this.divideCard = []
        }
        ,
        u.prototype.division = function(e) {
            if (this.deleteDiCards(),
            this.divisionCard = [],
            e) {
                var t = e.Players;
                for (var i in t) {
                    var n = new PIXI.Sprite(this.assets.loader.resources.baiTourPoker.textures["joker.png"]);
                    this.divisionCard.push(n);
                    var o = this.getPlayerByAccountId(t[i].AccountID);
                    n.anchor.set(.5),
                    n.value = t[i].Cards[0].OrdinalValue,
                    this.divideContainer.addChild(n),
                    n.scale.set(.01),
                    n.position.set(this.dealer.x, this.dealer.y);
                    var s = t[i].Position - (-1 === this.currentPlayer.Position ? 0 : this.currentPlayer.Position);
                    s < 0 && (s += this.roomModel.MaxPlayerInRoom),
                    t[i].AccountID,
                    e.Dealer,
                    this.doFlipDivision(n, o ? o.pos : s, i)
                }
            }
            var a = this;
            setTimeout(function() {
                a.icDeal.visible = !0;
                var t = a.getPlayerByAccountId(e.Dealer);
                try {
                    TweenMax.to(a.icDeal, .5, {
                        data: "poker-tournament",
                        x: t.avatar.x + 30,
                        y: t.avatar.y - t.avatar.height / 2 + 10,
                        onComplete: function() {
                            for (var t = 0; t < a.divisionCard.length; t++)
                                a.divisionToDealer(a.divisionCard[t], t)
                        }
                    })
                } catch (t) {}
            }, 1500)
        }
        ,
        u.prototype.doFlipDivision = function(t, e, i) {
            var n = this;
            try {
                TweenMax.to(t.scale, .5, {
                    data: "poker-tournament",
                    x: 1,
                    y: 1,
                    delay: .05 * i
                })
            } catch (t) {}
            try {
                TweenMax.to(t, .5, {
                    data: "poker-tournament",
                    x: n.cardDivisionPos[e][0],
                    y: n.cardDivisionPos[e][1],
                    delay: .05 * i,
                    onComplete: function() {
                        try {
                            TweenMax.to(t.scale, .4, {
                                data: "poker-tournament",
                                x: .01,
                                onComplete: function() {
                                    t.texture = n.assets.loader.resources.baiTourPoker.textures[n.cardsMap[t.value]];
                                    try {
                                        TweenMax.to(t.scale, .4, {
                                            data: "poker-tournament",
                                            x: 1
                                        })
                                    } catch (t) {}
                                }
                            })
                        } catch (t) {}
                    }
                })
            } catch (t) {}
        }
        ,
        u.prototype.divisionToDealer = function(t, e) {
            var i = this;
            try {
                TweenMax.to(t.scale, .4, {
                    data: "poker-tournament",
                    x: .01,
                    delay: .05 * e,
                    onComplete: function() {
                        t.texture = i.assets.loader.resources.baiTourPoker.textures["joker.png"];
                        try {
                            TweenMax.to(t.scale, .4, {
                                data: "poker-tournament",
                                x: 1,
                                onComplete: function() {
                                    try {
                                        TweenMax.to(t.scale, .5, {
                                            data: "poker-tournament",
                                            x: .01,
                                            y: .01
                                        })
                                    } catch (t) {}
                                    try {
                                        TweenMax.to(t, .5, {
                                            data: "poker-tournament",
                                            x: i.dealer.x,
                                            y: i.dealer.y
                                        })
                                    } catch (t) {}
                                }
                            })
                        } catch (t) {}
                    }
                })
            } catch (t) {}
        }
        ,
        u.prototype.removeDrawCard = function() {
            this.drawCardsContainer.removeChildren(),
            this.drawCardsContainer.visible = !0
        }
        ,
        u.prototype.setFinalTable = function() {
            this.hideNotify();
            var t = new AnimatedSprite(this.framesFinalEffect);
            t.anchor.set(.5),
            t.animationSpeed = .3,
            t.position.set(0, 0),
            t.play(),
            this.bgGame.addChild(t),
            setTimeout(function() {
                t.destroy({
                    children: !0
                })
            }, 2500)
        }
        ,
        u.prototype.flip = function(t) {
            var e = this;
            if (t && !(t.value < 0))
                try {
                    TweenMax.to(t.scale, .3, {
                        x: .01,
                        onComplete: function() {
                            t.texture = e.assets.loader.resources.baiTourPoker.textures[e.cardsMap[t.value]];
                            try {
                                TweenMax.to(t.scale, .3, {
                                    x: t.s
                                })
                            } catch (t) {}
                        }
                    })
                } catch (t) {}
        }
        ,
        u.prototype.draw = function(t, e, i) {
            var n = this;
            TweenMax.to(t, .5, {
                x: t.posX,
                y: t.posY,
                rotation: 0,
                data: "poker-tournament",
                delay: e
            }),
            TweenMax.to(t.scale, .5, {
                x: t.s,
                y: t.s,
                rotation: 0,
                data: "poker-tournament",
                delay: e,
                onComplete: function() {
                    0 <= t.value && n.flip(t),
                    "function" == typeof i && i()
                }
            })
        }
        ,
        u.prototype.dealPreFlop = function(t) {
            void 0 === t && (t = !1),
            this.removeDrawCard(),
            this.arrDraw = [];
            var e = []
              , i = this.getPlayerByAccountId(this.roomModel.Dealer);
            e.push(i.pos),
            console.log("chuongPlayer", i);
            for (var n = i.pos + 1; n < 6; n++) {
                var o = this.getPlayerByPosition(n);
                console.log(o),
                o && console.log("p " + n, o.player.PlayerStatus),
                o && 2 === o.player.PlayerStatus && e.push(n)
            }
            for (n = 0; n < i.pos; n++)
                (o = this.getPlayerByPosition(n)) && console.log("p " + n, o.player.PlayerStatus),
                o && 2 === o.player.PlayerStatus && e.push(n);
            console.log("arrPos", e);
            for (var s = this, a = 0, r = s.currentPlayer, n = 0; n < 2; n++)
                for (var h = 0; h < e.length; h++) {
                    var l = new Sprite(s.assets.loader.resources.baiTourPoker.textures["joker.png"])
                      , c = this.getPlayerByPosition(e[h]).accountId;
                    l.anchor.set(.5),
                    l.position.set(this.dealer.x, this.dealer.y),
                    l.scale.set(.01),
                    l.rot = 10 * (2 * n - 1) * Math.PI / 180,
                    l.rotation = 2 * Math.PI,
                    l.i = n,
                    l.pos = this.cardPos[e[h]],
                    l.p = e[h],
                    l.obj = c === (this.currentPlayer.AccountID || 0 === e[h]) ? this.cardOwn : this.cardOther;
                    var u = c === this.currentPlayer.AccountID || 0 === e[h];
                    (l.isOwner = u) && 0 < r.Cards.length && (l.value = r.Cards[n].OrdinalValue),
                    l.accountID = c,
                    l.zIndex = 10,
                    this.arrDraw.push(l),
                    this.drawCardsContainer.addChild(l)
                }
            for (var d = this, n = 0; n < this.arrDraw.length; n++)
                !function(t) {
                    if (d.sound)
                        try {
                            PIXI.sound.play("sound_card_deal_1")
                        } catch (t) {}
                    TweenMax.to(s.arrDraw[t], .3, {
                        data: "poker-tournament",
                        delay: .075 * t,
                        x: s.arrDraw[t].pos[0] + (s.arrDraw[t].i - 1) * (0 === s.arrDraw[t].p ? 35 : 20),
                        y: s.arrDraw[t].pos[1] + (1 !== s.arrDraw[t].i && 0 === s.arrDraw[t].p ? -1 : 0),
                        rotation: s.arrDraw[t].rot
                    }),
                    TweenMax.to(s.arrDraw[t].scale, .3, {
                        data: "poker-tournament",
                        delay: .075 * t,
                        x: s.arrDraw[t].obj.width / s.cardOri.width,
                        y: s.arrDraw[t].obj.height / s.cardOri.height,
                        onComplete: function() {
                            s.arrDraw[t].isOwner && 0 < r.Cards.length ? (s.arrDraw[t].s = 1.4,
                            s.arrDraw[t].value = r.Cards[a++].OrdinalValue,
                            s.flip(s.arrDraw[t])) : s.arrDraw[t].isOwner && s.arrDraw[t].scale.set(1.4)
                        }
                    })
                }(n)
        }
        ,
        u.prototype.removeTimer = function() {
            if (this.timer)
                try {
                    this.timer.clearTimer(),
                    this.timer = null
                } catch (t) {}
        }
        ,
        u.prototype.startActions = function(t, e, i) {
            this.startTimer(e.Account, e.Actions, i)
        }
        ,
        u.prototype.finishActions = function(t, e, i, n, o) {
            var s = this
              , a = e.Action
              , r = e.Amount
              , h = e.BetInRound;
            n.chips,
            this.roomModel.GamePot = i,
            s.removeTimer(),
            s.toggleBar(!1),
            t === s.currentPlayer.AccountID && s.inVisibleButtons();
            var l = s.getPlayerByAccountId(t);
            if (l) {
                if (0 < r && l.updateBetting(h),
                a == b.EPokerActionName.Bet || a == b.EPokerActionName.Call || a == b.EPokerActionName.Raise || a == b.EPokerActionName.AllIn)
                    l.chipInPhrase -= r,
                    l.updateBalance(l.chipInPhrase),
                    l.BetInRound = h;
                else if (a == b.EPokerActionName.Fold)
                    try {
                        l.fold(),
                        this.foldCard(t)
                    } catch (t) {}
                this.currentPlayer.AccountID == t && (this.displayCheckAuto(n.AutoList),
                this.changeCheckAuto(n.Auto)),
                l.showAction(this.actionResult[a])
            }
        }
        ,
        u.prototype.foldCard = function(t) {
            for (var e = 0; e < this.arrDraw.length; e++)
                this.arrDraw[e].accountID === t && (this.arrDraw[e].tint = 10066329,
                this.currentPlayer.AccountID !== t && (this.arrDraw[e].visible = !1))
        }
        ,
        u.prototype.startTimer = function(t, e, i) {
            var n = this
              , o = this;
            if (t && e)
                if (this.ready) {
                    var s = this.getPlayerByAccountId(t)
                      , a = t === this.currentPlayer.AccountID || s && 0 === s.pos
                      , r = a ? 138 : 118
                      , h = a ? 138 : 118;
                    if (this.removeTimer(),
                    this.timer = new p.Timer({
                        width: r,
                        height: h,
                        lineWidth: 4
                    }),
                    this.timer.startTimer(i, i),
                    s) {
                        if (this.toggleBar(!1),
                        this.timer.position.set(s.avatar.x - (a ? 70 : 60), s.avatar.y - (a ? 70 : 60)),
                        this.playerContainer.addChild(this.timer),
                        t === o.currentPlayer.AccountID) {
                            if (this.resetAutoButtons(),
                            this.sound)
                                try {
                                    PIXI.sound.play("sound_Turn")
                                } catch (t) {}
                            for (var l = 0; l < e.length; l++) {
                                var c = e[l]
                                  , u = c.Action
                                  , d = c.Min;
                                u == b.EPokerActionName.Check ? o.enableButton(o.btnView) : u == b.EPokerActionName.Bet ? (o.enableButton(o.btnBet),
                                o.betMin = c.Min,
                                o.betMax = c.Max) : u == b.EPokerActionName.Call ? (o.enableButton(o.btnFollow),
                                this.btnFollow.getChildAt(1).text = p.Util.ParseMoney(d)) : u == b.EPokerActionName.Raise ? (o.enableButton(o.btnRaise),
                                o.betMin = c.Min,
                                o.betMax = c.Max) : u == b.EPokerActionName.Fold ? o.enableButton(o.btnFold) : u == b.EPokerActionName.AllIn ? (o.enableButton(o.btnAllIn),
                                o.enableButton(o.btnBet),
                                o.disableButton(o.btnBet)) : u == b.EPokerActionName.Flip && o.enableButton(o.btnFlip)
                            }
                        }
                    } else
                        setTimeout(function() {
                            return n.startTimer(t, e, i)
                        }, 200)
                } else
                    setTimeout(function() {
                        return n.startTimer(t, e, i)
                    }, 200)
        }
        ,
        u.prototype.playerBlind = function(t) {
            if (this.txtNotify.visible = !1,
            !(null == t || t.length <= 0)) {
                this.roomModel.GamePot = t.reduce(function(t, e) {
                    return t + e.Chips
                }, 0);
                var e = this;
                try {
                    $.each(t, function() {
                        var t = e.getPlayerByAccountId(this.AccountID);
                        t || this.reRenderPlayer(this.AccountID),
                        t.updateBetting(this.Chips),
                        t.chipInPhrase -= this.Chips,
                        t.updateBalance(t.chipInPhrase)
                    })
                } catch (t) {}
            }
        }
        ,
        u.prototype.taxAnt = function(t) {
            if (!(null == t || t.length <= 0)) {
                this.roomModel.GamePot = t.reduce(function(t, e) {
                    return t + e.Chips
                }, 0);
                var e = this.roomModel.GamePot
                  , i = this;
                try {
                    $.each(t, function() {
                        var t = i.getPlayerByAccountId(this.AccountID);
                        t || this.reRenderPlayer(this.AccountID),
                        t.updateTax(this.Chips),
                        t.chipInPhrase -= this.Chips,
                        t.updateBalance(t.chipInPhrase)
                    })
                } catch (t) {}
                setTimeout(function() {
                    i.updatePot(e)
                }, 600)
            }
        }
        ,
        u.prototype.flipCardInFlop = function(t, e) {
            void 0 === e && (e = {});
            var i = t.length;
            if (!(i < 3)) {
                this.arrCardDealer = [];
                for (var n = 0; n < i; n++) {
                    var o = new Sprite(this.assets.loader.resources.baiTourPoker.textures["joker.png"]);
                    o.anchor.set(.5),
                    o.scale.set(.01),
                    o.rotation = 2 * Math.PI,
                    o.position.set(this.dealer.x, this.dealer.y),
                    o.value = t[n].OrdinalValue,
                    o.posX = this.cardDealerPos.x + 95 * n,
                    o.posY = this.cardDealerPos.y,
                    o.s = this.cardDealerPos.s,
                    o.type = "public",
                    this.arrCardDealer.push(o),
                    this.drawCardsContainer.addChild(o)
                }
                var s = this.arrCardDealer.length;
                if (0 !== s)
                    for (n = 0; n < s; n++)
                        this.draw(this.arrCardDealer[n], .6 * n)
            }
        }
        ,
        u.prototype.changePhrase = function(t, e) {
            this.roomModel = e,
            this.getCurrentPlayer(),
            this.checkGamePhrase()
        }
        ,
        u.prototype.checkGamePhraseAfterJoin = function() {
            switch (this.updatePlayer(),
            this.roomModel.Phrase) {
            case b.EPokerPhrases.Waiting:
                this.onWaiting();
                break;
            case b.EPokerPhrases.PreFlop:
                this.onPreFlop();
                break;
            case b.EPokerPhrases.Flop:
                this.onFlop();
                break;
            case b.EPokerPhrases.Turn:
                this.onTurn();
                break;
            case b.EPokerPhrases.River:
                this.onRiver();
                break;
            default:
                this.onWaiting()
            }
        }
        ,
        u.prototype.checkGamePhrase = function() {
            switch (this.updatePlayer(),
            this.roomModel.Phrase) {
            case b.EPokerPhrases.Waiting:
                this.onWaiting();
                break;
            case b.EPokerPhrases.PreFlop:
                this.onPreFlop();
                break;
            case b.EPokerPhrases.Flop:
                this.onFlop();
                break;
            case b.EPokerPhrases.Turn:
                this.onTurn();
                break;
            case b.EPokerPhrases.River:
                this.onRiver();
                break;
            case b.EPokerPhrases.Showdown:
                this.onShowdown();
                break;
            case b.EPokerPhrases.AfterShowdow:
                this.onAfterShowdow()
            }
        }
        ,
        u.prototype.onWaiting = function() {
            this.showNotify(Message.GetMessage("ca111")),
            this.removeTimer(),
            this.hideEffect(),
            this.renderPlayers(this.roomModel.Players),
            this.getRank()
        }
        ,
        u.prototype.onPreFlop = function() {
            var t = this.roomModel;
            this.roomModel.Players,
            this.roomModel.TempPot,
            this.hideNotify(),
            this.clearForNewPhrase(t),
            this.hideEffect(),
            this.dealPreFlop()
        }
        ,
        u.prototype.onFlop = function() {
            var t = this
              , e = this.roomModel
              , i = this.roomModel.Players
              , n = this.roomModel.TempPot;
            if (this.sound)
                try {
                    PIXI.sound.play("sound_card_deal_2")
                } catch (t) {}
            this.hideEffect(),
            this.hideNotify(),
            setTimeout(function() {
                t.flipCardInFlop(e.CommunityCards)
            }, 1e3),
            this.endPhraseAnimation(n, i, b.EPokerPhrases.Flop, e),
            this.clearForNewPhrase(e)
        }
        ,
        u.prototype.onTurn = function() {
            var t = this;
            this.hideEffect();
            var e = this.roomModel
              , i = e.Players
              , n = e.TempPot;
            if (this.sound)
                try {
                    PIXI.sound.play("sound_card_deal_3")
                } catch (t) {}
            setTimeout(function() {
                t.drawCardInRow(e.CommunityCards[3].OrdinalValue, 3)
            }, 1e3),
            this.endPhraseAnimation(n, i, b.EPokerPhrases.Turn, e)
        }
        ,
        u.prototype.onRiver = function() {
            var t = this
              , e = this.roomModel;
            this.hideEffect();
            var i = e.Players
              , n = e.TempPot;
            if (this.sound)
                try {
                    PIXI.sound.play("sound_card_deal_3")
                } catch (t) {}
            setTimeout(function() {
                t.drawCardInRow(e.CommunityCards[4].OrdinalValue, 4)
            }, 1e3),
            this.endPhraseAnimation(n, i, b.EPokerPhrases.River, e)
        }
        ,
        u.prototype.onShowdown = function() {
            var t = this.roomModel
              , e = t.Players
              , i = t.TempPot - this.moneyRefund;
            if (this.sound)
                try {
                    PIXI.sound.play("sound_card_deal_4")
                } catch (t) {}
            this.hideEffect(),
            this.endPhraseAnimation(i, e, b.EPokerPhrases.Showdown, t),
            this.renderPublicCard(t.CommunityCards),
            this.inVisibleButtons(!0),
            this.autoButtonContainer.visible = !1,
            this.btnAutoFold.visible = !1,
            this.btnAutoCall.visible = !1,
            this.btnAutoCheck.visible = !1;
            var n = this.roomModel.Players;
            for (var o in n) {
                var s = n[o].AccountID
                  , a = this.getPlayerByAccountId(s);
                if (a)
                    try {
                        a.showAction()
                    } catch (t) {}
            }
        }
        ,
        u.prototype.onAfterShowdow = function() {
            var t = this.roomModel;
            this.clearForNewGame(t)
        }
        ,
        u.prototype.clearForNewPhrase = function(t, e) {
            void 0 === e && (e = !1);
            var i, n = t.Players;
            if (this.resetAutoButtons(),
            this.frameSpecialResult)
                try {
                    this.frameSpecialResult.destroy({
                        children: !0
                    })
                } catch (t) {}
            for (var o in n) {
                if ((i = this.getPlayerByAccountId(n[o].AccountID)) && (console.log(i, i.pos),
                !n[o].IsAllIn))
                    try {
                        i.showAction()
                    } catch (t) {}
                n[o].AccountID == this.currentPlayer.AccountID && (this.displayCheckAuto(n[o].AutoList),
                this.changeCheckAuto(n[o].Auto))
            }
        }
        ,
        u.prototype.endPhraseAnimation = function(t, e, i, n) {
            var o = this;
            if (this.sound)
                try {
                    PIXI.sound.play("sound_collect_chips")
                } catch (t) {}
            if (0 !== t)
                for (var s in e) {
                    var a = e[s].AccountID
                      , r = this.getPlayerByAccountId(a);
                    if (!e[s].IsAllIn)
                        try {
                            r.showAction()
                        } catch (t) {}
                    !r || r.betMoney <= 0 || r.chiptoDealer(function() {
                        o.updatePot(t)
                    })
                }
            else
                this.updatePot(0)
        }
        ,
        u.prototype.flipCard = function(e, t) {
            this.btnFlip.visible = !1;
            var i = this.getPlayerByAccountId(e)
              , n = this.currentPlayer.AccountID
              , o = this.drawCardsContainer.children.filter(function(t) {
                return t.accountID == e
            });
            if (i && n != e && o)
                try {
                    if (o && 2 === o.length)
                        for (var s = 0; s < 2; s++) {
                            var a = o[s];
                            a.s = a.scale.x,
                            a.value = t[s].OrdinalValue || t[s].ordinalValue,
                            this.flip(a)
                        }
                } catch (t) {}
        }
        ,
        u.prototype.hideEffect = function() {
            try {
                this.frameSpecialResult.destroy({
                    children: !0
                })
            } catch (t) {}
            this.frameSpecialResult = null,
            this.txtResult.visible = !1
        }
        ,
        u.prototype.deleteTween = function() {
            for (var t = TweenMax.getAllTweens(), e = 0; e < t.length; e++)
                "poker-tournament" === t[e].data && t[e].kill()
        }
        ,
        u.prototype.tourFinished = function(t) {
            this.deleteTween(),
            this.inVisibleButtons(),
            this.toggleBar(!1),
            this.boxFinish = new PIXI.Sprite(this.assets.loader.resources.assetsTourPoker.textures["bg-popup.png"]),
            this.boxFinish.anchor.set(.5);
            var e = new PIXI.Sprite(this.assets.loader.resources.assetsTourPoker.textures["title-tournament.png"]);
            e.anchor.set(.5),
            e.position.set(0, -309);
            var i = new PIXI.Sprite(this.assets.loader.resources.assetsTourPoker.textures["t-tournament.png"]);
            i.anchor.set(.5),
            i.position.set(0, -184);
            var n = new PIXI.Sprite(this.assets.loader.resources.assetsTourPoker.textures["bg-session.png"]);
            n.anchor.set(0, .5),
            n.position.set(-300, -184);
            var o = new PIXI.Text("#" + this.tourId,{
                fontFamily: this.fontFaceBold,
                fontSize: 14,
                fontWeight: "bold",
                fill: ["white"],
                padding: 10
            });
            o.anchor.set(0, .5),
            o.x = 5,
            n.addChild(o);
            var s = new PIXI.Sprite(this.assets.loader.resources.assetsTourPoker.textures["bg-rank123.png"]);
            s.anchor.set(.5),
            s.y = 100,
            this.boxFinish.addChild(e, i, n, s),
            this.bgGame.addChild(this.boxFinish);
            var a = {
                1: {
                    x: 0,
                    y: -80,
                    d: 110,
                    nx: 0,
                    ny: -10,
                    mx: 0,
                    my: 10
                },
                2: {
                    x: -163,
                    y: -40,
                    d: 80,
                    nx: -163,
                    ny: 15,
                    mx: -163,
                    my: 35
                },
                3: {
                    x: 163,
                    y: -25,
                    d: 80,
                    nx: 163,
                    ny: 30,
                    mx: 163,
                    my: 50
                }
            }
              , r = this;
            $.each(t, function() {
                var t = a[this.Rank]
                  , e = "0" !== this.AvatarID ? this.AvatarID : this.AccountID % 30
                  , i = PIXI.Sprite.fromImage("/assets/images/avatar/" + e + ".png");
                i.width = i.height = t.d,
                i.anchor.set(.5),
                i.position.set(t.x, t.y);
                var n = new PIXI.Text(this.Nickname,{
                    fontFamily: r.fontFaceBold,
                    fontSize: 16,
                    fontWeight: "bold",
                    fill: ["white"],
                    padding: 10,
                    align: "center"
                });
                n.anchor.set(.5),
                n.position.set(t.nx, t.ny);
                var o = new PIXI.Text(r.formatNumber(this.PrizeValue),{
                    fontFamily: r.fontFaceBold,
                    fontSize: 14,
                    fontStyle: "italic",
                    fontWeight: "bold",
                    fill: ["#ff3879"],
                    padding: 10,
                    align: "center"
                });
                o.anchor.set(.5),
                o.position.set(t.mx, t.my),
                r.boxFinish.addChild(i, n, o)
            });
            var h = new Sprite(this.assets.loader.resources.assetsTourPoker.textures["btn-normal.png"]);
            h.name = "btn-normal.png",
            h.anchor.set(.5),
            h.position.set(0, 190),
            h.addChild(new PIXI.Text(Message.GetMessage("sl30").toUpperCase(),{
                fontFamily: this.fontFaceBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffffff", "#fff2c5"]
            })),
            h.getChildAt(0).anchor.set(.5),
            h.getChildAt(0).position.set(0, 0),
            h.interactive = !0,
            h.buttonMode = !0,
            h.on("pointerover", this.btnHover.bind(h, this)).on("pointerout", this.btnOut.bind(h, this)).on("pointerdown", this.btnDown.bind(h, this)).on("pointerup", function() {
                r.delete(),
                window.location.hash = "#/tournament/poker/"
            }),
            this.boxFinish.addChild(h)
        }
        ,
        u.prototype.getRank = function() {
            var e;
            null == this.roomModel || this.roomModel.TournamentID <= 0 || "" == this.roomModel.UniqueSessionID || (e = this,
            $.ajax({
                type: "GET",
                url: Config.Tour.poker.api + ("GetTableRank?TournamentID=" + this.roomModel.TournamentID + "&tableId=" + this.roomModel.UniqueSessionID),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                cache: !1,
                crossDomain: !0,
                xhrFields: {
                    withCredentials: !0
                },
                success: function(t) {
                    0 === t.c && 0 < t.d.length && $.each(t.d, function() {
                        var t = e.getPlayerByAccountId(this.accountID + ":" + this.portalID);
                        if (null == t)
                            return !0;
                        t.setRank(this.rank)
                    })
                },
                error: function() {}
            }))
        }
        ,
        u.prototype.delete = function() {
            window.removeEventListener("resize", this.resize),
            this.hub.connection.stop(),
            this.ready = !1,
            this.connected = !1,
            this.deleteWaitScreen();
            try {
                this.bgSound.stop()
            } catch (t) {}
            for (var t = TweenMax.getAllTweens(), e = 0; e < t.length; e++)
                "poker-tournament" === t[e].data && t[e].kill();
            try {
                this.application.destroy(!1)
            } catch (t) {}
        }
        ,
        u.prototype.clear = function() {
            try {
                this.assets.loader.destroy(),
                this.delete()
            } catch (t) {}
        }
        ,
        u);
        function u(t) {
            var f = h.call(this) || this;
            return f.deleteWaitScreen = function() {
                for (this.timeRemain = 0,
                clearTimeout(this.timeCount),
                this.txtNotify.visible = !1; 0 < this.playerContainer.children.length; )
                    this.playerContainer.children[0].destroy({
                        children: !0
                    });
                try {
                    try {
                        this.waitSound.stop()
                    } catch (t) {}
                } catch (t) {}
            }
            ,
            f.updateChip = function(t) {
                var e = -1;
                (!t || t <= 0) && (t = f.currentPlayer.AccountID);
                var i = f.getPlayerByAccountId(t);
                if (i) {
                    var n = f.roomModel.Players;
                    for (var o in n)
                        t == n[o].AccountID && (e = n[o].Chips);
                    0 <= e && i.updateBalance(e)
                }
            }
            ,
            f.btnAutoClick = function(t, e) {
                var i = f;
                f.inVisibleButtons();
                var n = t.getChildAt(2).visible;
                i.disableAutoTicks(),
                n ? i.hub.auto(f.tourId, f.currencyId, b.EPokerAutoAction.NONE) : i.hub.auto(f.tourId, f.currencyId, e),
                t.getChildAt(2).visible = !n
            }
            ,
            f.renderCardInJoin = function(t, e) {
                var i = f
                  , n = 0;
                e == b.EPokerPhrases.Turn ? n = 3 : e == b.EPokerPhrases.River && (n = 4);
                for (var o = 0; o < n; o++)
                    i.drawCardInRow(t[o].OrdinalValue, o, function() {})
            }
            ,
            f.drawCardInRow = function(t, e, i) {
                var n = new Sprite(f.assets.loader.resources.baiTourPoker.textures["joker.png"]);
                n.anchor.set(.5),
                n.scale.set(.01),
                n.rotation = 2 * Math.PI,
                n.position.set(f.dealer.x, f.dealer.y),
                n.value = t,
                n.posX = f.cardDealerPos.x + 95 * e,
                n.posY = f.cardDealerPos.y,
                n.s = f.cardDealerPos.s,
                n.type = "public",
                f.drawCardsContainer.addChild(n),
                f.draw(n, 0, i)
            }
            ,
            f.renderPublicCard = function(e, i) {
                void 0 === i && (i = !0);
                try {
                    var l = f
                      , n = e.length
                      , t = l.drawCardsContainer.children.filter(function(t) {
                        return "public" == t.type
                    }).length;
                    if (n == t || 0 == n && i)
                        try {
                            l.showResult()
                        } catch (t) {}
                    if (t < n)
                        for (var o = t; o < n; o++)
                            !function(t) {
                                l.drawCardInRow(e[t].OrdinalValue, t, function() {
                                    if (t == n - 1 && i)
                                        try {
                                            l.showResult()
                                        } catch (t) {}
                                })
                            }(o);
                    if (5 === n) {
                        var c = l.roomModel.Players;
                        for (var o in c)
                            !function(t) {
                                if (c[t].AccountID === l.currentPlayer.AccountID)
                                    return;
                                var e = c[t]
                                  , i = e.AccountID
                                  , n = e.PlayerStatus
                                  , o = e.IsFold
                                  , s = e.Cards;
                                if (!o && 2 === n)
                                    for (var a = l.drawCardsContainer.children.filter(function(t) {
                                        return t.accountID == i
                                    }), r = 0; r < 2; r++) {
                                        var h = a[r];
                                        h.s = h.scale.x,
                                        h.value = s[r].OrdinalValue,
                                        l.flip(h)
                                    }
                            }(o)
                    }
                } catch (t) {
                    console.log("loi bai ", t)
                }
            }
            ,
            f.moneyRefund = 0,
            f.refund = function(t, e, i, n) {
                f.updatePot(n);
                var o, s = f.getPlayerByAccountId(t);
                !s || e <= 0 || ((o = f).moneyRefund += e,
                s.chipRefund(function() {
                    s.betMoney -= e,
                    s.showMoney(e),
                    s.updateBalance(i),
                    o.arrChipBg[s.pos].visible = !1
                }))
            }
            ,
            f.showResult = function(n) {
                void 0 === n && (n = !1);
                var u = f
                  , t = f.roomModel
                  , a = t.Players
                  , r = t.ListWinnerIDs
                  , d = 0
                  , p = 0;
                for (var e in a)
                    !function(t) {
                        var e = a[t];
                        if (2 !== e.PlayerStatus)
                            return;
                        2 === e.PlayerStatus && p++,
                        e.IsFold && d++;
                        var i = u.getPlayerByAccountId(e.AccountID);
                        if (!i)
                            return;
                        if (n)
                            return i.reset();
                        if (0 < e.Result.Revenue && !n) {
                            if (f.sound)
                                try {
                                    PIXI.sound.play("sound_PS_bigpot_win")
                                } catch (t) {}
                            if (f.sound)
                                try {
                                    PIXI.sound.play("sound_PS_smallpot_win")
                                } catch (t) {}
                            if (f.sound)
                                try {
                                    PIXI.sound.play("sound_chips_moving_to_winner")
                                } catch (t) {}
                            TweenMax.to(i, 2, {
                                data: "poker-tournament",
                                onComplete: function() {
                                    i.showWin()
                                }
                            })
                        }
                    }(e);
                if (!n) {
                    for (var h = 0, e = 0; e < u.drawCardsContainer.children.length; e++)
                        u.drawCardsContainer.getChildAt(e).tint = 10066329;
                    for (var i in r)
                        !function(t) {
                            var l = r[t]
                              , e = u.getPlayerByAccountId(l);
                            if (!e)
                                return;
                            var c = a.filter(function(t) {
                                return t.AccountID == l
                            })[0]
                              , i = c.Result.Refund
                              , n = c.Chips
                              , o = Number((3e3 + 4e3 * h) / 1e3);
                            TweenMax.to(e, o, {
                                data: "poker-tournament",
                                onComplete: function() {
                                    try {
                                        u.hideEffect();
                                        var t = c.BestHandInfo
                                          , e = c.BestHandInfo.Name
                                          , n = c.Cards
                                          , o = t.CardValues[t.CardValues.length - 2]
                                          , i = t.CardValues[t.CardValues.length - 1]
                                          , s = u.drawCardsContainer.children.filter(function(t) {
                                            return t.accountID == l
                                        })
                                          , a = u.drawCardsContainer.children.filter(function(t) {
                                            return "public" == t.type
                                        });
                                        0 < e && 0 < i.length && d < p - 1 && u.showSpecialResult(e);
                                        for (var r = 0; r < u.drawCardsContainer.children.length; r++)
                                            u.drawCardsContainer.getChildAt(r).tint = 10066329;
                                        if (0 == o.length && 0 == i.length)
                                            for (r = 0; r < u.drawCardsContainer.children.length; r++) {
                                                var h = u.drawCardsContainer.getChildAt(r);
                                                h && h.accountID && h.accountID == l && (h.tint = 16777215)
                                            }
                                        else {
                                            for (r = 0; r < o.length; r++)
                                                !function(e) {
                                                    var t, i = n.find(function(t) {
                                                        return t.OrdinalValue == o[e]
                                                    });
                                                    i && (t = n.indexOf(i),
                                                    s[t].tint = 16777215)
                                                }(r);
                                            for (r = 0; r < i.length; r++)
                                                !function(e) {
                                                    var t = a.find(function(t) {
                                                        return t.value == i[e]
                                                    });
                                                    t && (t.tint = 16777215)
                                                }(r)
                                        }
                                    } catch (t) {}
                                }
                            });
                            var s = Number((2600 + 4e3 * h) / 1e3);
                            e.chipToPlayer(s, function() {
                                e.showMoney(i),
                                e.updateBalance(n),
                                u.updatePot()
                            }),
                            h++
                        }(i)
                }
            }
            ,
            f.showSpecialResult = function(t) {
                if (f.txtResult.visible = !1,
                f.frameSpecialResult)
                    try {
                        f.frameSpecialResult.destroy({
                            children: !0
                        })
                    } catch (t) {}
                if (t)
                    if (Number(t) < 5) {
                        var e = "";
                        switch (t) {
                        case 0:
                            e = "";
                            break;
                        case 1:
                            e = "ca30";
                            break;
                        case 2:
                            e = "ca14";
                            break;
                        case 3:
                            e = "ca15";
                            break;
                        case 4:
                            e = "ca16"
                        }
                        "" != e && (f.txtResult.getChildAt(0).text = Message.GetMessage(e),
                        f.txtResult.visible = !0)
                    } else {
                        var i, n, o;
                        switch (t) {
                        case 5:
                            i = "poker.sanh",
                            n = f.frameSanh[f.lang];
                            break;
                        case 6:
                            i = "poker.thung",
                            n = f.frameThung[f.lang];
                            break;
                        case 7:
                            i = "poker.culu",
                            n = f.frameCuLu[f.lang];
                            break;
                        case 8:
                            i = "poker.tuquy",
                            n = f.frameTuQuy[f.lang];
                            break;
                        default:
                            i = "poker.thungPS",
                            n = f.frameThungPhaSanh[f.lang]
                        }
                        "" != i && (o = "vi" === f.lang ? framesFromTilesetImage(i, 560, 60) : n.map(function(t) {
                            return frame(TextureCache[i], t[0], t[1], t[2], t[3])
                        }),
                        f.frameSpecialResult = new AnimatedSprite(o),
                        f.frameSpecialResult.play(),
                        f.frameSpecialResult.animationSpeed = .5,
                        f.frameSpecialResult.anchor.set(.5),
                        f.frameSpecialResult.position.y = 65,
                        f.frameContainer.addChild(f.frameSpecialResult),
                        f.frameSpecialResult.visible = !0)
                    }
                else
                    f.frameSpecialResult && (f.frameSpecialResult.visible = !1)
            }
            ,
            f.updatePot = function(t) {
                if (void 0 === t && (t = -1),
                t <= 0) {
                    if (!f.potChip)
                        return;
                    try {
                        f.chipContainer.removeChild(f.potChip),
                        f.potChip = null
                    } catch (t) {}
                } else
                    f.potChip ? f.potChip.getChildAt(1).text = f.formatNumber(t) : (f.potChip = new Sprite(f.assets.loader.resources.commonTourPoker.textures["bg-chip.png"]),
                    f.potChip.anchor.set(0, .5),
                    f.potChip.position.set(f.dealerChipPos[0], f.dealerChipPos[1]),
                    f.potChip.visible = !1,
                    f.potChip.addChild(new Sprite(f.assets.loader.resources.commonTourPoker.textures["chip-in-game.png"])),
                    f.potChip.children[0].anchor.set(0, .5),
                    f.potChip.children[0].scale.set(.6),
                    f.potChip.children[0].x = 5,
                    f.potChip.addChild(new PIXI.Text(f.formatNumber(t),{
                        fontFamily: f.fontFaceBold,
                        fontSize: 14,
                        fill: ["yellow"]
                    })),
                    f.potChip.children[1].x = 30,
                    f.potChip.children[1].anchor.set(0, .5),
                    f.chipContainer.addChild(f.potChip)),
                    f.potChip.visible = !0,
                    f.potChip.Chips = t
            }
            ,
            f.clearForNewGame = function(t) {
                try {
                    f.moneyRefund = 0;
                    try {
                        f.showResult(!0)
                    } catch (t) {}
                    f.updatePot(-1),
                    f.removeDrawCard(),
                    f.deleteTween(),
                    f.checkPlayer(),
                    f.showSpecialResult(),
                    f.hideEffect(),
                    f.btnFlip.visible = !1;
                    try {
                        f.frameSpecialResult.destroy({
                            children: !0
                        })
                    } catch (t) {}
                    if (f.txtResult.visible = !1,
                    f.barContainer && f.barContainer.clearDragging(),
                    f.initChipBg(),
                    t) {
                        var e = t.Players;
                        for (var i in e) {
                            var n = f.getPlayerByAccountId(e[i].AccountID);
                            if (n)
                                try {
                                    n.reset()
                                } catch (t) {}
                        }
                    }
                } catch (t) {}
            }
            ,
            f.size = t.size,
            f.target = t.target,
            f.assets = new a.default,
            f.currencyId = t.currencyId,
            f.lang = Message.GetLanguageCode(),
            f.hubUrl = t.hubUrl,
            f.token = t.token,
            f.ready = !1,
            f.isLoad = !1,
            t.tourId && (f.tourId = t.tourId),
            t.roomId && (f.roomId = t.roomId),
            t.showInfo && (f.showInfo = t.showInfo),
            f
        }
        e.games = c
    }
    , function(t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var n = i(1)
          , o = (s.prototype.init = function() {
            this.connect(),
            this.listen()
        }
        ,
        s.prototype.connect = function() {
            var t = this;
            this.connection = (new n.HubConnectionBuilder).withUrl(this.url, {
                accessTokenFactory: function() {
                    return t.token
                },
                skipNegotiation: !0,
                transport: n.HttpTransportType.WebSockets
            }).build(),
            this.connection.serverTimeoutInMilliseconds = 1e5,
            this.connection.start().then(function() {
                console.log("connected"),
                t.game.connected || (t.game.connected = !0,
                t.joinTour(t.game.tourId, t.game.currencyId))
            }).catch(function(t) {
                return console.error(t)
            })
        }
        ,
        s.prototype.listen = function() {
            var s = this;
            this.connection.on("JoinRoom", function(t) {
                console.log("JoinRoom", t),
                s.game && s.game.joinRoom(t)
            }),
            this.connection.on("PlayerJoinGame", function(t, e) {
                if (null == t || null == e || null != e && !e.IsOpen) {
                    try {
                        s.game.delete()
                    } catch (t) {}
                    window.location.hash = "#/tournament/poker/"
                } else
                    null != e && s.game && s.game.joinGame(t, e)
            }),
            this.connection.on("PlayerJoinRoom", function(t) {
                console.log("PlayerJoinRoom", t),
                s.game && s.game.playerJoin(t)
            }),
            this.connection.on("PlayerLeave", function(t) {
                console.log("PlayerLeave", t),
                s.game && s.game.playerLeave(t)
            }),
            this.connection.on("UpdateConnectionStatus", function(t) {
                console.log("UpdateConnectionStatus", t),
                s.game && s.game.updateConnectionStatus(t)
            }),
            this.connection.on("PlayerBlind", function(t) {
                s.game && s.game.playerBlind(t)
            }),
            this.connection.on("TaxAnt", function(t) {
                s.game && s.game.taxAnt(t)
            }),
            this.connection.on("Division", function(t, e) {
                console.log("Division", t, e),
                s.game && s.game.division(e)
            }),
            this.connection.on("ChangePhrase", function(t, e) {
                console.log("ChangePhrase" + e.Phrase, t, e),
                s.game && s.game.changePhrase(t, e)
            }),
            this.connection.on("StartActions", function(t, e, i) {
                s.game && s.game.startActions(t, e, i)
            }),
            this.connection.on("FinishActions", function(t, e, i, n, o) {
                s.game && s.game.finishActions(t, e, i, n, o)
            }),
            this.connection.on("PlayerJoinAnotherTable", function(t) {
                console.log("PlayerJoinAnotherTable", t),
                s.game && s.game.playerJoinAnotherTable(t)
            }),
            this.connection.on("refund", function(t, e, i, n) {
                s.game && s.game.refund(t, e, i, n)
            }),
            this.connection.on("ChangeDealer", function(t, e) {
                s.game && s.game.changeDealer(e)
            }),
            this.connection.on("WinJackPot", function(t) {
                s.game && s.game.winJackPot(t)
            }),
            this.connection.on("TourPaused", function(t) {
                console.log("TourPaused", t),
                s.game && s.game.tourPaused(t)
            }),
            this.connection.on("TourFinished", function(t) {
                s.game && s.game.tourFinished(t)
            }),
            this.connection.on("TourInfo", function(t) {
                s.game && s.game.updateTableInfo(t)
            }),
            this.connection.on("playerFlipCards", function(t, e) {
                console.log("playerFlipCards", t, e),
                s.game && s.game.flipCard(t, e)
            }),
            this.connection.on("recieveMessage", function(t, e, i) {
                s.game && s.game.recieveMessage(t, e, i)
            }),
            this.connection.on("Disconnect", function(t) {
                console.log("Disconnect", t),
                s.game && s.game.disconnect(t)
            }),
            this.connection.on("ErrorMessage", function(t) {
                console.log("ErrorMessage", t),
                s.game && s.game.errorMessage(t)
            })
        }
        ,
        s.prototype.joinTour = function(t, e) {
            this.connection.invoke("PlayNow", t, e).then(function(t) {
                console.log("PlayNow", t)
            })
        }
        ,
        s.prototype.joinViewer = function(t, e) {
            this.connection.invoke("JoinViewer", t, e).then(function(t) {
                console.log("JoinViewer", t)
            })
        }
        ,
        s.prototype.playerRegister = function(t) {
            this.connection.invoke("PlayerRegister", t).then(function(t) {
                console.log("PlayerRegister", t)
            })
        }
        ,
        s.prototype.checkTournament = function(t) {
            this.connection.invoke("CheckTournament", t).then(function(t) {
                console.log("CheckTournament", t)
            })
        }
        ,
        s.prototype.registerLeave = function(t) {
            this.connection.invoke("RegisterLeave", t).then(function(t) {
                console.log("RegisterLeave", t)
            })
        }
        ,
        s.prototype.bet = function(t, e, i) {
            this.connection.invoke("Bet", t, e, i).then(function(t) {})
        }
        ,
        s.prototype.sendMessage = function(t) {
            this.connection.invoke("SendMessage", t).then(function(t) {
                console.log("SendMessage", t)
            })
        }
        ,
        s.prototype.flipCards = function(t, e) {
            this.connection.invoke("FlipCards", t, e).then(function(t) {})
        }
        ,
        s.prototype.getTournamentInfo = function(t) {
            this.connection.invoke("GetTournamentInfo", t).then(function(t) {})
        }
        ,
        s.prototype.auto = function(t, e, i) {
            this.connection.invoke("RegisterAuto", t, i, e).then(function(t) {})
        }
        ,
        s);
        function s(t, e, i) {
            this.url = e,
            this.token = t,
            this.game = i,
            this.init()
        }
        e.default = o
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        ), r = this && this.__spreadArrays || function() {
            for (var t = 0, e = 0, i = arguments.length; e < i; e++)
                t += arguments[e].length;
            for (var n = Array(t), o = 0, e = 0; e < i; e++)
                for (var s = arguments[e], a = 0, r = s.length; a < r; a++,
                o++)
                    n[o] = s[a];
            return n
        }
        ;
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var s, a = i(0), h = (s = a.Assets,
        o(l, s),
        l);
        function l() {
            var a = s.call(this) || this;
            return a.assets = [{
                id: "assetsTourPoker",
                src: "/tournament/poker/assets/poker-tour.json"
            }, {
                id: "baiTourPoker",
                src: "/assets/images/common/bai.json"
            }, {
                id: "commonTourPoker",
                src: "/assets/images/common/common.json"
            }, {
                id: "dealerTourPoker",
                src: "/assets/images/common/dealer.json"
            }, {
                id: "fireworkTourPoker",
                src: "/assets/images/common/firework.json"
            }, {
                id: "finalTablePoker",
                src: "/tournament/poker/assets/final_table.png"
            }, {
                id: "win.effect",
                src: "/assets/images/common/win.png"
            }, {
                id: "sound_bg",
                src: "/tournament/poker/sound/bg.mp3"
            }, {
                id: "sound_button_all_in",
                src: "/tournament/poker/sound/button_all_in.mp3"
            }, {
                id: "sound_button_call",
                src: "/tournament/poker/sound/button_call.mp3"
            }, {
                id: "sound_button_check",
                src: "/tournament/poker/sound/button_check.mp3"
            }, {
                id: "sound_button_fold",
                src: "/tournament/poker/sound/button_fold.mp3"
            }, {
                id: "sound_button_Raise",
                src: "/tournament/poker/sound/button_Raise.mp3"
            }, {
                id: "sound_card_deal_1",
                src: "/tournament/poker/sound/card_deal_1.mp3"
            }, {
                id: "sound_card_deal_2",
                src: "/tournament/poker/sound/card_deal_2.mp3"
            }, {
                id: "sound_card_deal_3",
                src: "/tournament/poker/sound/card_deal_3.mp3"
            }, {
                id: "sound_card_deal_4",
                src: "/tournament/poker/sound/card_deal_4.mp3"
            }, {
                id: "sound_chips_moving_to_winner",
                src: "/tournament/poker/sound/chips_moving_to_winner.mp3"
            }, {
                id: "sound_collect_chips",
                src: "/tournament/poker/sound/collect_chips.mp3"
            }, {
                id: "sound_count_down",
                src: "/tournament/poker/sound/count_down.mp3"
            }, {
                id: "sound_Jackpot",
                src: "/tournament/poker/sound/Jackpot.mp3"
            }, {
                id: "sound_join_room",
                src: "/tournament/poker/sound/join_room.mp3"
            }, {
                id: "sound_leave_room",
                src: "/tournament/poker/sound/leave_room.mp3"
            }, {
                id: "sound_menu-click",
                src: "/tournament/poker/sound/menu-click.mp3"
            }, {
                id: "sound_PS_bigpot_win",
                src: "/tournament/poker/sound/PS_bigpot_win.mp3"
            }, {
                id: "sound_PS_smallpot_win",
                src: "/tournament/poker/sound/PS_smallpot_win.mp3"
            }, {
                id: "sound_Turn",
                src: "/tournament/poker/sound/Turn.mp3"
            }],
            a.loadAssets = function() {
                var t = Message.GetLanguageCode();
                if (t) {
                    try {
                        var e = {
                            id: "poker.culu",
                            src: "/assets/images/poker/cu-lu-" + t + ".png"
                        }
                          , i = {
                            id: "poker.sanh",
                            src: "/assets/images/poker/sanh-" + t + ".png"
                        }
                          , n = {
                            id: "poker.thung",
                            src: "/assets/images/poker/thung-" + t + ".png"
                        }
                          , o = {
                            id: "poker.thungPS",
                            src: "/assets/images/poker/thung-pha-sanh-" + t + ".png"
                        }
                          , s = {
                            id: "poker.tuquy",
                            src: "/assets/images/poker/tu-quy-" + t + ".png"
                        };
                        a.assets = r(a.assets, [s, e, i, n, o])
                    } catch (t) {
                        console.error(t)
                    }
                    a.add(a.assets)
                } else
                    a.add(a.assets)
            }
            ,
            a.loadAssets(),
            a
        }
        e.default = h
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        );
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var s, a = i(0), r = (s = PIXI.Container,
        o(h, s),
        h.prototype.initAvatar = function() {
            var t = "0" !== this.player.Account.AvatarID ? this.player.Account.AvatarID : this.player.Account.AccountID % 30;
            this.avatar = PIXI.Sprite.fromImage("/assets/images/avatar/" + t + ".png"),
            this.avatar.anchor.set(.5),
            this.avatar.width = this.w,
            this.avatar.height = this.h,
            this.avatar.interactive = !0,
            this.avatar.buttonMode = !0,
            this.avatar.position.set(this.xy[0], this.xy[1]),
            this.addChild(this.avatar)
        }
        ,
        h.prototype.initBox = function() {
            this.box = new PIXI.Sprite(this.game.assets.loader.resources.commonTourPoker.textures["bg-avatar.png"]),
            this.box.anchor.set(.5),
            this.box.position.set(this.avatar.x, this.avatar.y + this.avatar.height / 2 + this.box.height / 2 + 5),
            this.addChild(this.avatar, this.box),
            this.txtUserName = new PIXI.Text(this.player.Account.NickName.substring(0, 15) + (15 < this.player.Account.NickName.length ? "..." : ""),{
                fontFamily: "Arial",
                fontSize: 11,
                fontWeight: "bold",
                fill: ["white"],
                padding: 10
            }),
            this.txtUserName.anchor.set(.5),
            this.txtUserName.position.set(0, -7),
            this.txtMoney = new PIXI.Text(a.Util.ParseMoney(this.player.Chips),{
                fontFamily: "Arial",
                fontSize: 12,
                fontWeight: "bold",
                fill: ["yellow"],
                padding: 10
            }),
            this.txtMoney.anchor.set(.5),
            this.txtMoney.position.set(0, 7),
            this.box.addChild(this.txtUserName, this.txtMoney)
        }
        ,
        h.prototype.initStatus = function() {
            this.disStatus = new PIXI.Sprite(this.game.assets.loader.resources.commonTourPoker.textures["ic-disconnect.png"]),
            this.disStatus.anchor.set(.5),
            this.disStatus.position.set(this.avatar.x - this.avatar.width / 2, this.avatar.y - 21),
            this.disStatus.visible = !1,
            this.leaveStatus = new PIXI.Sprite(this.game.assets.loader.resources.commonTourPoker.textures["ic-quit.png"]),
            this.leaveStatus.anchor.set(.5),
            this.leaveStatus.position.set(this.avatar.x - this.avatar.width / 2, this.avatar.y + 21),
            this.leaveStatus.visible = !1,
            this.addChild(this.disStatus, this.leaveStatus)
        }
        ,
        h.prototype.updateBalance = function(t) {
            this.txtMoney.text = a.Util.ParseMoney(t),
            this.balance = t
        }
        ,
        h.prototype.updateStatus = function(t) {
            1 === t ? this.isUnLeave || this.isLeave ? (this.isUnLeave = !1,
            this.leaveStatus.visible = !1,
            this.isLeave = !1,
            this.accountId === this.game.currentPlayer.AccountID && this.game.showStatus(Message.GetMessage("me9"), 2e3)) : this.disStatus.visible = !1 : 2 === t ? (this.isLeave = !0,
            this.leaveStatus.visible = !0,
            this.accountId === this.game.currentPlayer.AccountID && this.game.showStatus(Message.GetMessage("me8"), 2e3)) : 0 === t && (this.disStatus.visible = !0)
        }
        ,
        h.prototype.updateTax = function(t) {
            var e = new Sprite(this.game.assets.loader.resources.commonTourPoker.textures["chip-in-game.png"])
              , i = this.game.dealerChipPos;
            !t || t <= 0 || (e.anchor.set(0, .5),
            e.scale.set(.01),
            e.position.set(this.avatar.x, this.avatar.y),
            this.showMoney(-t),
            this.chipContainer.addChild(e),
            this.chipContainer.visible = !0,
            0 < t && (TweenMax.to(e, .5, {
                data: "poker-tournament",
                x: i[0] + 5,
                y: i[1]
            }),
            TweenMax.to(e.scale, .5, {
                data: "poker-tournament",
                x: .6,
                y: .6
            }),
            setTimeout(function() {
                e.visible = !1
            }, 500)))
        }
        ,
        h.prototype.updateBetting = function(t) {
            var e = new Sprite(this.game.assets.loader.resources.commonTourPoker.textures["chip-in-game.png"])
              , i = this.game.chipPos[this.pos]
              , n = this;
            if (!t || t <= 0)
                return this.betMoney = 0,
                this.chipContainer.removeChildren(),
                void (n.game.arrChipBg[n.pos].visible = !1);
            e.anchor.set(0, .5),
            e.scale.set(.01),
            e.position.set(this.avatar.x, this.avatar.y),
            this.chipContainer.addChild(e),
            this.chipContainer.visible = !0,
            0 < t && (TweenMax.to(e, .5, {
                data: "poker-tournament",
                x: i[0] + 5,
                y: i[1]
            }),
            TweenMax.to(e.scale, .5, {
                data: "poker-tournament",
                x: .6,
                y: .6
            }),
            setTimeout(function() {
                e.visible = !1,
                n.game.arrChipBg[n.pos].visible = !0,
                n.game.arrChipBg[n.pos].children[1].text = a.Util.ParseMoney(t)
            }, 500)),
            this.betMoney = t
        }
        ,
        h.prototype.showMoney = function(t, e) {
            var i = new PIXI.Text((0 < t ? "+" : "") + a.Util.ParseMoney(t),{
                fontFamily: this.game.fontFaceBold,
                fontSize: 20,
                fill: "yellow"
            });
            i.anchor.set(.5),
            i.position.set(this.avatar.x, this.avatar.y),
            this.effectContainer.addChild(i),
            TweenMax.to(i, 2, {
                data: "poker-tournament",
                y: i.y - 100,
                alpha: 0
            })
        }
        ,
        h.prototype.setRank = function(t) {
            try {
                this.rank.destroy({
                    children: !0
                })
            } catch (t) {}
            var e;
            this.rank = new PIXI.Sprite(this.game.assets.loader.resources.assetsTourPoker.textures[t < 4 ? "rank-" + t + ".png" : "bg-rank.png"]),
            this.rank.anchor.set(.5),
            this.rank.position.set(this.game.rankPos[this.pos][0], this.game.rankPos[this.pos][1]),
            this.addChild(this.rank),
            3 < t && ((e = new PIXI.Text(t,{
                fontFamily: this.game.fontFaceBold,
                fontSize: 13,
                fill: "#fff"
            })).anchor.set(.5),
            this.rank.addChild(e))
        }
        ,
        h);
        function h(t) {
            var a = s.call(this) || this;
            return a.pos = 0,
            a.w = 140,
            a.h = 140,
            a.b = 85,
            a.balance = 0,
            a.isUnLeave = !1,
            a.isLeave = !1,
            a.betMoney = 0,
            a.isFold = !1,
            a.chipEffect = 15,
            a.betInRound = 0,
            a.chipInPhrase = 0,
            a.actionColor = {
                act_check: "bg-green-effect",
                act_bet: "bg-violet-effect",
                act_call: "bg-blue-effect",
                act_raise: "bg-violet-effect",
                act_fold: "bg-magenta-effect",
                act_allin: "bg-orange-effect"
            },
            a.actionLang = {
                act_check: "ca06",
                act_bet: "ca04",
                act_call: "ca02",
                act_raise: "ca01",
                act_fold: "ca03",
                act_allin: "ca05"
            },
            a.showWin = function() {
                var t = new AnimatedSprite(a.game.framesWin);
                t.anchor.set(.5),
                0 == a.pos ? (t.scale.set(1.18),
                t.y += 10) : (t.scale.set(1.05),
                t.y += 8),
                t.position.set(a.avatar.x, a.avatar.y + 10),
                t.animationSpeed = .5,
                t.play(),
                a.effectContainer.addChild(t);
                var e = new Sprite(a.game.assets.loader.resources.commonTourPoker.textures["thang-" + a.game.lang + ".png"]);
                e.anchor.set(.5),
                e.scale.set(0 === a.pos ? .9 : .8),
                e.position.set(a.avatar.x, a.avatar.y + a.avatar.height / 2 - e.height / 2),
                a.effectContainer.addChild(e)
            }
            ,
            a.showLose = function() {
                var t = new Sprite(a.game.assets.loader.resources.commonTourPoker.textures["bg-black-effect.png"]);
                t.anchor.set(.5);
                var e = new Sprite(a.game.assets.loader.resources.commonTourPoker.textures["thua-" + a.game.lang + ".png"]);
                e.anchor.set(.5),
                t.addChild(e),
                t.scale.set(0 === a.pos ? .9 : .8),
                t.position.set(a.avatar.x, a.avatar.y + a.avatar.height / 2 - t.height / 2),
                a.effectContainer.addChild(t)
            }
            ,
            a.reset = function() {
                if (a.effectContainer)
                    try {
                        a.effectContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                if (a.actionContainer)
                    try {
                        a.actionContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                if (a.chipContainer)
                    try {
                        a.chipContainer.destroy({
                            children: !0
                        })
                    } catch (t) {}
                a.effectContainer = new Container,
                a.actionContainer = new Container,
                a.chipContainer = new Container,
                a.game.resultContainer.addChild(a.chipContainer, a.actionContainer, a.effectContainer),
                a.betMoney = 0,
                a.isFold = !1,
                a.updateAvatarFold(!1),
                a.betInRound = 0
            }
            ,
            a.fold = function() {
                a.isFold = !0,
                a.updateAvatarFold(!0)
            }
            ,
            a.updateAvatarFold = function(t) {
                void 0 === t && (t = !1),
                a.avatar.tint = t ? 10066329 : 16777215
            }
            ,
            a.showAction = function(t) {
                var e, i, n, o;
                t ? (a.actionContainer.visible = !0,
                a.actionContainer.removeChildren(),
                e = a.actionColor[t] + ".png",
                (i = new Sprite(a.game.assets.loader.resources.commonTourPoker.textures[e])).anchor.set(.5),
                i.scale.set(0 === a.pos ? .9 : .8),
                i.position.set(a.avatar.x, a.avatar.y + a.avatar.height / 2 - i.height / 2),
                n = Message.GetMessage(a.actionLang[t]),
                (o = new PIXI.Text(n.toUpperCase(),{
                    fontFamily: a.game.fontFaceBold,
                    fontSize: 16,
                    fill: "#fff",
                    fontStyle: "italic",
                    padding: 50
                })).anchor.set(.5),
                o.position.set(a.avatar.x, a.avatar.y + a.avatar.height / 2 - i.height / 2),
                a.actionContainer.addChild(i, o)) : a.actionContainer.visible = !1
            }
            ,
            a.chiptoDealer = function(i) {
                var n = a
                  , o = a.game.chipPos[a.pos];
                a.chipContainer.visible = !0;
                var s = a.game.dealerChipPos;
                try {
                    n.betMoney = 0,
                    n.updateBetting(0);
                    for (var t = 0; t < n.chipEffect; t++)
                        !function(t) {
                            var e = new Sprite(a.game.assets.loader.resources.commonTourPoker.textures["chip-in-game.png"]);
                            e.anchor.set(.5),
                            e.scale.set(.6),
                            e.position.set(o[0] + 5, o[1]),
                            a.chipContainer.addChild(e),
                            TweenMax.to(e.scale, 1, {
                                data: "poker-tournament",
                                x: 1,
                                y: 1,
                                delay: .05 * t,
                                alpha: 0
                            }),
                            TweenMax.to(e, 1, {
                                data: "poker-tournament",
                                x: s[0] + 50,
                                y: s[1],
                                delay: .05 * t,
                                alpha: 0,
                                onComplete: function() {
                                    e.visible = !1,
                                    t == n.chipEffect - 7 && "function" == typeof i && (n.game.arrChipBg[n.pos].visible = !1,
                                    i())
                                }
                            })
                        }(t)
                } catch (t) {}
            }
            ,
            a.chipRefund = function(i) {
                var n = a
                  , o = a.game.chipPos[a.pos];
                a.chipContainer.visible = !0;
                a.game.dealerChipPos;
                try {
                    for (var t = 0; t < n.chipEffect; t++)
                        !function(t) {
                            var e = new Sprite(a.game.assets.loader.resources.commonTourPoker.textures["chip-in-game.png"]);
                            e.anchor.set(.5),
                            e.scale.set(.6),
                            e.position.set(o[0] + 5, o[1]),
                            a.chipContainer.addChild(e),
                            TweenMax.to(e, 0, {
                                onComplete: function() {
                                    TweenMax.to(e.scale, 1, {
                                        data: "poker-tournament",
                                        x: 1,
                                        y: 1,
                                        delay: .05 * t,
                                        alpha: 0
                                    }),
                                    TweenMax.to(e, 1, {
                                        data: "poker-tournament",
                                        x: a.avatar.x,
                                        y: a.avatar.y,
                                        delay: .05 * t,
                                        alpha: 0,
                                        onComplete: function() {
                                            t == n.chipEffect - 7 && "function" == typeof i && i()
                                        }
                                    })
                                }
                            })
                        }(t)
                } catch (t) {
                    console.error(t)
                }
            }
            ,
            a.chipToPlayer = function(i, n) {
                void 0 === i && (i = 0);
                var o = a;
                a.game.chipPos[a.pos];
                a.chipContainer.visible = !0;
                var s = a.game.dealerChipPos;
                try {
                    for (var t = 0; t < o.chipEffect; t++)
                        !function(t) {
                            var e = new Sprite(a.game.assets.loader.resources.commonTourPoker.textures["chip-in-game.png"]);
                            e.anchor.set(.5),
                            e.scale.set(.6),
                            e.position.set(s[0] + 50, s[1]),
                            a.chipContainer.addChild(e),
                            TweenMax.to(e, i, {
                                onComplete: function() {
                                    TweenMax.to(e.scale, 1, {
                                        data: "poker-tournament",
                                        x: 1,
                                        y: 1,
                                        delay: .05 * t,
                                        alpha: 0
                                    }),
                                    TweenMax.to(e, 1, {
                                        data: "poker-tournament",
                                        x: a.avatar.x,
                                        y: a.avatar.y,
                                        delay: .05 * t,
                                        alpha: 0,
                                        onComplete: function() {
                                            t == o.chipEffect - 7 && "function" == typeof n && n()
                                        }
                                    })
                                }
                            })
                        }(t)
                } catch (t) {
                    console.error(t)
                }
            }
            ,
            a.pos = t.position,
            a.player = t.player,
            a.chipInPhrase = t.player.Chips,
            a.accountId = t.player.AccountID,
            a.xy = t.xy,
            a.game = t.game,
            t.w && (a.w = t.w),
            t.h && (a.h = t.h),
            t.b && (a.b = t.b),
            a.chipContainer = new Container,
            a.effectContainer = new Container,
            a.actionContainer = new Container,
            a.initAvatar(),
            a.initBox(),
            a.initStatus(),
            console.log("new ", a.pos, a.player),
            a.reset(),
            a
        }
        e.default = r
    }
    , function(t, e, i) {
        "use strict";
        var n, o, s, a;
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
        e.variable = e.EPokerAutoAction = e.EPokerPhrases = e.EPlayerStatus = e.EPokerActionName = void 0,
        (n = e.EPokerActionName || (e.EPokerActionName = {}))[n.Waiting = -1] = "Waiting",
        n[n.StartGame = 1e3] = "StartGame",
        n[n.Check = 1] = "Check",
        n[n.Bet = 2] = "Bet",
        n[n.Call = 3] = "Call",
        n[n.Raise = 4] = "Raise",
        n[n.Fold = 5] = "Fold",
        n[n.AllIn = 6] = "AllIn",
        n[n.Flip = 7] = "Flip",
        (o = e.EPlayerStatus || (e.EPlayerStatus = {}))[o.Registered = 0] = "Registered",
        o[o.Waiting = 1] = "Waiting",
        o[o.Playing = 2] = "Playing",
        o[o.OutGame = 3] = "OutGame",
        (s = e.EPokerPhrases || (e.EPokerPhrases = {}))[s.Waiting = 0] = "Waiting",
        s[s.PreFlop = 2] = "PreFlop",
        s[s.Flop = 3] = "Flop",
        s[s.Turn = 4] = "Turn",
        s[s.River = 5] = "River",
        s[s.Showdown = 6] = "Showdown",
        s[s.AfterShowdow = 7] = "AfterShowdow",
        (a = e.EPokerAutoAction || (e.EPokerAutoAction = {}))[a.NONE = 0] = "NONE",
        a[a.CHECKORFOLD = 1] = "CHECKORFOLD",
        a[a.CALL = 2] = "CALL",
        a[a.CHECK = 3] = "CHECK",
        a[a.FOLD = 4] = "FOLD";
        var r = (h.prototype.formatTimeRemain = function(t) {
            return Math.floor(t / 60) + ":" + (t % 60 < 10 ? "0" + t % 60 : t % 60)
        }
        ,
        h);
        function h() {
            this.fontRobotoCondensedRegular = "RobotoCondensed-Regular",
            this.fontRobotoCondensedBold = "RobotoCondensed-Bold",
            this.fontFaceBold = "Roboto-Bold",
            this.fontFace = "Roboto-Light",
            this.cardsMap = ["2bich.png", "3bich.png", "4bich.png", "5bich.png", "6bich.png", "7bich.png", "8bich.png", "9bich.png", "10bich.png", "11bich.png", "12bich.png", "13bich.png", "1bich.png", "2tep.png", "3tep.png", "4tep.png", "5tep.png", "6tep.png", "7tep.png", "8tep.png", "9tep.png", "10tep.png", "11tep.png", "12tep.png", "13tep.png", "1tep.png", "2do.png", "3do.png", "4do.png", "5do.png", "6do.png", "7do.png", "8do.png", "9do.png", "10do.png", "11do.png", "12do.png", "13do.png", "1do.png", "2co.png", "3co.png", "4co.png", "5co.png", "6co.png", "7co.png", "8co.png", "9co.png", "10co.png", "11co.png", "12co.png", "13co.png", "1co.png", "joker.png"],
            this.accountId = 0,
            this.ready = !1,
            this.connected = !1,
            this.divideCard = [],
            this.divisionCard = [],
            this.cardDealerPos = {
                x: -200,
                y: -20,
                s: 1.2
            },
            this.tableCon = null,
            this.rankPos = [[-350, 210], [-580, 0], [-340, -195], [330, -195], [580, 0], [325, 200]],
            this.playerPos = [[-260, 150], [-500, -45], [-260, -240], [250, -240], [500, -45], [240, 150]],
            this.players = [null, null, null, null, null, null],
            this.chipPos = [[-190, 90], [-435, -50], [-180, -145], [70, -145], [330, -50], [70, 145]],
            this.moneyText = ["COIN", "GAM"],
            this.virtualPos = [],
            this.cardOri = {
                width: 68,
                height: 92,
                rotation: 10
            },
            this.cardOwn = {
                width: 96,
                height: 130
            },
            this.cardOther = {
                width: 46,
                height: 63
            },
            this.cardDivisionPos = [[-150, 200], [-395, 0], [-155, -200], [145, -200], [395, 0], [135, 200]],
            this.cardPos = [[-85, 180], [-385, 10], [-150, -200], [150, -200], [405, 10], [145, 200]],
            this.dealerChipPos = [-50, -135],
            this.betMin = 0,
            this.betMax = 0,
            this.actionResult = ["", "act_check", "act_bet", "act_call", "act_raise", "act_fold", "act_allin"],
            this.framesThungVi = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesThungEn = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesThungZh = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesThungKm = [[1, 1, 557, 72, 0, 0, 0], [1, 75, 557, 72, 0, 0, 0], [560, 1, 557, 72, 0, 0, 0], [1119, 1, 557, 72, 0, 0, 0], [1, 149, 557, 72, 0, 0, 0], [560, 75, 557, 72, 0, 0, 0], [1119, 75, 557, 72, 0, 0, 0], [1, 223, 557, 72, 0, 0, 0], [560, 149, 557, 72, 0, 0, 0], [1119, 149, 557, 72, 0, 0, 0], [1, 297, 557, 72, 0, 0, 0], [560, 223, 557, 72, 0, 0, 0], [1119, 223, 557, 72, 0, 0, 0], [1, 371, 557, 72, 0, 0, 0], [560, 297, 557, 72, 0, 0, 0], [1119, 297, 557, 72, 0, 0, 0], [1, 445, 557, 71, 0, 0, -1], [560, 371, 557, 70, 0, 0, -2], [1119, 371, 557, 67, 0, 0, -5], [1119, 440, 557, 66, 0, 0, -6], [560, 443, 557, 64, 0, 0, -8], [1119, 508, 557, 64, 0, 0, -8], [560, 509, 557, 63, 0, 0, -8], [1, 518, 557, 64, 0, 0, -8], [1, 584, 557, 64, 0, 0, -8], [560, 574, 557, 64, 0, 0, -8], [1119, 574, 557, 64, 0, 0, -8], [1, 650, 557, 64, 0, 0, -8], [560, 640, 557, 64, 0, 0, -8], [1119, 640, 557, 64, 0, 0, -8], [1, 716, 557, 64, 0, 0, -8], [560, 706, 557, 64, 0, 0, -8], [1119, 706, 557, 64, 0, 0, -8], [1, 782, 557, 64, 0, 0, -8], [560, 772, 557, 64, 0, 0, -8], [1119, 772, 557, 64, 0, 0, -8], [1, 848, 557, 64, 0, 0, -8], [560, 838, 557, 64, 0, 0, -8], [1119, 838, 557, 64, 0, 0, -8], [1, 914, 557, 64, 0, 0, -8], [560, 904, 557, 64, 0, 0, -8], [1119, 904, 557, 64, 0, 0, -8], [1, 980, 557, 64, 0, 0, -8], [560, 970, 557, 64, 0, 0, -8], [560, 1036, 557, 64, 0, 0, -8], [1119, 970, 557, 64, 0, 0, -8], [1119, 1036, 551, 63, 0, -2, -8], [1, 1046, 3, 3, 0, 0, 0]],
            this.framesThungFr = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.frameThung = {
                vi: this.framesThungVi,
                en: this.framesThungEn,
                zh: this.framesThungZh,
                km: this.framesThungKm,
                fr: this.framesThungFr
            },
            this.framesSanhVi = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesSanhEn = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesSanhZh = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesSanhKm = [[1, 1, 557, 73, 0, 0, 0], [1, 76, 557, 73, 0, 0, 0], [560, 1, 557, 73, 0, 0, 0], [1119, 1, 557, 73, 0, 0, 0], [1, 151, 557, 73, 0, 0, 0], [560, 76, 557, 73, 0, 0, 0], [1119, 76, 557, 73, 0, 0, 0], [1, 226, 557, 73, 0, 0, 0], [560, 151, 557, 73, 0, 0, 0], [1119, 151, 557, 73, 0, 0, 0], [1, 301, 557, 73, 0, 0, 0], [560, 226, 557, 73, 0, 0, 0], [1119, 226, 557, 73, 0, 0, 0], [1, 376, 557, 73, 0, 0, 0], [560, 301, 557, 73, 0, 0, 0], [1119, 301, 557, 73, 0, 0, 0], [1, 451, 557, 72, 0, 0, -1], [560, 376, 557, 71, 0, 0, -2], [1119, 376, 557, 68, 0, 0, -5], [1119, 446, 557, 67, 0, 0, -6], [560, 449, 557, 65, 0, 0, -8], [1119, 515, 557, 65, 0, 0, -8], [560, 516, 557, 65, 0, 0, -8], [1, 525, 557, 65, 0, 0, -8], [1119, 582, 557, 65, 0, 0, -8], [560, 583, 557, 65, 0, 0, -8], [1, 592, 557, 65, 0, 0, -8], [1119, 649, 557, 65, 0, 0, -8], [560, 650, 557, 65, 0, 0, -8], [1, 659, 557, 65, 0, 0, -8], [1119, 716, 557, 65, 0, 0, -8], [560, 717, 557, 65, 0, 0, -8], [1, 726, 557, 65, 0, 0, -8], [1119, 783, 557, 65, 0, 0, -8], [560, 784, 557, 65, 0, 0, -8], [1, 793, 557, 65, 0, 0, -8], [1119, 850, 557, 65, 0, 0, -8], [560, 851, 557, 65, 0, 0, -8], [1, 860, 557, 65, 0, 0, -8], [1119, 917, 557, 65, 0, 0, -8], [560, 918, 557, 65, 0, 0, -8], [1, 927, 557, 65, 0, 0, -8], [1119, 984, 557, 65, 0, 0, -8], [560, 985, 557, 65, 0, 0, -8], [1, 994, 557, 65, 0, 0, -8], [560, 1052, 557, 63, 0, 0, -8], [1119, 1051, 551, 63, 0, -2, -8], [1, 1061, 3, 3, 0, 0, 0]],
            this.framesSanhFr = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.frameSanh = {
                vi: this.framesSanhVi,
                en: this.framesSanhEn,
                zh: this.framesSanhZh,
                km: this.framesSanhKm,
                fr: this.framesSanhFr
            },
            this.framesTuQuyVi = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesTuQuyEn = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesTuQuyZh = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesTuQuyKm = [[1, 1, 557, 71, 0, 0, 0], [1, 74, 557, 71, 0, 0, 0], [560, 1, 557, 71, 0, 0, 0], [1119, 1, 557, 71, 0, 0, 0], [1, 147, 557, 71, 0, 0, 0], [560, 74, 557, 71, 0, 0, 0], [1119, 74, 557, 71, 0, 0, 0], [1, 220, 557, 71, 0, 0, 0], [560, 147, 557, 71, 0, 0, 0], [1119, 147, 557, 71, 0, 0, 0], [1, 293, 557, 71, 0, 0, 0], [560, 220, 557, 71, 0, 0, 0], [1119, 220, 557, 71, 0, 0, 0], [1, 366, 557, 71, 0, 0, 0], [560, 293, 557, 71, 0, 0, 0], [1119, 293, 557, 71, 0, 0, 0], [1, 439, 557, 70, 0, 0, -1], [560, 366, 557, 69, 0, 0, -2], [1119, 366, 557, 66, 0, 0, -5], [1119, 434, 557, 65, 0, 0, -6], [560, 437, 557, 63, 0, 0, -8], [1119, 501, 557, 63, 0, 0, -8], [560, 502, 557, 63, 0, 0, -8], [1, 511, 557, 63, 0, 0, -8], [1119, 566, 557, 63, 0, 0, -8], [560, 567, 557, 63, 0, 0, -8], [1, 576, 557, 63, 0, 0, -8], [1119, 631, 557, 63, 0, 0, -8], [560, 632, 557, 63, 0, 0, -8], [1, 641, 557, 63, 0, 0, -8], [1119, 696, 557, 63, 0, 0, -8], [560, 697, 557, 63, 0, 0, -8], [1, 706, 557, 63, 0, 0, -8], [1119, 761, 557, 63, 0, 0, -8], [560, 762, 557, 63, 0, 0, -8], [1, 771, 557, 63, 0, 0, -8], [1119, 826, 557, 63, 0, 0, -8], [560, 827, 557, 63, 0, 0, -8], [1, 836, 557, 63, 0, 0, -8], [1119, 891, 557, 63, 0, 0, -8], [560, 892, 557, 63, 0, 0, -8], [1, 901, 557, 63, 0, 0, -8], [1119, 956, 557, 63, 0, 0, -8], [560, 957, 557, 63, 0, 0, -8], [1, 966, 557, 63, 0, 0, -8], [1119, 1021, 557, 63, 0, 0, -8], [560, 1022, 551, 63, 0, -2, -8], [1, 1031, 3, 3, 0, 0, 0]],
            this.framesTuQuyFr = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.frameTuQuy = {
                vi: this.framesTuQuyVi,
                en: this.framesTuQuyEn,
                zh: this.framesTuQuyZh,
                km: this.framesTuQuyKm,
                fr: this.framesTuQuyFr
            },
            this.framesCuLuVi = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesCuLuEn = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesCuLuZh = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesCuLuKm = [[1, 1, 557, 80, 0, 0, 0], [1, 83, 557, 80, 0, 0, 0], [1, 165, 557, 80, 0, 0, 0], [1, 247, 557, 80, 0, 0, 0], [1, 329, 557, 80, 0, 0, 0], [1, 411, 557, 80, 0, 0, 0], [1, 493, 557, 80, 0, 0, 0], [1, 575, 557, 80, 0, 0, 0], [1, 657, 557, 80, 0, 0, 0], [1, 739, 557, 80, 0, 0, 0], [1, 821, 557, 80, 0, 0, 0], [1, 903, 557, 80, 0, 0, 0], [1, 985, 557, 80, 0, 0, 0], [1, 1067, 557, 80, 0, 0, 0], [1, 1149, 557, 63, 0, 0, -8], [560, 1, 557, 80, 0, 0, 0], [560, 83, 557, 80, 0, 0, 0], [560, 165, 557, 79, 0, 0, -1], [560, 246, 557, 78, 0, 0, -2], [560, 326, 557, 75, 0, 0, -5], [560, 403, 557, 74, 0, 0, -6], [560, 479, 557, 72, 0, 0, -8], [560, 553, 557, 72, 0, 0, -8], [560, 627, 557, 72, 0, 0, -8], [560, 701, 557, 72, 0, 0, -8], [560, 775, 557, 72, 0, 0, -8], [560, 849, 557, 72, 0, 0, -8], [560, 923, 557, 72, 0, 0, -8], [560, 997, 557, 72, 0, 0, -8], [560, 1071, 557, 72, 0, 0, -8], [560, 1145, 551, 63, 0, -2, -8], [1113, 1145, 3, 3, 0, 0, 0], [1119, 1, 557, 72, 0, 0, -8], [1119, 75, 557, 72, 0, 0, -8], [1119, 149, 557, 72, 0, 0, -8], [1119, 223, 557, 72, 0, 0, -8], [1119, 297, 557, 72, 0, 0, -8], [1119, 371, 557, 72, 0, 0, -8], [1119, 445, 557, 72, 0, 0, -8], [1119, 519, 557, 72, 0, 0, -8], [1119, 593, 557, 72, 0, 0, -8], [1119, 667, 557, 72, 0, 0, -8], [1119, 741, 557, 72, 0, 0, -8], [1119, 815, 557, 72, 0, 0, -8], [1119, 889, 557, 72, 0, 0, -8], [1119, 963, 557, 72, 0, 0, -8], [1119, 1037, 557, 72, 0, 0, -8], [1119, 1111, 557, 72, 0, 0, -8]],
            this.framesCuLuFr = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.frameCuLu = {
                vi: this.framesCuLuVi,
                en: this.framesCuLuEn,
                zh: this.framesCuLuZh,
                km: this.framesCuLuKm,
                fr: this.framesCuLuFr
            },
            this.framesThungPhaSanhVi = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesThungPhaSanhEn = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesThungPhaSanhZh = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.framesThungPhaSanhKm = [[1, 1, 557, 72, 0, 0, 0], [1, 75, 557, 72, 0, 0, 0], [560, 1, 557, 72, 0, 0, 0], [1119, 1, 557, 72, 0, 0, 0], [1, 149, 557, 72, 0, 0, 0], [560, 75, 557, 72, 0, 0, 0], [1119, 75, 557, 72, 0, 0, 0], [1, 223, 557, 72, 0, 0, 0], [560, 149, 557, 72, 0, 0, 0], [1119, 149, 557, 72, 0, 0, 0], [1, 297, 557, 72, 0, 0, 0], [560, 223, 557, 72, 0, 0, 0], [1119, 223, 557, 72, 0, 0, 0], [1, 371, 557, 72, 0, 0, 0], [560, 297, 557, 72, 0, 0, 0], [1119, 297, 557, 72, 0, 0, 0], [1, 445, 557, 71, 0, 0, -1], [560, 371, 557, 70, 0, 0, -2], [1119, 371, 557, 67, 0, 0, -5], [1119, 440, 557, 66, 0, 0, -6], [560, 443, 557, 64, 0, 0, -8], [1119, 508, 557, 64, 0, 0, -8], [560, 509, 557, 63, 0, 0, -8], [1, 518, 557, 64, 0, 0, -8], [1, 584, 557, 64, 0, 0, -8], [560, 574, 557, 64, 0, 0, -8], [1119, 574, 557, 64, 0, 0, -8], [1, 650, 557, 64, 0, 0, -8], [560, 640, 557, 64, 0, 0, -8], [1119, 640, 557, 64, 0, 0, -8], [1, 716, 557, 64, 0, 0, -8], [560, 706, 557, 64, 0, 0, -8], [1119, 706, 557, 64, 0, 0, -8], [1, 782, 557, 64, 0, 0, -8], [560, 772, 557, 64, 0, 0, -8], [1119, 772, 557, 64, 0, 0, -8], [1, 848, 557, 64, 0, 0, -8], [560, 838, 557, 64, 0, 0, -8], [1119, 838, 557, 64, 0, 0, -8], [1, 914, 557, 64, 0, 0, -8], [560, 904, 557, 64, 0, 0, -8], [1119, 904, 557, 64, 0, 0, -8], [1, 980, 557, 64, 0, 0, -8], [560, 970, 557, 64, 0, 0, -8], [560, 1036, 557, 64, 0, 0, -8], [1119, 970, 557, 64, 0, 0, -8], [1119, 1036, 551, 63, 0, -2, -8], [1, 1046, 3, 3, 0, 0, 0]],
            this.framesThungPhaSanhFr = [[1, 1, 3, 3, 0, 0, 0], [6, 1, 551, 60, 0, -2, 0], [559, 1, 557, 60, 0, 0, 0], [1118, 1, 557, 60, 0, 0, 0], [1, 63, 557, 60, 0, 0, 0], [560, 63, 557, 60, 0, 0, 0], [1119, 63, 557, 60, 0, 0, 0], [1, 125, 557, 60, 0, 0, 0], [560, 125, 557, 60, 0, 0, 0], [1119, 125, 557, 60, 0, 0, 0], [1, 187, 557, 60, 0, 0, 0], [560, 187, 557, 60, 0, 0, 0], [1119, 187, 557, 60, 0, 0, 0], [1, 249, 557, 60, 0, 0, 0], [560, 249, 557, 60, 0, 0, 0], [1119, 249, 557, 60, 0, 0, 0], [1, 311, 557, 60, 0, 0, 0], [560, 311, 557, 60, 0, 0, 0], [1119, 311, 557, 60, 0, 0, 0], [1, 373, 557, 60, 0, 0, 0], [560, 373, 557, 60, 0, 0, 0], [1119, 373, 557, 60, 0, 0, 0], [1, 435, 557, 60, 0, 0, 0], [560, 435, 557, 60, 0, 0, 0], [1119, 435, 557, 60, 0, 0, 0], [1, 497, 557, 60, 0, 0, 0], [560, 497, 557, 60, 0, 0, 0], [1119, 497, 557, 60, 0, 0, 0], [1, 559, 557, 60, 0, 0, 0], [560, 559, 557, 60, 0, 0, 0], [1119, 559, 557, 60, 0, 0, 0], [1, 621, 557, 60, 0, 0, 0], [560, 621, 557, 60, 0, 0, 0], [1119, 621, 557, 60, 0, 0, 0], [1, 683, 557, 60, 0, 0, 0], [560, 683, 557, 60, 0, 0, 0], [1119, 683, 557, 60, 0, 0, 0], [1, 745, 557, 60, 0, 0, 0], [560, 745, 557, 60, 0, 0, 0], [1119, 745, 557, 60, 0, 0, 0], [1, 807, 557, 60, 0, 0, 0], [560, 807, 557, 60, 0, 0, 0], [1119, 807, 557, 60, 0, 0, 0], [1, 869, 557, 60, 0, 0, 0], [560, 869, 557, 60, 0, 0, 0], [1119, 869, 557, 60, 0, 0, 0], [1, 931, 557, 60, 0, 0, 0], [560, 931, 557, 60, 0, 0, 0]],
            this.frameThungPhaSanh = {
                vi: this.framesThungPhaSanhVi,
                en: this.framesThungPhaSanhEn,
                zh: this.framesThungPhaSanhZh,
                km: this.framesThungPhaSanhKm,
                fr: this.framesThungPhaSanhFr
            },
            this.framesFinal = [[4708, 0, 1, 1, 0, 0, 0], [711, 0, 708, 108, 0, -55, -17], [2073, 0, 648, 108, 0, -85, -17], [3319, 0, 587, 108, 0, -116, -17], [0, 108, 528, 108, 0, -146, -17], [480, 324, 468, 108, 0, -176, -17], [1841, 324, 408, 108, 0, -206, -17], [2249, 324, 349, 108, 0, -236, -17], [2598, 324, 288, 108, 0, -267, -17], [2886, 324, 228, 108, 0, -297, -17], [4519, 324, 198, 108, 0, -297, -17], [3723, 324, 199, 108, 0, -296, -17], [3922, 324, 199, 108, 0, -296, -17], [4121, 324, 199, 108, 0, -295, -17], [4320, 324, 199, 108, 0, -295, -17], [3872, 216, 480, 108, 0, -97, -17], [1013, 108, 484, 108, 0, -85, -17], [1497, 108, 484, 108, 0, -76, -17], [1981, 108, 484, 108, 0, -74, -17], [2465, 108, 484, 108, 0, -86, -17], [2949, 108, 484, 108, 0, -98, -17], [3433, 108, 484, 108, 0, -111, -17], [3917, 108, 484, 108, 0, -123, -17], [0, 216, 484, 108, 0, -135, -17], [484, 216, 484, 108, 0, -147, -17], [968, 216, 484, 108, 0, -159, -17], [1452, 216, 484, 108, 0, -172, -17], [1936, 216, 484, 108, 0, -184, -17], [2420, 216, 484, 108, 0, -196, -17], [2904, 216, 484, 108, 0, -196, -17], [3388, 216, 484, 108, 0, -196, -17], [0, 324, 480, 108, 0, -199, -17], [948, 324, 464, 108, 0, -208, -17], [3521, 324, 202, 108, 0, -285, -17], [3318, 324, 203, 108, 0, -285, -17], [3114, 324, 204, 108, 0, -285, -17], [3114, 324, 204, 108, 0, -285, -17], [3114, 324, 204, 108, 0, -285, -17], [4448, 0, 260, 108, 0, -259, -17], [4401, 108, 317, 108, 0, -233, -17], [4352, 216, 373, 108, 0, -207, -17], [1412, 324, 429, 108, 0, -181, -17], [528, 108, 485, 108, 0, -155, -17], [3906, 0, 542, 108, 0, -129, -17], [2721, 0, 598, 108, 0, -103, -17], [1419, 0, 654, 108, 0, -77, -17], [0, 0, 711, 108, 0, -51, -17], [4708, 0, 1, 1, 0, 0, 0]]
        }
        e.variable = r
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        );
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var s, h = i(0), a = (s = PIXI.Container,
        o(r, s),
        r.prototype.init = function() {
            var t = this.pot;
            console.log("pot", t, this.h12, this.h34, this.min, this.max, this.step),
            this.bg = new Sprite(this.game.assets.loader.resources.assetsTourPoker.textures["bar-bg.png"]);
            var e = new Sprite(this.game.assets.loader.resources.assetsTourPoker.textures["bar-bg-money.png"]);
            e.anchor.set(.5),
            e.position.set(50, 21),
            this.txtMoney = new PIXI.Text(h.Util.ParseMoney(this.min),{
                fontFamily: this.game.fontFaceBold,
                fontSize: 18,
                fill: ["white"]
            }),
            this.txtMoney.anchor.set(.5),
            this.txtMoney.position.set(0, 0),
            e.addChild(this.txtMoney);
            var i = new Sprite(this.game.assets.loader.resources.assetsTourPoker.textures["bar-bg-scroll.png"]);
            i.anchor.set(1, .5),
            i.position.set(355, 21);
            var n = new Sprite(this.game.assets.loader.resources.assetsTourPoker.textures["bar-bg-scroll-active.png"]);
            n.anchor.set(1, .5),
            n.position.set(355, 21),
            this.btnSlider = new Sprite(this.game.assets.loader.resources.assetsTourPoker.textures["bar-btn-mousescroll-normal.png"]),
            this.btnSlider.anchor.set(.5),
            this.btnSlider.position.set(173, 23),
            this.btnSlider.buttonMode = !0,
            this.btnSlider.interactive = !0,
            this.btnSlider.on("pointerdown", this.btnSliderDown).on("pointermove", this.btnSliderMove.bind(this.btnSlider, this)).on("pointerup", this.btnSliderUp).on("pointerupoutside", this.btnSliderUp),
            this.btnMinus = new Sprite(this.game.assets.loader.resources.assetsTourPoker.textures["bar-btn-minus-normal.png"]),
            this.btnMinus.name = "bar-btn-minus-normal.png",
            this.btnMinus.anchor.set(0, .5),
            this.btnMinus.position.set(100, 21),
            this.btnMinus.buttonMode = !0,
            this.btnMinus.interactive = !0,
            this.btnMinus.on("pointerover", this.game.btnHover.bind(this.btnMinus, this.game)).on("pointerout", this.game.btnOut.bind(this.btnMinus, this.game)).on("pointerdown", this.btnMinusDown.bind(this.btnMinus, this)),
            this.btnPlus = new Sprite(this.game.assets.loader.resources.assetsTourPoker.textures["bar-btn-plus-normal.png"]),
            this.btnPlus.name = "bar-btn-plus-normal.png",
            this.btnPlus.anchor.set(0, .5),
            this.btnPlus.position.set(370, 21),
            this.btnPlus.buttonMode = !0,
            this.btnPlus.interactive = !0,
            this.btnPlus.on("pointerover", this.game.btnHover.bind(this.btnPlus, this.game)).on("pointerout", this.game.btnOut.bind(this.btnPlus, this.game)).on("pointerdown", this.btnPlusDown.bind(this.btnPlus, this)),
            this.btnMin = new Sprite(this.game.assets.loader.resources.assetsTourPoker.textures["bar-btn-pot-normal.png"]),
            this.btnMin.id = "btnMin",
            this.btnMin.anchor.set(0, .5),
            this.btnMin.position.set(110, -20),
            this.btnMin.buttonMode = !0,
            this.btnMin.interactive = !0,
            this.btnMin.on("pointerdown", this.btnMinClick.bind(this.btnMin, this));
            var o = new PIXI.Text("MIN",{
                fontFamily: this.game.fontFaceBold,
                fontSize: 18,
                fill: ["white"]
            });
            o.anchor.set(.5),
            o.position.set(this.btnMin.width / 2, 0),
            this.btnMin.addChild(o),
            this.btn12Pot = new Sprite(this.game.assets.loader.resources.assetsTourPoker.textures["bar-btn-pot-normal.png"]),
            this.btn12Pot.id = "btn12Pot",
            this.btn12Pot.anchor.set(0, .5),
            this.btn12Pot.position.set(180, -20),
            this.btn12Pot.buttonMode = !0,
            this.btn12Pot.interactive = !0;
            var s = new PIXI.Text("1/2",{
                fontFamily: this.game.fontFaceBold,
                fontSize: 18,
                fill: ["white"]
            });
            s.anchor.set(.5),
            s.position.set(this.btn12Pot.width / 2, 0),
            this.btn12Pot.addChild(s),
            this.money >= this.h12 && this.min <= this.h12 ? this.btn12Pot.on("pointerdown", this.btn12PotClick.bind(this.btn12Pot, this)) : this.btn12Pot.filters = [this.game.filterGray],
            this.btn34Pot = new Sprite(this.game.assets.loader.resources.assetsTourPoker.textures["bar-btn-pot-normal.png"]),
            this.btn34Pot.id = "btn34Pot",
            this.btn34Pot.anchor.set(0, .5),
            this.btn34Pot.position.set(250, -20),
            this.btn34Pot.buttonMode = !0,
            this.btn34Pot.interactive = !0;
            var a = new PIXI.Text("3/4",{
                fontFamily: this.game.fontFaceBold,
                fontSize: 18,
                fill: ["white"]
            });
            a.anchor.set(.5),
            a.position.set(this.btn34Pot.width / 2, 0),
            this.btn34Pot.addChild(a),
            this.money >= this.h34 && this.min <= this.h34 ? this.btn34Pot.on("pointerdown", this.btn34PotClick.bind(this.btn34Pot, this)) : this.btn34Pot.filters = [this.game.filterGray],
            this.btnPot = new Sprite(this.game.assets.loader.resources.assetsTourPoker.textures["bar-btn-pot-normal.png"]),
            this.btnPot.id = "btnPot",
            this.btnPot.anchor.set(0, .5),
            this.btnPot.position.set(320, -20),
            this.btnPot.buttonMode = !0,
            this.btnPot.interactive = !0;
            var r = new PIXI.Text("POT",{
                fontFamily: this.game.fontFaceBold,
                fontSize: 18,
                fill: ["white"]
            });
            r.anchor.set(.5),
            r.position.set(this.btnPot.width / 2, 0),
            this.btnPot.addChild(r),
            this.max >= this.pot && this.money >= this.pot && this.min <= this.pot ? this.btnPot.on("pointerdown", this.btnPotClick.bind(this.btnPot, this)) : this.btnPot.filters = [this.game.filterGray],
            this.bg.addChild(e, i, n, this.btnSlider, this.btnMinus, this.btnPlus, this.btnMin, this.btn12Pot, this.btn34Pot, this.btnPot),
            this.addChild(this.bg)
        }
        ,
        r.prototype.disableBtn = function(t) {
            t.buttonMode = !1,
            t.interactive = !1,
            t.filters = [this.game.filterGray]
        }
        ,
        r.prototype.enableBtn = function(t) {
            t.buttonMode = !0,
            t.interactive = !0,
            t.filters = null
        }
        ,
        r.prototype.btn34PotClick = function(t) {
            t.pot,
            t.updateChip(t.h34, t),
            t.updateBetBar(t.h34)
        }
        ,
        r.prototype.btnMinClick = function(t) {
            var e = t.min;
            t.updateChip(e, t),
            t.updateBetBar(e)
        }
        ,
        r.prototype.btn12PotClick = function(t) {
            t.pot,
            t.updateChip(t.h12, t),
            t.updateBetBar(t.h12)
        }
        ,
        r.prototype.btnPotClick = function(t) {
            var e = t.pot;
            t.updateChip(e, t),
            t.updateBetBar(e)
        }
        ,
        r.prototype.updateChip = function(t, e) {
            t < 0 || this.game.updateBetOrRaise(t, e.type)
        }
        ,
        r.prototype.btnMinusDown = function(t) {
            var e = (e = t.betValue - t.step) < t.min ? t.min : e;
            t.updateBetBar(e)
        }
        ,
        r.prototype.btnPlusDown = function(t) {
            var e = (e = t.betValue + t.step) > this.max ? t.max : e;
            t.updateBetBar(e)
        }
        ,
        r.prototype.btnSliderDown = function(t) {
            this.data = t.data,
            this.alpha = .9,
            this.dragging = !0
        }
        ,
        r.prototype.btnSliderUp = function() {
            this.data = null,
            this.alpha = 1,
            this.dragging = !1
        }
        ,
        r.prototype.btnSliderMove = function(t) {
            var e, i, n = this;
            n.dragging && (n.dragging && (e = n.data.getLocalPosition(n.parent),
            n.x = e.x,
            n.y = e.y),
            n.x < 173 && (n.x = 173),
            339 < n.x && (n.x = 339),
            23 !== n.y && (n.y = 23),
            i = Math.round((n.x - t.minX) / (t.maxX - t.minX) * (t.max - t.min) + t.min),
            t.updateBetBar(i))
        }
        ,
        r.prototype.updateBetBar = function(t) {
            t = t < this.min ? this.min : t > this.max ? this.max : t,
            this.betValue = t,
            this.txtMoney.text = h.Util.ParseMoney(t),
            this.game.updateBetOrRaise(t, this.type),
            this.betValue === this.min ? this.disableBtn(this.btnMinus) : this.enableBtn(this.btnMinus),
            this.betValue === this.max ? this.disableBtn(this.btnPlus) : this.enableBtn(this.btnPlus);
            var e = Math.round((t - this.min) * (this.maxX - this.minX) / (this.max - this.min)) + this.minX;
            t === this.max && (e = 339),
            e <= 339 && (this.btnSlider.x = e),
            console.log("UpdateBetBar", t)
        }
        ,
        r.prototype.show = function() {
            this.visible = !0;
            var t = this.betValue > this.max ? this.max : this.betValue;
            (t = this.getMaxBet(t, this.min, this.max, this.step)) != this.betValue && (this.betValue = t),
            this.game.updateBetOrRaise(t, this.type)
        }
        ,
        r.prototype.hide = function() {
            this.visible = !1
        }
        ,
        r);
        function r(t) {
            var e = s.call(this) || this;
            return e.min = 0,
            e.max = 0,
            e.step = 0,
            e.minX = 173,
            e.maxX = 339,
            e.pot = 0,
            e.money = 0,
            e.h34 = 0,
            e.h12 = 0,
            e.clearDragging = function() {
                e.btnSlider.data = null,
                e.btnSlider.alpha = 1,
                e.btnSlider.dragging = !1
            }
            ,
            e.getMaxBet = function(t, e, i, n) {
                var o = i
                  , s = this.game.GetPlayerByAccountId(this.accountId);
                return s && s.player && s.player.Account && (1 === this.game.roomModel.MoneyType ? o = s.player.Account.GoldBalance : 0 === this.game.roomModel.MoneyType && (o = s.player.Account.CoinBalance),
                0 === this.game.roomModel.Rule ? o = Math.floor(o / 2) : 1 === this.game.roomModel.Rule ? o = Math.floor(o / 3) : 2 !== this.game.roomModel.Rule && 3 !== this.game.roomModel.Rule || (o = Math.floor(o / 4)),
                o < t && (t = Math.floor((o - e) / n) * n + e)),
                t
            }
            ,
            e.game = t.game,
            e.min = t.min,
            e.max = t.max,
            e.step = t.step,
            e.pot = t.pot,
            e.type = t.type,
            e.betValue = t.min,
            e.money = t.money,
            e.h34 = Math.ceil(3 * t.pot / 4),
            e.h12 = Math.ceil(t.pot / 2),
            e.init(),
            e.game.updateBetOrRaise(e.min, e.type),
            e
        }
        e.default = a
    }
    ],
    r.c = l,
    r.d = function(t, e, i) {
        r.o(t, e) || Object.defineProperty(t, e, {
            enumerable: !0,
            get: i
        })
    }
    ,
    r.r = function(t) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
            value: "Module"
        }),
        Object.defineProperty(t, "__esModule", {
            value: !0
        })
    }
    ,
    r.t = function(e, t) {
        if (1 & t && (e = r(e)),
        8 & t)
            return e;
        if (4 & t && "object" == typeof e && e && e.__esModule)
            return e;
        var i = Object.create(null);
        if (r.r(i),
        Object.defineProperty(i, "default", {
            enumerable: !0,
            value: e
        }),
        2 & t && "string" != typeof e)
            for (var n in e)
                r.d(i, n, function(t) {
                    return e[t]
                }
                .bind(null, n));
        return i
    }
    ,
    r.n = function(t) {
        var e = t && t.__esModule ? function() {
            return t.default
        }
        : function() {
            return t
        }
        ;
        return r.d(e, "a", e),
        e
    }
    ,
    r.o = function(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e)
    }
    ,
    r.p = "/",
    r(r.s = 5);
    function r(t) {
        if (l[t])
            return l[t].exports;
        var e = l[t] = {
            i: t,
            l: !1,
            exports: {}
        };
        return h[t].call(e.exports, e, e.exports, r),
        e.l = !0,
        e.exports
    }
    var h, l
});
