!function(e, t) {
    "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define("crabfish", [], t) : "object" == typeof exports ? exports.crabfish = t() : e.crabfish = t()
}(window, function() {
    return i = {},
    a.m = s = {
        8: function(e, t, s) {
            "use strict";
            Object.defineProperty(t, "__esModule", {
                value: !0
            }),
            t.game = void 0;
            var i = (a.prototype.init = function() {
                var e, t, s = this;
                this.isInit || (this.currencyId = libs.MiniGame.currencyId,
                this.moneyType = libs.MiniGame.betType,
                this.mediaUrl = libs.MiniGame.urlRoot + "CrabFish/",
                this.apiUrl = libs.MiniGame.apiUrl + "api/CrabFish/",
                e = jQuery.createTemplateURL(this.mediaUrl + "templates/game.html"),
                t = jQuery.processTemplateToText(e),
                $("#minigame").append(t),
                $("#gameCrabFish").draggable(),
                this.changeLanguage(),
                this.loadAssets(),
                this.initEvents(),
                this.isInit = !0,
                this.disableBet(),
                this.disableConfirm(),
                libs.MiniGame.checkAutoShowGame("gameCrabFish") ? this.showGui() : this.hideGui(),
                this.timerRemain = setInterval(function() {
                    return s.updateTimer(s)
                }, 1e3),
                App.resizeWindow(),
                this.setAutoClose())
            }
            ,
            a.prototype.disGame = function() {}
            ,
            a.prototype.setAutoClose = function() {
                var e = this;
                this.timerClose || (this.timerClose = setInterval(function() {
                    return e.autoClose()
                }, 1e3)),
                this.timeClose = 120
            }
            ,
            a.prototype.autoClose = function() {
                0 == this.timeClose ? (this.hideGui(),
                clearInterval(this.timerClose),
                this.timerClose = 0) : 0 < this.timeClose && this.timeClose--
            }
            ,
            a.prototype.changeLanguage = function() {
                $("#gameCrabFish .button-rebet").attr("title", Message.GetMessage("bc28")),
                $("#gameCrabFish .button-double").attr("title", Message.GetMessage("bc29")),
                $("#gameCrabFish .button-clear").attr("title", Message.GetMessage("bc30")),
                $("#gameCrabFish .button-confirm").attr("title", Message.GetMessage("bc31")),
                $("#gameCrabFish .button-rebet").html(Message.GetMessage("bc2")),
                $("#gameCrabFish .button-double").html(Message.GetMessage("bc3")),
                $("#gameCrabFish .button-clear").html(Message.GetMessage("bc4")),
                $("#gameCrabFish .button-confirm").html(Message.GetMessage("bc5")),
                $("#gameCrabFish .game-slots .box").attr("title", Message.GetMessage("bc27", ["100k"])),
                $("#gameCrabFish .button-session-change").html(Message.GetMessage("bc1")),
                $("#gameCrabFish .annoucement").html(Message.GetMessage("bc6"))
            }
            ,
            a.prototype.loadAssets = function() {
                var t = this;
                this.loader = new PIXI.loaders.Loader,
                PIXI.utils.skipHello();
                var e = document.getElementById("canvas-cf");
                this.app = new PIXI.Application(259,258,{
                    antialias: !1,
                    transparent: !0,
                    view: e
                });
                for (var s = 0; s < this.assets.length; s++)
                    "" !== this.assets[s].id ? this.loader.add(this.assets[s].id, this.mediaUrl + this.assets[s].src) : this.loader.add(this.mediaUrl + this.assets[s].src);
                this.loader.load(function() {
                    t.aniDice = [];
                    for (var e = 1; e < 20; e++)
                        t.aniDice.push(t.loader.resources.CrabFishAssets.textures["cf-dice-" + (e < 10 ? "0" : "") + e]);
                    t.diceOne = new Sprite(t.loader.resources.CrabFishAssets.textures["cf-icon-1"]),
                    t.diceOne.anchor.set(.5),
                    t.diceOne.scale.set(t.dicePos[0].s),
                    t.diceOne.position.set(t.dicePos[0].x, t.dicePos[0].y),
                    t.diceOne.rotation = t.dicePos[0].r,
                    t.diceTwo = new Sprite(t.loader.resources.CrabFishAssets.textures["cf-icon-1"]),
                    t.diceTwo.anchor.set(.5),
                    t.diceTwo.scale.set(t.dicePos[1].s),
                    t.diceTwo.position.set(t.dicePos[1].x, t.dicePos[1].y),
                    t.diceTwo.rotation = t.dicePos[1].r,
                    t.diceThree = new Sprite(t.loader.resources.CrabFishAssets.textures["cf-icon-1"]),
                    t.diceThree.anchor.set(.5),
                    t.diceThree.scale.set(t.dicePos[2].s),
                    t.diceThree.position.set(t.dicePos[2].x, t.dicePos[2].y),
                    t.diceThree.rotation = t.dicePos[2].r,
                    t.app.stage.addChild(t.diceOne, t.diceTwo, t.diceThree),
                    t.diceOne.visible = t.diceTwo.visible = t.diceThree.visible = !1
                })
            }
            ,
            a.prototype.initEvents = function() {
                var t = this;
                $("#gameCrabFish .buttons .button-close").unbind("click").click(function() {
                    t.hideGui()
                }),
                $("#gameCrabFish .button-guide").unbind("click").click(function() {
                    t.showGuide()
                }),
                $("#gameCrabFish .button-history").unbind("click").click(function() {
                    t.showHistory(t.moneyType)
                }),
                $("#gameCrabFish .button-trophy").unbind("click").click(function() {
                    t.showRank(t.moneyType)
                }),
                $("#gameCrabFish .button-session-change").unbind("click").click(function() {
                    t.binderBreach(t.dataBridge, 1 === t.historyType ? 0 : 1)
                }),
                $("#gameCrabFish .rooms .room").unbind("click").click(function() {
                    t.changeRoom($(this).index() + 1)
                }),
                $("#gameCrabFish .bets .bet").unbind("click").click(function() {
                    var e = parseInt($(this)[0].id.replace("d", ""));
                    t.chipMoney = t.prizeData.chips[e - 1].Value,
                    $("#gameCrabFish .bets .bet").removeClass("active"),
                    $(this).addClass("active")
                }),
                $("#gameCrabFish .game-slots div").unbind("click").click(function() {
                    var e = $(this)[0].id;
                    t.setBet(e)
                }),
                $("#gameCrabFish .button-rebet").unbind("click").click(function() {
                    t.reBet()
                }),
                $("#gameCrabFish .button-double").unbind("click").click(function() {
                    t.reBetX2()
                }),
                $("#gameCrabFish .button-clear").unbind("click").click(function() {
                    t.reset()
                }),
                $("#gameCrabFish .button-confirm").unbind("click").click(function() {
                    t.finish()
                })
            }
            ,
            a.prototype.showMsg = function(e) {
                $("#gameCrabFish .annoucement").text(Message.GetMessage(e))
            }
            ,
            a.prototype.getBalance = function(e) {
                var t = App.account;
                return null == t || null == t ? 0 : 1 == e ? t.goldBalance : t.coinBalance
            }
            ,
            a.prototype.setBet = function(e) {
                if (this.locked)
                    this.showMsg("me-60207");
                else if (this.gameSession.GameStatus == this.gameStatus.Betting)
                    if (this.getBalance(this.moneyType) < this.chipMoney)
                        this.showMsg("me-51");
                    else {
                        var t = this.betData;
                        if (null != t) {
                            var s = 0;
                            if ($.each(t, function() {
                                s += this.BetValue
                            }),
                            this.getBalance(this.moneyType) < s + this.chipMoney)
                                return void this.showMsg("me-51")
                        }
                        e = parseInt(e.replace("g", ""));
                        var i = this;
                        libs.MiniGame.hubObj.SetBetCF(this.currencyId, this.roomId, this.moneyType, e, this.chipMoney).then(function(e) {
                            e < 0 && i.showMsg("me" + e)
                        })
                    }
                else
                    this.showMsg("me-60001")
            }
            ,
            a.prototype.disableBet = function() {
                $("#gameCrabFish .button-rebet").addClass("disabled"),
                $("#gameCrabFish .button-double").addClass("disabled")
            }
            ,
            a.prototype.enableBet = function() {
                $("#gameCrabFish .button-rebet").removeClass("disabled"),
                $("#gameCrabFish .button-double").removeClass("disabled")
            }
            ,
            a.prototype.disableConfirm = function() {
                $("#gameCrabFish .button-clear").addClass("disabled"),
                $("#gameCrabFish .button-confirm").addClass("disabled")
            }
            ,
            a.prototype.enableConfirm = function() {
                this.disableBet(),
                $("#gameCrabFish .button-clear").removeClass("disabled"),
                $("#gameCrabFish .button-confirm").removeClass("disabled")
            }
            ,
            a.prototype.reBet = function() {
                if (this.setAutoClose(),
                this.isRebet)
                    return this.showMsg("bc21"),
                    void this.disableBet();
                if (this.isBetX2)
                    return this.showMsg("bc24"),
                    void this.disableBet();
                if (this.locked)
                    return this.showMsg("me-60207"),
                    void this.disableBet();
                if (this.gameSession.GameStatus != this.gameStatus.Betting)
                    return this.showMsg("me-60001"),
                    void this.disableBet();
                var e = this.getLastBet(this.roomId + "" + this.moneyType);
                if (null == e)
                    return this.showMsg("bc22"),
                    void this.disableBet();
                var t = []
                  , s = 0;
                if ($.each(e, function() {
                    s += this.BetValue,
                    t.push({
                        LocationID: this.LocationID,
                        TotalBetValue: this.BetValue
                    })
                }),
                0 == s)
                    return this.showMsg("bc22"),
                    void this.disableBet();
                if (this.getBalance(this.moneyType) < s)
                    return this.showMsg("me-51"),
                    void this.disableBet();
                var i = this;
                libs.MiniGame.hubObj.ReBetCF(this.currencyId, this.roomId, this.moneyType, t, !1).then(function() {
                    i.isRebet = !0
                })
            }
            ,
            a.prototype.reBetX2 = function() {
                if (this.setAutoClose(),
                this.isBetX2)
                    return this.showMsg("bc21"),
                    void this.disableBet();
                if (this.isRebet)
                    return this.showMsg("bc25"),
                    void this.disableBet();
                if (this.locked)
                    return this.showMsg("me-60207"),
                    void this.disableBet();
                if (this.gameSession.GameStatus != this.gameStatus.Betting)
                    return this.showMsg("me-60001"),
                    void this.disableBet();
                var e = this.getLastBet(this.roomId + "" + this.moneyType);
                if (null == e)
                    return this.showMsg("bc22"),
                    void this.disableBet();
                var t = []
                  , s = !0
                  , i = this
                  , a = 0;
                return $.each(e, function() {
                    2 * this.BetValue > 100 * i.prizeData.Value ? s = !1 : (t.push({
                        LocationID: this.LocationID,
                        TotalBetValue: 2 * this.BetValue
                    }),
                    a += 2 * this.BetValue)
                }),
                s ? 0 == a ? (this.showMsg("bc22"),
                void this.disableBet()) : this.getBalance(this.moneyType) < a ? (this.showMsg("me-51"),
                void this.disableBet()) : void libs.MiniGame.hubObj.ReBetCF(this.currencyId, this.roomId, this.moneyType, t, !1).then(function() {
                    i.isBetX2 = !0
                }) : (this.showMsg("me-60002"),
                void this.disableBet())
            }
            ,
            a.prototype.reset = function() {
                var e;
                this.setAutoClose(),
                this.locked ? this.showMsg("me-60207") : this.gameSession.GameStatus == this.gameStatus.Betting ? (e = this,
                libs.MiniGame.hubObj.ResetCF(this.currencyId, this.roomId, this.moneyType).then(function() {
                    e.isRebet = !1,
                    e.isBetX2 = !1
                })) : this.showMsg("me-60001")
            }
            ,
            a.prototype.finish = function() {
                var e;
                this.setAutoClose(),
                this.isConfirm || (this.locked ? this.showMsg("me-60207") : this.gameSession.GameStatus == this.gameStatus.Betting ? (this.isConfirm = !0,
                e = this,
                libs.MiniGame.hubObj.FinishBetCF(this.currencyId, this.roomId, this.moneyType).then(function() {
                    e.isConfirm = !1
                })) : this.showMsg("me-60001"))
            }
            ,
            a.prototype.changeRoom = function(e) {
                this.setAutoClose(),
                this.gameSession && this.gameSession.GameStatus == this.gameStatus.Result || this.locked || e != this.roomId && this.changeMoney(this.moneyType, e)
            }
            ,
            a.prototype.getResultName = function(e, t, s) {
                var i = "";
                return (e = parseInt(e)) == t && 1 < s && (i = " x" + s),
                "ic-" + e + i
            }
            ,
            a.prototype.getRoomValue = function(e, t) {
                var s = this.gameData[this.currencyId + "_" + t]
                  , i = "";
                return $.each(s, function() {
                    this.RoomID == e && (i = libs.Util.ConvertMoney(this.MinBetValue))
                }),
                i
            }
            ,
            a.prototype.getGateBetName = function(e) {
                var t = e.split(";")
                  , s = this
                  , i = "";
                return $.each(t, function() {
                    var e = this.split(",")
                      , t = parseInt(e[0]);
                    i += s.getGateName(t) + ","
                }),
                i = 0 < i.length ? i.substr(0, i.length - 1) : i
            }
            ,
            a.prototype.getGateResultName = function(e) {
                try {
                    var t = this
                      , s = "";
                    return $.each(e.DiceData.split(","), function() {
                        var e = parseInt(this);
                        s += t.getGateName(e) + ","
                    }),
                    s = 0 < s.length ? s.substr(0, s.length - 1) : s
                } catch (e) {}
            }
            ,
            a.prototype.getGateName = function(e) {
                switch (e) {
                case 1:
                    return Message.GetMessage("bc7");
                case 2:
                    return Message.GetMessage("bc8");
                case 3:
                    return Message.GetMessage("bc9");
                case 4:
                    return Message.GetMessage("bc10");
                case 5:
                    return Message.GetMessage("bc11");
                case 6:
                    return Message.GetMessage("bc12")
                }
                return ""
            }
            ,
            a.prototype.drawHtml = function(e, a) {
                var o = 0
                  , n = 0;
                return $.each(e.split(";"), function() {
                    var e = this.split(",")
                      , t = parseInt(e[0])
                      , s = parseInt(e[1])
                      , i = parseInt(e[2]);
                    t == a && (o = s,
                    n = i)
                }),
                '  <td align="center">' + libs.Util.ParseMoney(o) + '</td><td align="center">' + libs.Util.ParseMoney(n) + "</td>    "
            }
            ,
            a.prototype.hTMLentities = function(e) {
                return String(e).replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&")
            }
            ,
            a.prototype.showRank = function(t) {
                libs.MiniGame.showPopup(),
                void 0 === this.temTopWinner && (this.temTopWinner = jQuery.createTemplateURL(this.mediaUrl + "templates/topRank.html")),
                this.temTopWinner.setParam("AccountID", "undefined" != typeof App && App.account ? App.account.accountID : ""),
                this.temTopWinner.setParam("PortalID", "undefined" != typeof App && App.account ? App.account.portalID : "");
                var s = this;
                libs.Util.GetData(this.apiUrl + "GetTopWinners?currencyID=" + this.currencyId + "&betType=" + t + "&topCount=10&r=" + Math.random(), function(e) {
                    e.c < 0 || libs.MiniGame.bindPopupContent(jQuery.processTemplateToText(s.temTopWinner, {
                        data: e.d,
                        MoneyType: t
                    }))
                }),
                this.setAutoClose()
            }
            ,
            a.prototype.showHistory = function(t) {
                var s = this;
                libs.MiniGame.showPopup(),
                void 0 === s.tempHis && (s.tempHis = jQuery.createTemplateURL(s.mediaUrl + "templates/lich-su-giao-dich.html")),
                void 0 === s.tempHisDetail && (s.tempHisDetail = jQuery.createTemplateURL(s.mediaUrl + "templates/lich-su-giao-dich-chi-tiet.html")),
                libs.Util.GetData(this.apiUrl + "GetAccountHistory?currencyID=" + this.currencyId + "&betType=" + t + "&topCount=500&r=" + Math.random(), function(e) {
                    e.c < 0 || (s.dataHistory = e.d,
                    s.binderHistory(1, t))
                }),
                this.setAutoClose()
            }
            ,
            a.prototype.binderHistory = function(e, t) {
                if (null != this.dataHistory) {
                    for (var s = [], i = 10 * (e - 1); i < 10 * e && !(this.dataHistory.length <= i); i++) {
                        var a = this.dataHistory[i];
                        if (s.push(a),
                        10 <= s.length)
                            break
                    }
                    libs.MiniGame.bindPopupContent(jQuery.processTemplateToText(this.tempHis, {
                        data: s,
                        MoneyType: t
                    })),
                    $("#pager").pager({
                        pagenumber: e,
                        pagecount: Math.ceil(this.dataHistory.length / 10),
                        buttonClickCallback: function(e) {
                            e.binderHistory(e, t)
                        }
                    }),
                    this.currentPage = e,
                    this.setAutoClose()
                }
            }
            ,
            a.prototype.historyDetail = function(e, t) {
                if (null != this.dataHistory) {
                    for (var s, i = 0; i < this.dataHistory.length; i++)
                        if (this.dataHistory[i].GameSessionID == e && this.dataHistory[i].RoomID == t) {
                            s = this.dataHistory[i];
                            break
                        }
                    libs.MiniGame.bindPopupContent(jQuery.processTemplateToText(this.tempHisDetail, s)),
                    this.setAutoClose()
                }
            }
            ,
            a.prototype.showGuide = function() {
                libs.MiniGame.showPopup(),
                void 0 === this.tempGuide[Message.GetLanguage()] && (this.tempGuide[Message.GetLanguage()] = jQuery.createTemplateURL(this.mediaUrl + "templates/guide/huong-dan_" + Message.GetLanguage() + ".html")),
                libs.MiniGame.bindPopupContent(jQuery.processTemplateToText(this.tempGuide[Message.GetLanguage()]), {
                    scrollId: ".scroll-tx",
                    height: "590px"
                }),
                this.setAutoClose()
            }
            ,
            a.prototype.showGui = function() {
                $("#gameCrabFish").show();
                try {
                    this.changeMoney(this.moneyType, this.roomId)
                } catch (e) {}
            }
            ,
            a.prototype.hideGui = function() {
                $("#gameCrabFish").hide(),
                this.disableBet(),
                this.disableConfirm();
                try {
                    1 == libs.MiniGame.gameHub.connection.connectionState && libs.MiniGame.hubObj.HideCrabFish()
                } catch (e) {}
            }
            ,
            a.prototype.setMoney = function() {
                var e = this;
                e.gameData[e.currencyId + "_" + e.moneyType].forEach(function(e) {
                    var t = $("#c" + e.RoomID + " span");
                    t.html(libs.Util.ConvertMoney(e.MinBetValue)),
                    t.data("value", e.MinBetValue),
                    t.data("max-value", e.MaxBetValue),
                    t.data("roomId", e.RoomID)
                });
                var t = $("#c" + e.roomId + " span")
                  , s = t.data("max-value");
                $("#gameCrabFish .game-slots .box").attr("title", Message.GetMessage("bc27", [libs.Util.ConvertMoney(s)])),
                e.chipMoney = t.data("value");
                var i = {
                    Value: e.chipMoney,
                    chips: [{
                        Value: e.chipMoney,
                        Text: libs.Util.ConvertMoney(e.chipMoney)
                    }, {
                        Value: 5 * e.chipMoney,
                        Text: libs.Util.ConvertMoney(5 * e.chipMoney)
                    }, {
                        Value: 10 * e.chipMoney,
                        Text: libs.Util.ConvertMoney(10 * e.chipMoney)
                    }, {
                        Value: 50 * e.chipMoney,
                        Text: libs.Util.ConvertMoney(50 * e.chipMoney)
                    }, {
                        Value: 100 * e.chipMoney,
                        Text: libs.Util.ConvertMoney(100 * e.chipMoney)
                    }]
                };
                e.prizeData = i,
                $.each(i.chips, function(e) {
                    $("#d" + (e + 1) + " span").text(this.Text)
                })
            }
            ,
            a.prototype.changeMoney = function(e, t) {
                var s, i;
                this.locked || (t = t || this.roomId,
                this.roomId = t,
                this.moneyType = e,
                (s = this).gameData[this.currencyId + "_" + this.moneyType] ? s.setMoney() : (i = this.apiUrl + "GetGameRoom?currencyID=" + this.currencyId + "&betType=" + this.moneyType,
                libs.Util.GetData(i, "", function(e) {
                    null != e && 0 <= e.c && (s.gameData[s.currencyId + "_" + s.moneyType] = e.d,
                    s.setMoney())
                })),
                $("#gameCrabFish .rooms .room").removeClass("active"),
                $("#c" + s.roomId).addClass("active"),
                $("#gameCrabFish .bets .bet").removeClass("active"),
                $("#d1").addClass("active"),
                sessionStorage.setItem("crabfish.betType", s.moneyType),
                sessionStorage.setItem("crabfish.roomId", s.roomId),
                $("#gameCrabFish .game-slots .box span.text-up").text(0),
                $("#gameCrabFish .game-slots .box span.text-down").text(0),
                delete this.betData,
                libs.MiniGame.hubObj.GetCurrentRoomsCF(this.currencyId, this.roomId, this.moneyType))
            }
            ,
            a.prototype.resetGate = function() {
                try {
                    this.dice.destroy({
                        children: !0
                    })
                } catch (e) {}
                $("#gameCrabFish .game-slots div").removeClass().addClass("box"),
                $("#gameCrabFish .game-slots div .win").hide(),
                $("#gameCrabFish .game-slots .box span.text-up").text(0),
                $("#gameCrabFish .game-slots .box span.text-down").text(0),
                $("#gameCrabFish .game-slots .box").removeClass("disabled"),
                $("#gameCrabFish .annoucement").text(Message.GetMessage("bc6")),
                $("#gameCrabFish .plate").hide(),
                this.locked = this.isResult = this.isRebet = this.isBetX2 = this.isFinish = this.isConfirm = !1;
                try {
                    this.diceOne.visible = this.diceTwo.visible = this.diceThree.visible = !1
                } catch (e) {}
                this.disableConfirm(),
                this.enableBet()
            }
            ,
            a.prototype.showGameHistory = function(e) {
                console.log("showGameHistory", e),
                this.binderBreach(e)
            }
            ,
            a.prototype.binderBreach = function(e, t) {
                this.dataBridge = e;
                var s = {};
                null == t && (t = 1),
                1 == (this.historyType = t) ? s = e : (s = {
                    1: 0,
                    2: 0,
                    3: 0,
                    4: 0,
                    5: 0,
                    6: 0
                },
                $.each(e, function() {
                    for (var e = 1; e < 7; e++)
                        0 <= this.DiceData.indexOf(e) && (s[e] += 1)
                })),
                $("#gameCrabFish .session-watch").setTemplateURL(this.mediaUrl + "templates/bridge.html?" + (new Date).getTime()),
                $("#gameCrabFish .session-watch").processTemplate({
                    HistoryType: t,
                    Data: s
                }),
                $("#gameCrabFish .session-watch .sessions").slimScroll({
                    scroll: "top"
                })
            }
            ,
            a.prototype.showTimer = function(e, t) {
                if (!(e < 0)) {
                    var s = 10 <= e ? "00:" + e : "00:0" + e
                      , i = "#00ff00";
                    switch (t) {
                    case 0:
                        i = "#00ff00";
                        break;
                    case 1:
                        i = e <= this.lockTime ? "#f00" : "#00ff00";
                        break;
                    case 2:
                        i = "#fff000"
                    }
                    $("#timerCf").text(s),
                    $("#timerCf").css("color", i)
                }
            }
            ,
            a.prototype.updateTimer = function(e) {
                if (null != e.gameSession)
                    return e.gameSession.GameStatus == e.gameStatus.Waiting ? (0 < e.gameSession.RemainWaiting && e.gameSession.RemainWaiting--,
                    e.locked = !1,
                    void e.showTimer(e.gameSession.RemainWaiting, 0)) : e.gameSession.GameStatus == e.gameStatus.Betting ? (0 < e.gameSession.RemainBetting && e.gameSession.RemainBetting--,
                    e.gameSession.RemainBetting <= e.lockTime && (e.locked = !0),
                    void e.showTimer(e.gameSession.RemainBetting, 1)) : e.gameSession.GameStatus == e.gameStatus.Result ? (0 < e.gameSession.RemainWaiting && e.gameSession.RemainWaiting--,
                    e.locked = !0,
                    e.gameSession.RemainWaiting <= 1 && e.resetGate(),
                    void e.showTimer(e.gameSession.RemainWaiting, 2)) : void 0
            }
            ,
            a.prototype.updateSession = function(e) {
                if (console.log("updateSession", e),
                e) {
                    var t = this;
                    if ($("#cf-session").text("#" + e.GameSessionID),
                    e.GameStatus == this.gameStatus.Betting)
                        return this.gameSession = e,
                        void t.resetGate();
                    if (e.GameStatus == this.gameStatus.Result) {
                        if (null != this.gameSession && this.gameSession.GameStatus == e.GameStatus)
                            return;
                        return e.RemainWaiting <= 20 ? void (t.gameSession = e) : (e.RemainWaiting -= 5,
                        void setTimeout(function() {
                            t.gameSession = e
                        }, 5e3))
                    }
                    e.GameStatus != this.gameStatus.Waiting || setTimeout(function() {
                        t.resetGate()
                    }, 5e3)
                }
            }
            ,
            a.prototype.updateResult = function(e) {
                var t;
                console.log("updateResult", e),
                e && e.RoomID == this.roomId && (this.isFinish || (this.disableBet(),
                this.disableConfirm(),
                this.isResult = !0,
                this.isFinish = !0,
                (t = this).extendGate = 2,
                this.gameResult = e,
                this.startDice(e),
                null != this.betData && setTimeout(function() {
                    libs.MiniGame.hubObj.GetAccountResultCF(t.currencyId, t.gameSession.GameSessionID)
                }, 13e3)))
            }
            ,
            a.prototype.startDice = function(e) {
                var t = this;
                if (e)
                    if (this.isInit)
                        try {
                            $("#gameCrabFish .plate").show(),
                            this.dice = new AnimatedSprite(this.aniDice),
                            this.dice.anchor.set(.5),
                            this.dice.position.set(129),
                            this.dice.animationSpeed = .5,
                            this.dice.scale.set(1.4),
                            this.dice.loop = !1,
                            this.app.stage.addChildAt(this.dice, 0),
                            this.dice.play();
                            var s = this;
                            setTimeout(function() {
                                s.showResult()
                            }, 700)
                        } catch (e) {}
                    else
                        setTimeout(function() {
                            return t.startDice(e)
                        }, 500)
            }
            ,
            a.prototype.disableGates = function() {}
            ,
            a.prototype.showResult = function() {
                this.dice.gotoAndStop(18);
                var e = this.gameResult.DiceData.split(",");
                this.diceOne.texture = this.loader.resources.CrabFishAssets.textures["cf-icon-" + e[0]],
                this.diceTwo.texture = this.loader.resources.CrabFishAssets.textures["cf-icon-" + e[1]],
                this.diceThree.texture = this.loader.resources.CrabFishAssets.textures["cf-icon-" + e[2]],
                this.diceOne.visible = this.diceTwo.visible = this.diceThree.visible = !0;
                for (var t = 1, s = "", i = 0, a = 1; a < 7; a++)
                    0 <= this.gameResult.DiceData.indexOf(a) ? $("#g" + a).addClass("w") : $("#g" + a).addClass("dark");
                for (0 == this.gameResult.Extend && (this.gameResult.Extend = 1),
                e[0] == e[1] && e[0] == e[2] ? (t = 3,
                i = e[0]) : e[0] != e[1] && e[1] != e[2] && e[0] != e[2] || (i = e[0] == e[1] || e[0] == e[2] ? e[0] : e[1],
                t = 2),
                i = parseInt(i),
                a = 1; a < 7; a++)
                    0 <= this.gameResult.DiceData.indexOf(a) && i !== a && $("#g" + a).addClass("f1");
                if (!(this.gameResult.LocationID < 1 && t < 2)) {
                    if (this.gameResult.LocationID < 1)
                        return $("#g" + i).addClass("x" + i + " f" + i),
                        void $("#g" + i + " .win").show();
                    if (0 <= this.gameResult.DiceData.indexOf(this.gameResult.LocationID)) {
                        var o = (this.gameResult.LocationID == i ? t : 1) * this.gameResult.Extend
                          , s = "x" + o + " f" + o;
                        if ($("#g" + this.gameResult.LocationID).removeClass("not"),
                        $("#g" + this.gameResult.LocationID).addClass(s),
                        $("#g" + this.gameResult.LocationID + " .win").show(),
                        t < 2 || this.gameResult.LocationID == i)
                            return;
                        return $("#g" + i).addClass("x" + t + " f" + t),
                        void $("#g" + i + " .win").show()
                    }
                    $("#g" + i).addClass("x" + t + " f" + t),
                    $("#g" + i + " .win").show(),
                    $("#g" + this.gameResult.LocationID).addClass(" x" + this.gameResult.Extend),
                    $("#g" + this.gameResult.LocationID).addClass("not")
                }
            }
            ,
            a.prototype.updateRoomInfo = function(e) {
                console.log("updateRoomInfo", e);
                try {
                    if (e.RoomID != this.roomId || e.BetType != this.moneyType)
                        return;
                    if (null == e.GateInfo)
                        return;
                    $.each(e.GateInfo, function() {
                        $("#g" + this.LocationID + " span.text-up").text(libs.Util.ConvertMoney(this.TotalBetValue))
                    })
                } catch (e) {
                    console.log(e)
                }
            }
            ,
            a.prototype.updateBetOfAccount = function(e, t) {
                console.log("updateBetOfAccount", e, t),
                this.timeClose = 120,
                this.betData = e;
                var s = this
                  , i = !1
                  , a = 0
                  , o = 0;
                if ($("#gameCrabFish .annoucement").empty(),
                $.each(e, function() {
                    $("#g" + this.LocationID + " span.text-down").removeClass("cred"),
                    $("#g" + this.LocationID + " span.text-down").text(libs.Util.ConvertMoney(this.BetValue)),
                    a += this.BetValue,
                    this.isNewBet && (o += this.BetValue,
                    $("#g" + this.LocationID + " span.text-down").addClass("cred"),
                    s.enableConfirm(),
                    i = !0)
                }),
                this.setLastBet(this.roomId + "" + this.moneyType, e),
                t <= 0)
                    return 0 < o && ($("#gameCrabFish .button-confirm").removeClass("disabled"),
                    $("#gameCrabFish .annoucement").text(Message.GetMessage("bc26"))),
                    (o <= 0 || a <= 0) && (this.disableBet(),
                    this.disableConfirm()),
                    void console.log("zsdfsdfsdf");
                i ? this.enableConfirm() : (this.disableBet(),
                this.disableConfirm()),
                a <= 0 && (this.disableBet(),
                this.disableConfirm()),
                libs.Util.UpdateBalance(this.moneyType, t)
            }
            ,
            a.prototype.resultOfAccount = function(e) {
                console.log("resultOfAccount", e);
                var t, s = 0, i = 0, a = 0, o = this;
                $.each(e, function() {
                    1 == this.BetType ? i += this.PrizeValue : 2 == this.BetType && (a += this.PrizeValue),
                    this.RoomID == o.roomId && this.BetType == o.moneyType && 0 < this.PrizeValue && (s += this.PrizeValue)
                }),
                0 < s && (t = "+" + libs.Util.ParseMoney(s),
                $("#gameCrabFish .m-result").css("top", "104px"),
                $("#gameCrabFish .m-result").css("opacity", "1"),
                $("#gameCrabFish .m-result").css("margin-left", -$("#gameCrabFish .m-result").width() / 2),
                $("#gameCrabFish .m-result").text(t),
                $("#gameCrabFish .m-result").animate({
                    top: "0px",
                    opacity: "0"
                }, 4e3, function() {
                    $(".m-Result").empty()
                }),
                libs.Util.IncreaseBalance(i, a))
            }
            ,
            a.prototype.extendRoom = function(e) {
                if (console.log("extendRoom", e),
                !this.isResult) {
                    this.extendGate = 1;
                    var t = e[0].LocationID
                      , s = e[0].Extend
                      , i = 0;
                    switch (t) {
                    case 1:
                    case 2:
                    case 3:
                        i = 24 - (6 - t);
                        break;
                    case 4:
                        i = 24;
                        break;
                    case 5:
                        i = 23;
                        break;
                    case 6:
                        i = 22
                    }
                    this.runGate(i, t, s, 1, 1)
                }
            }
            ,
            a.prototype.runGate = function(e, t, s, i, a) {
                var o, n;
                this.isFinish || (o = this,
                n = {
                    1: 1,
                    2: 2,
                    3: 3,
                    4: 6,
                    5: 5,
                    6: 4
                },
                a = 6 < a ? 1 : a,
                setTimeout(function() {
                    if (!o.isFinish) {
                        if ($(".mg-bc .game-slots .box .win").hide(),
                        $(".mg-bc .game-slots .box").removeClass("x" + s),
                        $(".mg-bc .game-slots .box").removeClass("not"),
                        $(".mg-bc .game-slots .box .win").show(),
                        i == e)
                            return $("#g" + t).addClass("x" + s),
                            void $("#g" + t).addClass("not");
                        $("#g" + n[a]).addClass("x" + s),
                        $("#g" + n[a]).addClass("not"),
                        o.runGate(e, t, s, i + 1, a + 1)
                    }
                }, 50 + 7 * (i - 1)))
            }
            ,
            a);
            function a(e) {
                this.currencyId = 1,
                this.moneyType = 1,
                this.roomType = 1,
                this.roomId = 1,
                this.chipMoney = 1,
                this.aniDice = [],
                this.gameResult = {},
                this.gameData = {},
                this.prizeData = {},
                this.lockTime = 3,
                this.isResult = !1,
                this.isRebet = !1,
                this.isBetX2 = !1,
                this.isFinish = !1,
                this.locked = !1,
                this.tempGuide = {},
                this.extendGate = -1,
                this.isConfirm = !1,
                this.assets = [{
                    id: "CrabFishAssets",
                    src: "assets/cf-dice.json"
                }],
                this.dicePos = [{
                    s: 1.5,
                    r: -.35,
                    x: 96,
                    y: 95
                }, {
                    s: 1.5,
                    r: .3,
                    x: 102,
                    y: 168
                }, {
                    s: 1.5,
                    r: .2,
                    x: 168,
                    y: 128
                }],
                this.gameStatus = {
                    Waiting: 0,
                    Betting: 1,
                    Result: 2
                },
                this.getClassName = function(e) {
                    switch (e) {
                    case 1:
                        return "huou";
                    case 2:
                        return "bau";
                    case 3:
                        return "ga";
                    case 4:
                        return "ca";
                    case 5:
                        return "cua";
                    case 6:
                        return "tom"
                    }
                    return ""
                }
                ,
                this.setLastBet = function(e, t) {
                    sessionStorage.setItem(e, JSON.stringify(t))
                }
                ,
                this.getLastBet = function(e) {
                    var t = sessionStorage.getItem(e);
                    return null == t || null == t ? null : JSON.parse(t)
                }
                ,
                this.init()
            }
            t.game = i
        }
    },
    a.c = i,
    a.d = function(e, t, s) {
        a.o(e, t) || Object.defineProperty(e, t, {
            enumerable: !0,
            get: s
        })
    }
    ,
    a.r = function(e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
        }),
        Object.defineProperty(e, "__esModule", {
            value: !0
        })
    }
    ,
    a.t = function(t, e) {
        if (1 & e && (t = a(t)),
        8 & e)
            return t;
        if (4 & e && "object" == typeof t && t && t.__esModule)
            return t;
        var s = Object.create(null);
        if (a.r(s),
        Object.defineProperty(s, "default", {
            enumerable: !0,
            value: t
        }),
        2 & e && "string" != typeof t)
            for (var i in t)
                a.d(s, i, function(e) {
                    return t[e]
                }
                .bind(null, i));
        return s
    }
    ,
    a.n = function(e) {
        var t = e && e.__esModule ? function() {
            return e.default
        }
        : function() {
            return e
        }
        ;
        return a.d(t, "a", t),
        t
    }
    ,
    a.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t)
    }
    ,
    a.p = "/",
    a(a.s = 8);
    function a(e) {
        if (i[e])
            return i[e].exports;
        var t = i[e] = {
            i: e,
            l: !1,
            exports: {}
        };
        return s[e].call(t.exports, t, t.exports, a),
        t.l = !0,
        t.exports
    }
    var s, i
});
