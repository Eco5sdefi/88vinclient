!function(t, e) {
    "object" == typeof exports && "object" == typeof module ? module.exports = e(require("libs"), require("pixi-sound"), require("signalR"), require("WebFont")) : "function" == typeof define && define.amd ? define("predict", ["libs", "pixi-sound", "signalR", "WebFont"], e) : "object" == typeof exports ? exports.predict = e(require("libs"), require("pixi-sound"), require("signalR"), require("WebFont")) : t.predict = e(t.libs, t["pixi-sound"], t.signalR, t.WebFont)
}(window, function(n, i, o, r) {
    return h = {},
    a.m = s = {
        0: function(t, e) {
            t.exports = n
        },
        1: function(t, e) {
            t.exports = i
        },
        13: function(t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.Config = void 0;
            e.Config = {
                hubUrl: null,
                apiUrl: null,
                api: null,
                lang: null,
                roomId: 1,
                countJpLobby: [null, null, null],
                countJp: null,
                countMoneyJw: null,
                countMoney: null,
                isMobile: !1,
                isOrientation: !1,
                isLobby: !0,
                arrRoom: [1e3, 1e4, 5e4, 1e5, 5e5],
                messages: null,
                ready: !1,
                music: !0,
                sound: !0,
                timeJackpot: null,
                isSpin: !1,
                isLogin: !1,
                inRoom: !1,
                currencyId: 1,
                isTry: !1,
                countDautu: null,
                countBalance: null,
                gameId: 209
            }
        },
        2: function(t, e) {
            t.exports = o
        },
        23: function(t, o, e) {
            "use strict";
            Object.defineProperty(o, "__esModule", {
                value: !0
            }),
            o.contents = void 0;
            var l = e(13)
              , u = e(0);
            o.contents = {
                timer: 0,
                page: 0,
                pageSize: 10,
                UpdateBalance: function(t, e) {
                    0 <= e && (t.txtBalance.text = u.Util.ParseMoney(e, void 0))
                },
                GetJackpot: function(i) {
                    u.Util.ClearTimeOut(l.Config.timeJackpot),
                    $.ajax({
                        type: "GET",
                        url: l.Config.api + "/api/game/JackpotGetAll?CurrencyID=" + l.Config.currencyId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        cache: !1,
                        crossDomain: !0,
                        xhrFields: {
                            withCredentials: !0
                        },
                        success: function(t) {
                            if (t && t.d && i)
                                for (var e = t.d, n = 0; n < e.length; n++)
                                    l.Config.isLobby && o.contents.CountJackPotLobby(n, i.arrJackpot[n], !0, !1, e[n].jackpotFund, 1),
                                    l.Config.roomId === e[n].roomID && o.contents.CountJackPot(i.txtJackpot, !0, !1, e[n].jackpotFund, 1);
                            l.Config.inRoom || (l.Config.timeJackpot = setTimeout(function() {
                                o.contents.GetJackpot(i)
                            }, 5e3))
                        },
                        error: function() {
                            l.Config.inRoom || (l.Config.timeJackpot = setTimeout(function() {
                                o.contents.GetJackpot(i)
                            }, 5e3))
                        }
                    })
                },
                CountJackPotLobby: function(t, e, n, i, o, r) {
                    null === l.Config.countJpLobby[t] ? (l.Config.countJpLobby[t] = new u.Util.CountUp(e,n,i,0,o,0,r,void 0),
                    l.Config.countJpLobby[t].start()) : l.Config.countJpLobby[t].update(o)
                },
                CountJackPot: function(t, e, n, i, o) {
                    null === l.Config.countJp ? (l.Config.countJp = new u.Util.CountUp(t,e,n,0,i,0,o,void 0),
                    l.Config.countJp.start()) : l.Config.countJp.update(i)
                },
                CountDautu: function(t, e, n, i, o) {
                    null === l.Config.countDautu ? (l.Config.countDautu = new u.Util.CountUp(t,e,n,0,i,0,o,void 0),
                    l.Config.countDautu.start()) : l.Config.countDautu.update(i)
                },
                CountBalance: function(t, e, n, i, o) {
                    null === l.Config.countBalance ? (l.Config.countBalance = new u.Util.CountUp(t,e,n,0,i,0,o,void 0),
                    l.Config.countBalance.start()) : l.Config.countBalance.update(i)
                },
                ChangeResources: function(t) {},
                CountNumber: function(t, e, n, i, o, r, a, s) {
                    var h = new u.Util.CountUp(t,e,n,i,o,0,a,void 0);
                    s ? h.start(s) : h.start()
                },
                CountMoney: function(t, e, n, i, o, r, a, s, h) {
                    h ? l.Config.countMoneyJw = new u.Util.CountUp(t,e,n,i,o,0,a,void 0) : l.Config.countMoney = new u.Util.CountUp(t,e,n,i,o,0,a,void 0),
                    s ? h ? l.Config.countMoneyJw.start(s) : l.Config.countMoney.start(s) : h ? l.Config.countMoneyJw.start() : l.Config.countMoney.start()
                },
                UpdateControl: function(t) {},
                DisableButton: function(t, e, n) {
                    t.buttonMode = !1,
                    t.interactive = !1,
                    e ? t.texture = TextureCache[e] : n && (t.tint = n)
                },
                EnableButton: function(t, e) {
                    t.buttonMode = !0,
                    t.interactive = !0,
                    e ? t.texture = TextureCache[e] : t.tint = 16777215
                },
                DisableBet: function(t) {
                    for (var e = 0; e < t.betArr.length; e++)
                        o.contents.DisableButton(t.betArr[e]);
                    o.contents.DisableButton(t.btnMode)
                },
                EnableBet: function(t) {
                    for (var e = 0; e < t.betArr.length; e++)
                        o.contents.EnableButton(t.betArr[e]);
                    o.contents.EnableButton(t.btnMode)
                },
                DisableButtons: function(t) {
                    o.contents.DisableBet(t),
                    o.contents.DisableButton(t.btnMode),
                    o.contents.DisableButton(t.btnAnNon, "btn-txt-disable.png"),
                    o.contents.DisableButton(t.btn5050, "btn-txt-disable.png"),
                    o.contents.DisableButton(t.btnDoiVan, "btn-txt-disable.png"),
                    o.contents.DisableButton(t.btnEqualRed, "btn-equal-disable.png"),
                    o.contents.DisableButton(t.btnEqualYellow, "btn-equal-disable.png"),
                    o.contents.DisableButton(t.btnEqualGreen, "btn-equal-disable.png"),
                    o.contents.DisableButton(t.btnOverRed, "btn-over-color-disable.png"),
                    o.contents.DisableButton(t.btnOverYellow, "btn-over-color-disable.png"),
                    o.contents.DisableButton(t.btnOverGreen, "btn-over-color-disable.png"),
                    o.contents.DisableButton(t.btnUnderRed, "btn-under-color-disable.png"),
                    o.contents.DisableButton(t.btnUnderYellow, "btn-under-color-disable.png"),
                    o.contents.DisableButton(t.btnUnderGreen, "btn-under-color-disable.png"),
                    o.contents.DisableButton(t.btnUnder, "btn-under-disable.png"),
                    o.contents.DisableButton(t.btnOver, "btn-over-disable.png")
                },
                EnableButtons: function(t) {
                    o.contents.EnableButton(t.btnAnNon, "btn-an-non-normal.png"),
                    o.contents.EnableButton(t.btn5050, "btn-50-normal.png"),
                    o.contents.EnableButton(t.btnDoiVan, "btn-doi-van-normal.png"),
                    t.currentPlayer.Locations && 0 < parseInt(t.currentPlayer.Locations[2].PrizeValue) && o.contents.EnableButton(t.btnEqualRed, "btn-equal-red-normal.png"),
                    t.currentPlayer.Locations && 0 < parseInt(t.currentPlayer.Locations[4].PrizeValue) && o.contents.EnableButton(t.btnEqualYellow, "btn-equal-yellow-normal.png"),
                    t.currentPlayer.Locations && 0 < parseInt(t.currentPlayer.Locations[3].PrizeValue) && o.contents.EnableButton(t.btnEqualGreen, "btn-equal-green-normal.png"),
                    t.currentPlayer.Locations && 0 < parseInt(t.currentPlayer.Locations[5].PrizeValue) && o.contents.EnableButton(t.btnOverRed, "btn-over-red-normal.png"),
                    t.currentPlayer.Locations && 0 < parseInt(t.currentPlayer.Locations[7].PrizeValue) && o.contents.EnableButton(t.btnOverYellow, "btn-over-yellow-normal.png"),
                    t.currentPlayer.Locations && 0 < parseInt(t.currentPlayer.Locations[6].PrizeValue) && o.contents.EnableButton(t.btnOverGreen, "btn-over-green-normal.png"),
                    t.currentPlayer.Locations && 0 < parseInt(t.currentPlayer.Locations[8].PrizeValue) && o.contents.EnableButton(t.btnUnderRed, "btn-under-red-normal.png"),
                    t.currentPlayer.Locations && 0 < parseInt(t.currentPlayer.Locations[10].PrizeValue) && o.contents.EnableButton(t.btnUnderYellow, "btn-under-yellow-normal.png"),
                    t.currentPlayer.Locations && 0 < parseInt(t.currentPlayer.Locations[9].PrizeValue) && o.contents.EnableButton(t.btnUnderGreen, "btn-under-green-normal.png"),
                    t.currentPlayer.Locations && 0 < parseInt(t.currentPlayer.Locations[1].PrizeValue) && o.contents.EnableButton(t.btnUnder, "btn-under-normal.png"),
                    t.currentPlayer.Locations && 0 < parseInt(t.currentPlayer.Locations[0].PrizeValue) && o.contents.EnableButton(t.btnOver, "btn-over-normal.png")
                },
                CheckLoginOrInRoom: function(t) {
                    var e = t;
                    return !l.Config.isSpin && (l.Config.isLogin ? !!l.Config.inRoom || (e.ShowMessage(Message.GetMessage("sl79")),
                    !1) : (e.ShowMessage(Language.GetMessage("app003")),
                    !1))
                },
                DeleteTimer: function() {},
                ClearTimer: function() {},
                DeleteTweens: function() {
                    for (var t = TweenMax.getAllTweens(), e = 0; e < t.length; e++)
                        "ocean-eff" !== t[e].data && "ocean" !== t[e].data || t[e].kill()
                },
                NumberColor: function(t) {
                    return t % 3 == 0 ? "green.png" : t % 3 == 1 ? "red.png" : t % 3 == 2 ? "yellow.png" : ""
                }
            }
        },
        3: function(t, e) {
            t.exports = r
        },
        50: function(t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.game = void 0;
            var i = n(51)
              , o = n(3)
              , r = (a.prototype.delete = function() {
                this.game.Delete()
            }
            ,
            a);
            function a(t) {
                o.load({
                    custom: {
                        families: ["Roboto"]
                    },
                    fontactive: function() {}
                }),
                this.game = new i.games(t)
            }
            e.game = r
        },
        51: function(t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.games = void 0;
            var i = n(0)
              , o = n(52)
              , r = n(53)
              , a = n(13)
              , s = n(23)
              , h = n(54);
            n(1);
            var l = (u.prototype.Init = function() {
                PIXI.utils.skipHello(),
                this.application = new PIXI.Application(this.size[0],this.size[1],{
                    antialias: !0,
                    view: this.target,
                    transparent: !0
                }),
                this.application.ticker.add(this.Update),
                this.application.ticker.speed = 2,
                this.application.ticker.minFPS = 60,
                this.InitContainer();
                var t = this;
                this.loader.load(function() {
                    return t.Loading(t)
                }, function() {
                    $("#divLoading").hide(),
                    t.InitGame(),
                    t.InitHubs()
                })
            }
            ,
            u.prototype.Loading = function(t) {
                console.log("progress", t),
                $("#divLoading").show(),
                0 < $("#divLoading .loading-percent").length ? ($("#divLoading .loading-percent").css("width", parseInt(t.loader.loader.progress) + "%"),
                $("#divLoading .loading-text").html(parseInt(t.loader.loader.progress) + "%")) : ($("#loading-progress span").css("width", parseInt(t.loader.loader.progress) + "%"),
                $("#loading-progress-txt").html(parseInt(t.loader.loader.progress) + "%"))
            }
            ,
            u.prototype.InitHubs = function() {
                this.hubs = new o.default(a.Config.hubUrl + "gameHub",this.token,this)
            }
            ,
            u.prototype.Update = function() {}
            ,
            u.prototype.ResetTweenTab = function() {
                window.addEventListener("blur", function() {
                    TweenLite.lagSmoothing(0)
                }, !1),
                window.addEventListener("focus", function() {
                    TweenLite.lagSmoothing(1e3, 16)
                }, !1)
            }
            ,
            u.prototype.Resize = function(t) {
                var e;
                t.size = [$(window).width(), $(window).height()],
                t.application.renderer.resize($(window).width(), $(window).height()),
                t.size[0] < 1003 || t.size[1] < 507 ? (e = Math.min(t.size[0] / 1003, t.size[1] / 507),
                t.bg.scale.set(e),
                t.assets.scale.set(e),
                t.boxGuide.scale.set(e)) : (t.bg.scale.set(1),
                t.assets.scale.set(1),
                t.boxGuide.scale.set(1)),
                t.bg.anchor.set(.5, 0),
                t.bg.position.set(t.size[0] / 2, 0),
                t.assets.anchor.set(.5, 0),
                t.assets.position.set(t.size[0] / 2, 0),
                t.boxGuide.anchor.set(.5),
                t.boxGuide.position.set(t.size[0] / 2, t.size[1] / 2)
            }
            ,
            u.prototype.InitContainer = function() {
                this.mainContainer = new Container,
                this.gameContainer = new Container,
                this.effectContainer = new Container,
                this.popupContainer = new Container,
                this.numberContainer = new Container,
                this.guideContainer = new Container,
                this.application.stage.addChild(this.mainContainer, this.effectContainer, this.guideContainer, this.popupContainer)
            }
            ,
            u.prototype.InitGame = function() {
                var t = this;
                this.filter = new PIXI.filters.ColorMatrixFilter,
                this.filter.matrix = [1, 0, 0, .1, 0, 0, 1, 0, .1, 0, 0, 0, 1, .1, 0, 0, 0, 0, 1, 0],
                this.filterGray = new PIXI.filters.ColorMatrixFilter,
                this.filterGray.matrix = [.3, .59, .11, 0, 0, .3, .59, .11, 0, 0, .3, .59, .11, 0, 0, 0, 0, 0, 1, 0],
                this.InitBg(),
                this.InitFrames(),
                this.InitAssets(),
                this.InitPlay(),
                this.InitGuide(),
                s.contents.DisableButtons(this),
                s.contents.EnableButton(this.btnMode),
                this.numberArr = [],
                this.Resize(this),
                this.resizeFunc = function() {
                    return t.Resize(t)
                }
                ,
                window.addEventListener("resize", this.resizeFunc)
            }
            ,
            u.prototype.InitFrames = function() {
                this.framesCar = [],
                this.framesCar = framesFromTilesetImage("framesCar", 183, 110)
            }
            ,
            u.prototype.InitBg = function() {
                this.bg = new Sprite(TextureCache["bg.jpg"]),
                this.bg.anchor.set(.5, 0),
                this.bg.position.set(this.size[0] / 2, 0),
                this.mainContainer.addChild(this.bg)
            }
            ,
            u.prototype.InitAssets = function() {
                this.assets = new Sprite,
                this.assets.anchor.set(.5, 0),
                this.assets.position.set(this.size[0] / 2, 0),
                this.btnBack = new Sprite(TextureCache["btn-back.png"]),
                this.btnBack.anchor.set(.5),
                this.btnBack.position.set(-470, 44),
                this.btnBack.interactive = !0,
                this.btnBack.buttonMode = !0,
                this.btnBack.on("pointerover", this.BtnTintOver.bind(this.btnBack, this)).on("pointerout", this.BtnTintOut.bind(this.btnBack, this)).on("pointerdown", this.BtnBackDown.bind(this.btnBack, this)),
                this.txtUserName = new PIXI.Text("undefined" != typeof App && App.Account ? App.account.nickname : "",{
                    fontFamily: "Roboto",
                    fontSize: 13,
                    fontStyle: "italic",
                    fill: ["white"],
                    padding: 10
                }),
                this.txtUserName.anchor.set(.5),
                this.txtUserName.position.set(-320, 32),
                this.txtBalance = new PIXI.Text("undefined" != typeof App && App.Account ? i.Util.ParseMoney(App.account.goldbalance) : "",{
                    fontFamily: "Roboto",
                    fontSize: 15,
                    fontWeight: "bold",
                    fill: ["#ffb600"]
                }),
                this.txtBalance.anchor.set(.5),
                this.txtBalance.position.set(-320, 50),
                this.lblJackpot = new PIXI.Text("jackpot".toUpperCase(),{
                    fontFamily: "Roboto",
                    fontSize: 20,
                    fontWeight: "bold",
                    fill: ["#ffb600"]
                }),
                this.lblJackpot.anchor.set(.5),
                this.lblJackpot.position.set(38, 17),
                this.txtJackpot = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 14,
                    fontWeight: "bold",
                    fill: ["yellow"]
                }),
                this.txtJackpot.anchor.set(.5),
                this.txtJackpot.position.set(38, 44),
                this.btnGuide = new Sprite,
                this.btnGuide.hitArea = new Rectangle(-37,-27,74,54),
                this.btnGuide.anchor.set(.5),
                this.btnGuide.position.set(326, 46),
                this.btnGuide.interactive = !0,
                this.btnGuide.buttonMode = !0,
                this.btnGuide.on("pointerover", this.BtnSettingOver.bind(this.btnGuide, this)).on("pointerout", this.BtnSettingOut.bind(this.btnGuide, this)).on("pointerdown", this.BtnGuideDown.bind(this.btnGuide, this)),
                this.btnGuide.addChild(new Sprite(TextureCache["icon-guide.png"])),
                this.btnGuide.children[0].anchor.set(.5),
                this.btnGuide.children[0].position.set(0, -6),
                this.btnGuide.addChild(new PIXI.Text(Message.GetMessage("sl19"),{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                })),
                this.btnGuide.children[1].anchor.set(.5),
                this.btnGuide.children[1].position.set(0, 10),
                this.btnHistory = new Sprite,
                this.btnHistory.hitArea = new Rectangle(-26.5,-27,63,54),
                this.btnHistory.anchor.set(.5),
                this.btnHistory.position.set(391, 46),
                this.btnHistory.interactive = !0,
                this.btnHistory.buttonMode = !0,
                this.btnHistory.on("pointerover", this.BtnSettingOver.bind(this.btnHistory, this)).on("pointerout", this.BtnSettingOut.bind(this.btnHistory, this)).on("pointerdown", this.BtnHistoryDown.bind(this.btnHistory, this)),
                this.btnHistory.addChild(new Sprite(TextureCache["icon-history.png"])),
                this.btnHistory.children[0].anchor.set(.5),
                this.btnHistory.children[0].position.set(0, -6),
                this.btnHistory.addChild(new PIXI.Text(Message.GetMessage("sl34"),{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                })),
                this.btnHistory.children[1].anchor.set(.5),
                this.btnHistory.children[1].position.set(0, 10),
                this.btnRank = new Sprite,
                this.btnRank.hitArea = new Rectangle(-34.5,-27,69,54),
                this.btnRank.anchor.set(.5),
                this.btnRank.position.set(463, 46),
                this.btnRank.interactive = !0,
                this.btnRank.buttonMode = !0,
                this.btnRank.on("pointerover", this.BtnSettingOver.bind(this.btnRank, this)).on("pointerout", this.BtnSettingOut.bind(this.btnRank, this)).on("pointerdown", this.BtnRankDown.bind(this.btnRank, this)),
                this.btnRank.addChild(new Sprite(TextureCache["icon-rank.png"])),
                this.btnRank.children[0].anchor.set(.5),
                this.btnRank.children[0].position.set(0, -6),
                this.btnRank.addChild(new PIXI.Text(Message.GetMessage("sl86"),{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                })),
                this.btnRank.children[1].anchor.set(.5),
                this.btnRank.children[1].position.set(0, 10),
                this.lblGetJackpot = new PIXI.Text(Message.GetMessage("ca186"),{
                    fontFamily: "Roboto",
                    fontSize: 14,
                    fontWeight: "bold",
                    fontStyle: "italic",
                    fill: ["#ffb600"],
                    padding: 20
                }),
                this.lblGetJackpot.anchor.set(.5),
                this.lblGetJackpot.position.set(-460, 110),
                this.lblTongDiem = new PIXI.Text(Message.GetMessage("ca187"),{
                    fontFamily: "Roboto",
                    fontSize: 13,
                    fill: ["white"],
                    fontStyle: "italic"
                }),
                this.lblTongDiem.anchor.set(.5),
                this.lblTongDiem.position.set(-355, 90),
                this.txtTongDiem = new PIXI.Text("0/200",{
                    fontFamily: "Roboto",
                    fontSize: 14,
                    fontWeight: "bold",
                    fontStyle: "italic",
                    fill: ["#ffb600"],
                    padding: 20
                }),
                this.txtTongDiem.anchor.set(.5),
                this.txtTongDiem.position.set(-355, 110),
                this.lblChonDung = new PIXI.Text(Message.GetMessage("ca188"),{
                    fontFamily: "Roboto",
                    fontSize: 13,
                    fill: ["white"],
                    fontStyle: "italic"
                }),
                this.lblChonDung.anchor.set(.5),
                this.lblChonDung.position.set(-210, 87),
                this.btnRed = new Sprite(TextureCache["choose-red-disable.png"]),
                this.btnRed.name = "choose-red-disable.png",
                this.btnRed.anchor.set(.5),
                this.btnRed.position.set(-170, 110),
                this.btnYellow = new Sprite(TextureCache["choose-yellow-disable.png"]),
                this.btnYellow.name = "choose-yellow-disable.png",
                this.btnYellow.anchor.set(.5),
                this.btnYellow.position.set(-210, 110),
                this.btnGreen = new Sprite(TextureCache["choose-green-disable.png"]),
                this.btnGreen.name = "choose-green-disable.png",
                this.btnGreen.anchor.set(.5),
                this.btnGreen.position.set(-250, 110),
                this.chooseColor = [this.btnGreen, this.btnYellow, this.btnRed],
                this.lblDoiVan = new PIXI.Text(Message.GetMessage("ca182"),{
                    fontFamily: "Roboto",
                    fontSize: 13,
                    fontStyle: "italic",
                    fill: ["white"],
                    padding: 10
                }),
                this.lblDoiVan.anchor.set(.5),
                this.lblDoiVan.position.set(-40, 92),
                this.lbl148 = new PIXI.Text("1 - 48",{
                    fontFamily: "Roboto",
                    fontSize: 13,
                    fontStyle: "italic",
                    fill: ["white"],
                    padding: 10
                }),
                this.lbl148.anchor.set(.5),
                this.lbl148.position.set(-40, 132),
                this.barDoiVan = new Sprite(TextureCache["bar-orange.png"]),
                this.barDoiVan.anchor.set(0, .5),
                this.barDoiVan.position.set(-122, 110),
                this.maskDoiVan = new Graphics,
                this.maskDoiVan.drawRect(0, 0, 164, 15),
                this.maskDoiVan.position.set(-122, 103),
                this.barNumber = new Sprite(TextureCache["bar-blue.png"]),
                this.barNumber.anchor.set(0, .5),
                this.barNumber.position.set(-122, 150),
                this.maskNumber = new Graphics,
                this.maskNumber.drawRect(0, 0, 164, 15),
                this.maskNumber.position.set(-122, 143),
                this.barDoiVan.mask = this.maskDoiVan,
                this.barNumber.mask = this.maskNumber,
                this.btnPrev = new Sprite(TextureCache["btn-prev-next.png"]),
                this.btnPrev.anchor.set(.5),
                this.btnPrev.scale.x = -1,
                this.btnPrev.position.set(-479, 145),
                this.btnPrev.interactive = !0,
                this.btnPrev.buttonMode = !0,
                this.btnPrev.on("pointerover", this.BtnTintOver.bind(this.btnPrev, this)).on("pointerout", this.BtnTintOut.bind(this.btnPrev, this)).on("pointerdown", this.BtnPrevDown.bind(this.btnPrev, this)),
                this.btnNext = new Sprite(TextureCache["btn-prev-next.png"]),
                this.btnNext.anchor.set(.5),
                this.btnNext.position.set(-163, 145),
                this.btnNext.interactive = !0,
                this.btnNext.buttonMode = !0,
                this.btnNext.on("pointerover", this.BtnTintOver.bind(this.btnNext, this)).on("pointerout", this.BtnTintOut.bind(this.btnNext, this)).on("pointerdown", this.BtnNextDown.bind(this.btnNext, this)),
                this.nCon = new Sprite,
                this.nCon.anchor.set(.5),
                this.nCon.position.set(-321, 145),
                this.nConMask = new Graphics,
                this.nConMask.drawRect(0, 0, 270, 24),
                this.nConMask.position.set(-456, 132),
                this.nCon.mask = this.nConMask,
                this.nCon.addChild(this.numberContainer),
                this.btnMode = new Sprite(TextureCache["btn-mode.png"]),
                this.btnMode.anchor.set(.5),
                this.btnMode.position.set(-438, 470),
                this.btnMode.interactive = !0,
                this.btnMode.buttonMode = !0,
                this.btnMode.on("pointerover", this.BtnTintOver.bind(this.btnMode, this)).on("pointerout", this.BtnTintOut.bind(this.btnMode, this)).on("pointerdown", this.BtnModeDown.bind(this.btnMode, this)),
                this.lblMode = new PIXI.Text(Message.GetMessage("sl9").toUpperCase(),{
                    fontFamily: "Roboto",
                    fontSize: 18,
                    fill: ["white"],
                    stroke: "black",
                    strokeThickness: 3
                }),
                this.lblMode.anchor.set(.5),
                this.lblMode.position.set(0, 0),
                this.btnMode.addChild(this.lblMode),
                this.betBg = new Sprite(TextureCache["icon-money-active.png"]),
                this.betBg.anchor.set(.5),
                this.betBg.visible = !1,
                this.assets.addChild(this.btnBack, this.txtUserName, this.txtBalance, this.lblJackpot, this.txtJackpot, this.btnGuide, this.btnHistory, this.btnRank, this.lblGetJackpot, this.lblTongDiem, this.txtTongDiem, this.lblChonDung, this.btnRed, this.btnYellow, this.btnGreen, this.lblDoiVan, this.lbl148, this.barDoiVan, this.maskDoiVan, this.barNumber, this.maskNumber, this.btnPrev, this.btnNext, this.nCon, this.nConMask, this.btnMode, this.betBg),
                this.betArr = [];
                for (var t = 0; t < a.Config.arrRoom.length; t++)
                    this.betArr.push(new Sprite(TextureCache["icon-money-" + (t + 1) + ".png"])),
                    this.betArr[t].anchor.set(.5),
                    this.betArr[t].position.set(this.betArrPos[t][0], this.betArrPos[t][1]),
                    this.betArr[t].roomId = t + 1,
                    this.betArr[t].value = a.Config.arrRoom[t],
                    this.betArr[t].addChild(new PIXI.Text(i.Util.MoneyHelper(a.Config.arrRoom[t]).toString(),{
                        fontFamily: "Roboto",
                        fontSize: 13,
                        fill: ["white"]
                    })),
                    this.betArr[t].children[0].anchor.set(.5),
                    this.betArr[t].children[0].position.set(0, 32),
                    this.assets.addChild(this.betArr[t]),
                    this.betArr[t].interactive = !0,
                    this.betArr[t].buttonMode = !0,
                    this.betArr[t].on("pointerover", this.BtnTintOver.bind(this.betArr[t], this)).on("pointerout", this.BtnTintOut.bind(this.betArr[t], this)).on("pointerdown", this.BetArrDown.bind(this.betArr[t], this));
                this.lblDauTu = new PIXI.Text(Message.GetMessage("ca191"),{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.lblDauTu.anchor.set(.5),
                this.lblDauTu.position.set(114, 118),
                this.lblKetSat = new PIXI.Text(Message.GetMessage("ca192"),{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.lblKetSat.anchor.set(.5),
                this.lblKetSat.position.set(336, 118),
                this.txtMoneyDauTu = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 13,
                    fill: ["#ffb600"]
                }),
                this.txtMoneyDauTu.anchor.set(.5),
                this.txtMoneyDauTu.position.set(205, 118),
                this.txtMoneyKetSat = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 13,
                    fill: ["#ffb600"]
                }),
                this.txtMoneyKetSat.anchor.set(.5),
                this.txtMoneyKetSat.position.set(426, 118),
                this.btnEqualRed = new Sprite(TextureCache["btn-equal-red-normal.png"]),
                this.btnEqualRed.name = "btn-equal-red-normal.png",
                this.btnEqualRed.inx = 3,
                this.btnEqualRed.anchor.set(.5),
                this.btnEqualRed.position.set(121, 185),
                this.btnEqualRed.interactive = !0,
                this.btnEqualRed.buttonMode = !0,
                this.btnEqualRed.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnStartDown.bind(this.btnEqualRed, this)),
                this.btnEqualYellow = new Sprite(TextureCache["btn-equal-yellow-normal.png"]),
                this.btnEqualYellow.anchor.set(.5),
                this.btnEqualYellow.position.set(217, 185),
                this.btnEqualYellow.name = "btn-equal-yellow-normal.png",
                this.btnEqualYellow.inx = 5,
                this.btnEqualYellow.interactive = !0,
                this.btnEqualYellow.buttonMode = !0,
                this.btnEqualYellow.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnStartDown.bind(this.btnEqualYellow, this)),
                this.btnEqualGreen = new Sprite(TextureCache["btn-equal-green-normal.png"]),
                this.btnEqualGreen.anchor.set(.5),
                this.btnEqualGreen.position.set(312, 185),
                this.btnEqualGreen.name = "btn-equal-green-normal.png",
                this.btnEqualGreen.inx = 4,
                this.btnEqualGreen.interactive = !0,
                this.btnEqualGreen.buttonMode = !0,
                this.btnEqualGreen.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnStartDown.bind(this.btnEqualGreen, this)),
                this.btnOverRed = new Sprite(TextureCache["btn-over-red-normal.png"]),
                this.btnOverRed.anchor.set(.5),
                this.btnOverRed.position.set(121, 276),
                this.btnOverRed.name = "btn-over-red-normal.png",
                this.btnOverRed.inx = 6,
                this.btnOverRed.interactive = !0,
                this.btnOverRed.buttonMode = !0,
                this.btnOverRed.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnStartDown.bind(this.btnOverRed, this)),
                this.btnOverYellow = new Sprite(TextureCache["btn-over-yellow-normal.png"]),
                this.btnOverYellow.anchor.set(.5),
                this.btnOverYellow.position.set(217, 276),
                this.btnOverYellow.name = "btn-over-yellow-normal.png",
                this.btnOverYellow.inx = 8,
                this.btnOverYellow.interactive = !0,
                this.btnOverYellow.buttonMode = !0,
                this.btnOverYellow.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnStartDown.bind(this.btnOverYellow, this)),
                this.btnOverGreen = new Sprite(TextureCache["btn-over-green-normal.png"]),
                this.btnOverGreen.anchor.set(.5),
                this.btnOverGreen.position.set(312, 276),
                this.btnOverGreen.name = "btn-over-green-normal.png",
                this.btnOverGreen.inx = 7,
                this.btnOverGreen.interactive = !0,
                this.btnOverGreen.buttonMode = !0,
                this.btnOverGreen.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnStartDown.bind(this.btnOverGreen, this)),
                this.btnUnderRed = new Sprite(TextureCache["btn-under-red-normal.png"]),
                this.btnUnderRed.anchor.set(.5),
                this.btnUnderRed.position.set(121, 369),
                this.btnUnderRed.name = "btn-under-red-normal.png",
                this.btnUnderRed.inx = 9,
                this.btnUnderRed.interactive = !0,
                this.btnUnderRed.buttonMode = !0,
                this.btnUnderRed.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnStartDown.bind(this.btnUnderRed, this)),
                this.btnUnderYellow = new Sprite(TextureCache["btn-under-yellow-normal.png"]),
                this.btnUnderYellow.anchor.set(.5),
                this.btnUnderYellow.position.set(217, 369),
                this.btnUnderYellow.name = "btn-under-yellow-normal.png",
                this.btnUnderYellow.inx = 11,
                this.btnUnderYellow.interactive = !0,
                this.btnUnderYellow.buttonMode = !0,
                this.btnUnderYellow.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnStartDown.bind(this.btnUnderYellow, this)),
                this.btnUnderGreen = new Sprite(TextureCache["btn-under-green-normal.png"]),
                this.btnUnderGreen.anchor.set(.5),
                this.btnUnderGreen.position.set(312, 369),
                this.btnUnderGreen.name = "btn-under-green-normal.png",
                this.btnUnderGreen.inx = 10,
                this.btnUnderGreen.interactive = !0,
                this.btnUnderGreen.buttonMode = !0,
                this.btnUnderGreen.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnStartDown.bind(this.btnUnderGreen, this)),
                this.btnUnder = new Sprite(TextureCache["btn-under-normal.png"]),
                this.btnUnder.anchor.set(.5),
                this.btnUnder.position.set(428.5, 370),
                this.btnUnder.name = "btn-under-normal.png",
                this.btnUnder.inx = 2,
                this.btnUnder.interactive = !0,
                this.btnUnder.buttonMode = !0,
                this.btnUnder.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnStartDown.bind(this.btnUnder, this)),
                this.btnOver = new Sprite(TextureCache["btn-over-normal.png"]),
                this.btnOver.anchor.set(.5),
                this.btnOver.position.set(428.5, 200),
                this.btnOver.name = "btn-over-normal.png",
                this.btnOver.inx = 1,
                this.btnOver.interactive = !0,
                this.btnOver.buttonMode = !0,
                this.btnOver.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnStartDown.bind(this.btnOver, this)),
                this.btnAnNon = new Sprite(TextureCache["btn-an-non-normal.png"]),
                this.btnAnNon.anchor.set(.5),
                this.btnAnNon.position.set(144, 462),
                this.btnAnNon.name = "btn-an-non-normal.png",
                this.btnAnNon.interactive = !0,
                this.btnAnNon.buttonMode = !0,
                this.btnAnNon.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnAnNonDown.bind(this.btnAnNon, this)),
                this.txtAnNon = new PIXI.Text(Message.GetMessage("ca183"),{
                    fontFamily: "Roboto",
                    fontSize: 14,
                    fill: ["black"]
                }),
                this.txtAnNon.anchor.set(.5),
                this.btnAnNon.addChild(this.txtAnNon),
                this.btn5050 = new Sprite(TextureCache["btn-50-normal.png"]),
                this.btn5050.anchor.set(.5),
                this.btn5050.position.set(285, 462),
                this.btn5050.name = "btn-50-normal.png",
                this.btn5050.interactive = !0,
                this.btn5050.buttonMode = !0,
                this.btn5050.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.Btn5050Down.bind(this.btn5050, this)),
                this.txt50 = new PIXI.Text(Message.GetMessage("sl87"),{
                    fontFamily: "Roboto",
                    fontSize: 14,
                    fill: ["black"]
                }),
                this.txt50.anchor.set(.5),
                this.btn5050.addChild(this.txt50),
                this.btnDoiVan = new Sprite(TextureCache["btn-doi-van-normal.png"]),
                this.btnDoiVan.anchor.set(.5),
                this.btnDoiVan.position.set(424, 462),
                this.btnDoiVan.name = "btn-doi-van-normal.png",
                this.btnDoiVan.interactive = !0,
                this.btnDoiVan.buttonMode = !0,
                this.btnDoiVan.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnUp).on("pointerup", this.BtnDoiVanDown.bind(this.btnDoiVan, this)),
                this.txtDoiVan = new PIXI.Text(Message.GetMessage("ca182"),{
                    fontFamily: "Roboto",
                    fontSize: 14,
                    fill: ["black"]
                }),
                this.txtDoiVan.anchor.set(.5),
                this.btnDoiVan.addChild(this.txtDoiVan),
                this.txtMoneyRed = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.txtMoneyRed.anchor.set(.5),
                this.txtMoneyRed.position.set(121, 222),
                this.txtMoneyOverRed = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.txtMoneyOverRed.anchor.set(.5),
                this.txtMoneyOverRed.position.set(121, 313),
                this.txtMoneyUnderRed = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.txtMoneyUnderRed.anchor.set(.5),
                this.txtMoneyUnderRed.position.set(121, 405),
                this.txtMoneyYellow = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.txtMoneyYellow.anchor.set(.5),
                this.txtMoneyYellow.position.set(217, 222),
                this.txtMoneyOverYellow = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.txtMoneyOverYellow.anchor.set(.5),
                this.txtMoneyOverYellow.position.set(217, 313),
                this.txtMoneyUnderYellow = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.txtMoneyUnderYellow.anchor.set(.5),
                this.txtMoneyUnderYellow.position.set(217, 405),
                this.txtMoneyGreen = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.txtMoneyGreen.anchor.set(.5),
                this.txtMoneyGreen.position.set(312, 222),
                this.txtMoneyOverGreen = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.txtMoneyOverGreen.anchor.set(.5),
                this.txtMoneyOverGreen.position.set(312, 313),
                this.txtMoneyUnderGreen = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.txtMoneyUnderGreen.anchor.set(.5),
                this.txtMoneyUnderGreen.position.set(312, 405),
                this.txtMoneyOver = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.txtMoneyOver.anchor.set(.5),
                this.txtMoneyOver.position.set(428.5, 266),
                this.txtMoneyUnder = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["black"]
                }),
                this.txtMoneyUnder.anchor.set(.5),
                this.txtMoneyUnder.position.set(428.5, 308),
                this.assets.addChild(this.lblDauTu, this.lblKetSat, this.txtMoneyDauTu, this.txtMoneyKetSat, this.btnEqualRed, this.btnEqualYellow, this.btnEqualGreen, this.btnOverRed, this.btnOverYellow, this.btnOverGreen, this.btnUnderRed, this.btnUnderYellow, this.btnUnderGreen, this.btnUnder, this.btnOver, this.btnAnNon, this.btn5050, this.btnDoiVan, this.txtMoneyRed, this.txtMoneyOverRed, this.txtMoneyUnderRed, this.txtMoneyYellow, this.txtMoneyOverYellow, this.txtMoneyUnderYellow, this.txtMoneyGreen, this.txtMoneyOverGreen, this.txtMoneyUnderGreen, this.txtMoneyOver, this.txtMoneyUnder),
                this.mainContainer.addChild(this.assets),
                this.locationTxt = [this.txtMoneyOver, this.txtMoneyUnder, this.txtMoneyRed, this.txtMoneyGreen, this.txtMoneyYellow, this.txtMoneyOverRed, this.txtMoneyOverGreen, this.txtMoneyOverYellow, this.txtMoneyUnderRed, this.txtMoneyUnderGreen, this.txtMoneyUnderYellow]
            }
            ,
            u.prototype.InitPlay = function() {
                this.main = new Sprite(TextureCache["main.png"]),
                this.main.anchor.set(.5),
                this.main.position.set(-226, 297.5),
                this.mask = new Graphics,
                this.mask.drawRect(0, 0, 542, 255),
                this.mask.position.set(-497, 170),
                this.main.mask = this.mask,
                this.main.addChild(this.gameContainer),
                this.btnPlay = new Sprite(TextureCache["btn-play.png"]),
                this.btnPlay.anchor.set(.5),
                this.btnPlay.position.set(-226, 297.5),
                this.btnPlay.interactive = !0,
                this.btnPlay.buttonMode = !0,
                this.btnPlay.on("pointerover", this.BtnTintOver.bind(this.btnPlay, this)).on("pointerout", this.BtnTintOut.bind(this.btnPlay, this)).on("pointerdown", this.BtnPlayDown.bind(this.btnPlay, this)),
                this.txtPlay = new PIXI.Text(Message.GetMessage("ca193").toUpperCase(),{
                    fontFamily: "Roboto",
                    fontSize: 23,
                    fontWeight: "bold",
                    fill: ["white"],
                    padding: 10
                }),
                this.txtPlay.anchor.set(.5),
                this.txtPlay.position.set(-5, 2.5),
                this.btnPlay.addChild(this.txtPlay),
                this.txtNotify = new PIXI.Text("Hệ thống bận",{
                    fontFamily: "Roboto",
                    fontSize: 12,
                    fill: ["yellow"],
                    padding: 10
                }),
                this.txtNotify.anchor.set(.5),
                this.txtNotify.y = -150,
                this.txtNotify.pos = -150,
                this.txtMoney = new PIXI.Text("0",{
                    fontFamily: "Roboto",
                    fontSize: 40,
                    fontWeight: "bold",
                    fill: ["red"],
                    stroke: "black",
                    padding: 10,
                    strokeThickness: 2
                }),
                this.txtMoney.anchor.set(.5),
                this.txtMoney.position.set(-226, 377.5),
                this.main.addChild(this.txtNotify),
                this.txtMoney.visible = !1,
                this.assets.addChild(this.main, this.mask, this.btnPlay, this.txtMoney)
            }
            ,
            u.prototype.InitGuide = function() {
                var t = this;
                this.boxGuide = new Sprite(TextureCache.bgGuideSoDo),
                this.guideContainer.addChild(this.boxGuide),
                this.boxGuide.anchor.set(.5),
                this.boxGuide.addChild(new Sprite(TextureCache["sodo-guide-en-1.png"])),
                this.boxGuide.position.set(this.size[0] / 2, this.size[1] / 2),
                this.boxGuide.children[0].anchor.set(.5);
                var e = new PIXI.Text(Message.GetMessage("sl19"),{
                    fontFamily: "Roboto",
                    fontSize: 20,
                    fill: ["black"]
                });
                e.anchor.set(0, .5),
                e.position.set(-this.boxGuide.width / 2 + 45, -this.boxGuide.height / 2 + 30);
                var n = new Sprite(TextureCache["sodo-close-guide-normal.png"]);
                n.name = "sodo-close-guide-normal.png",
                n.anchor.set(.5),
                n.position.set(this.boxGuide.width / 2 - n.width / 2, -this.boxGuide.height / 2 + n.height / 2),
                n.interactive = n.buttonMode = !0,
                n.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", function() {
                    t.boxGuide.visible = !1
                });
                var i = new Sprite(TextureCache["btn-prev-next.png"]);
                i.anchor.set(.5),
                i.scale.x = -1,
                i.position.set(-30, this.boxGuide.height / 2 - i.height / 2 - 12),
                i.interactive = i.buttonMode = !0,
                i.on("pointerover", this.BtnTintOver.bind(i, this)).on("pointerout", this.BtnTintOut.bind(i, this)).on("pointerdown", function() {
                    t.inxG--,
                    t.inxG <= 0 && (t.inxG = 4),
                    t.boxGuide.children[0].texture = TextureCache["sodo-guide-" + a.Config.lang + "-" + t.inxG + ".png"]
                });
                var o = new Sprite(TextureCache["btn-prev-next.png"]);
                o.anchor.set(.5),
                o.position.set(30, this.boxGuide.height / 2 - i.height / 2 - 12),
                this.boxGuide.addChild(o),
                o.interactive = o.buttonMode = !0,
                o.on("pointerover", this.BtnTintOver.bind(o, this)).on("pointerout", this.BtnTintOut.bind(o, this)).on("pointerdown", function() {
                    t.inxG++,
                    4 < t.inxG && (t.inxG = 1),
                    t.boxGuide.children[0].texture = TextureCache["sodo-guide-" + a.Config.lang + "-" + t.inxG + ".png"]
                }),
                this.boxGuide.addChild(e, n, i, o),
                this.boxGuide.visible = !1
            }
            ,
            u.prototype.ShowMessage = function(t) {
                this.txtNotify.text = t,
                this.txtNotify.visible = !0,
                this.txtNotify.y = this.txtNotify.pos;
                var e = this;
                TweenMax.to(this.txtNotify, .5, {
                    data: "predict",
                    y: this.txtNotify.pos + 50
                }),
                setTimeout(function() {
                    TweenMax.to(e.txtNotify, .5, {
                        data: "predict",
                        y: e.txtNotify.pos
                    })
                }, 2500)
            }
            ,
            u.prototype.ShowError = function(t) {
                var e;
                switch (console.log("error", t),
                t) {
                case -51:
                    e = Message.GetMessage("sl40");
                    break;
                case -99:
                    e = Message.GetMessage("sl71");
                    break;
                case -600:
                    e = Message.GetMessage("sl70");
                    break;
                case -40004:
                    e = Message.GetMessage("sl69");
                    break;
                case -40005:
                    e = Message.GetMessage("sl66"),
                    setTimeout(App.handleBack, 2e3);
                    break;
                default:
                    e = t
                }
                this.ShowMessage(e)
            }
            ,
            u.prototype.JoinGame = function(t) {
                var e = this;
                this.hubs.connection.invoke("PlayNow", {
                    RoomID: t,
                    CurrencyID: a.Config.currencyId
                }).then(function(t) {
                    console.log(t),
                    t.c < 0 && (s.contents.DisableButtons(e),
                    s.contents.EnableButton(e.btnMode))
                }).catch(function() {
                    s.contents.DisableButtons(e),
                    s.contents.EnableButton(e.btnMode)
                })
            }
            ,
            u.prototype.JoinRoom = function(t) {
                console.log(t),
                this.accountId = t.AccountID,
                this.currentPlayer = t,
                this.txtUserName.text = t.Account.Nickname,
                this.txtUserName.visible = !0,
                this.txtBalance.text = i.Util.ParseMoney(t.Account.GoldBalance, void 0),
                a.Config.roomId = t.RoomID,
                a.Config.inRoom = !0,
                this.SetActiveRoom(),
                0 < this.currentPlayer.SlotInfo.CurrentStep && 0 < this.currentPlayer.SlotInfo.BetValue ? this.CheckGame(this) : s.contents.EnableBet(this)
            }
            ,
            u.prototype.CheckGame = function(t) {
                t.btnPlay.visible = !1,
                t.numberArr = $.map(t.currentPlayer.SlotInfo.NumberData.split(","), function(t) {
                    return parseInt(t, 10)
                }),
                t.ResetMoney(),
                t.SetMoney(),
                t.SetMoneyDautu(t.currentPlayer.SlotInfo.BetValue),
                t.SetMoneyBalance(t.currentPlayer.Account.GoldBalance),
                s.contents.EnableButtons(t),
                t.CheckKetBac(t.currentPlayer.SlotInfo.BankHalf, t.currentPlayer.SlotInfo.SafeBet),
                t.DumpCart(t.currentPlayer.SlotInfo.DumpCart);
                var e = t.currentPlayer.SlotInfo.NumberData.split(",");
                t.CreateCar(e[e.length - 1]),
                t.RunCar(),
                t.SetColor(t.currentPlayer.SlotInfo.ColorCounts),
                t.UpdateNumber(),
                t.UpdateBarNumber(),
                t.UpdateTotalPoint(t.currentPlayer.SlotInfo.TotalPoints),
                1 === t.currentPlayer.SlotInfo.CurrentStep && s.contents.DisableButton(t.btnAnNon, "btn-txt-disable.png"),
                s.contents.DisableButton(t.btnMode)
            }
            ,
            u.prototype.UpdateNumber = function() {
                if (this.ResetNumber(),
                0 < this.numberArr.length)
                    for (var t = 0, e = this.numberArr.length - 1; 0 <= e; e--) {
                        var n = new Sprite(TextureCache["number-" + this.numberArr[e] + ".png"]);
                        n.anchor.set(.5),
                        n.scale.set(.4),
                        n.position.x = 30 * t - 120,
                        this.numberContainer.addChild(n),
                        t++
                    }
            }
            ,
            u.prototype.UpdateBarNumber = function() {
                if (0 === this.numberArr.length)
                    this.barNumber.width = 0;
                else {
                    for (var t = [], e = 0; e < this.numberArr.length; e++)
                        $.inArray(this.numberArr[e], t) < 0 && t.push(this.numberArr[e]);
                    this.barNumber.width = 164 * t.length / 48
                }
            }
            ,
            u.prototype.SetActiveRoom = function() {
                for (var t = 0; t < this.betArr.length; t++)
                    this.betArr[t].children[0].style.fill = "#ffffff";
                this.betBg.visible = !0,
                this.betBg.position.set(this.betArrPos[a.Config.roomId - 1][0], this.betArrPos[a.Config.roomId - 1][1]),
                this.betArr[a.Config.roomId - 1].children[0].style.fill = "#0fffb4"
            }
            ,
            u.prototype.UpdateJackpot = function(t) {
                s.contents.CountJackPot(this.txtJackpot, !0, !1, t, 1)
            }
            ,
            u.prototype.BtnTintOver = function(t) {
                -1 === this.scale.x ? this.scale.set(-.98, .98) : this.scale.set(.98),
                this.filters = [t.filter]
            }
            ,
            u.prototype.BtnTintOut = function(t) {
                -.98 === this.scale.x ? this.scale.set(-1, 1) : this.scale.set(1),
                this.filters = null
            }
            ,
            u.prototype.BtnOver = function(t) {
                void 0 !== TextureCache[this.name.replace("normal", "hover")] && (this.texture = TextureCache[this.name.replace("normal", "hover")])
            }
            ,
            u.prototype.BtnOut = function(t) {
                this.texture = TextureCache[this.name]
            }
            ,
            u.prototype.BtnUp = function(t) {
                void 0 !== TextureCache[this.name.replace("normal", "click")] && (this.texture = TextureCache[this.name.replace("normal", "click")])
            }
            ,
            u.prototype.BtnSettingOver = function(t) {
                this.scale.set(.9)
            }
            ,
            u.prototype.BtnSettingOut = function(t) {
                this.scale.set(1)
            }
            ,
            u.prototype.BtnGuideDown = function(t) {
                t.inxG = 1,
                t.boxGuide.children[0].texture = TextureCache["sodo-guide-" + a.Config.lang + "-" + t.inxG + ".png"],
                t.boxGuide.visible = !t.boxGuide.visible
            }
            ,
            u.prototype.BtnHistoryDown = function(t) {
                t.his()
            }
            ,
            u.prototype.BtnRankDown = function(t) {
                t.trans()
            }
            ,
            u.prototype.BtnBackDown = function(t) {
                window.location.hash = "#",
                window.location.reload()
            }
            ,
            u.prototype.BtnPrevDown = function(t) {}
            ,
            u.prototype.BtnNextDown = function(t) {}
            ,
            u.prototype.BtnModeDown = function(t) {
                a.Config.isTry ? (a.Config.isTry = !1,
                delete t.trial,
                t.lblMode.text = Message.GetMessage("sl9").toUpperCase(),
                t.currentPlayerMain && (t.currentPlayer = t.currentPlayerMain,
                t.JoinRoom(t.currentPlayer),
                t.currentPlayerMain = null)) : (t.lblMode.text = Message.GetMessage("sl8").toUpperCase(),
                t.trial = new h.trial(t))
            }
            ,
            u.prototype.BetArrDown = function(t) {
                a.Config.isTry ? (t.trial.RoomID = this.roomId,
                t.trial.Jackpot = t.trial.JackPotArr[t.trial.RoomID - 1],
                t.txtJackpot.text = i.Util.ParseMoney(t.trial.Jackpot),
                a.Config.roomId = this.roomId,
                t.SetActiveRoom()) : t.JoinGame(this.roomId)
            }
            ,
            u.prototype.BtnStartDown = function(t) {
                t.Play(this.inx, 1)
            }
            ,
            u.prototype.BtnAnNonDown = function(t) {
                a.Config.isTry ? t.trial.Play(0, 4) : t.Play(0, 4)
            }
            ,
            u.prototype.Btn5050Down = function(t) {
                a.Config.isTry ? t.trial.Play(0, 3) : t.Play(0, 3)
            }
            ,
            u.prototype.BtnDoiVanDown = function(t) {
                a.Config.isTry ? t.trial.Play(0, 2) : t.Play(0, 2)
            }
            ,
            u.prototype.BtnPlayDown = function(t) {
                a.Config.isTry ? (t.trial.GetBetInfo(),
                this.visible = !1) : a.Config.isLogin && s.contents.CheckLoginOrInRoom(t) && (t.Play(0, 0),
                this.visible = !1)
            }
            ,
            u.prototype.Play = function(t, e) {
                this.DestroyE(),
                s.contents.DisableButtons(this),
                s.contents.DisableBet(this),
                a.Config.isTry ? this.trial.Play(t, e) : this.hubs.connection.invoke("Spin", {
                    RoomID: a.Config.roomId,
                    CurrencyID: a.Config.currencyId,
                    LocationID: t,
                    BetType: e
                }).then(function(t) {
                    console.log(t)
                })
            }
            ,
            u.prototype.StartSpin = function(t) {
                var n = this;
                console.log(t);
                var i = this;
                if (this.currentPlayer = t,
                0 === this.currentPlayer.SpinData.BetType && (this.numberArr = [],
                this.gameContainer.x = 0,
                s.contents.DisableBet(this)),
                4 !== this.currentPlayer.SpinData.BetType)
                    return this.ResetMoney(),
                    this.SetMoneyBalance(this.currentPlayer.Account.GoldBalance),
                    this.SetMoney(),
                    3 === this.currentPlayer.SpinData.BetType ? (console.log("dd"),
                    this.SetMoneyKetBac(this.currentPlayer.SpinData.SafeBet),
                    this.SetMoneyDautu(this.currentPlayer.SpinData.PrizeValue),
                    void setTimeout(function() {
                        s.contents.EnableButtons(i),
                        s.contents.DisableButton(i.btn5050, "btn-txt-disable.png"),
                        i.DumpCart(i.currentPlayer.SpinData.DumpCart)
                    }, 500)) : (this.numberArr.push(this.currentPlayer.SpinData.Number),
                    this.UpdateNumber(),
                    this.UpdateBarNumber(),
                    this.UpdateTotalPoint(this.currentPlayer.SpinData.TotalPoints),
                    this.SetColor(this.currentPlayer.SpinData.ColorCounts),
                    setTimeout(function() {
                        return n.SetMoneyDautu(n.currentPlayer.SpinData.PrizeValue)
                    }, 0 === this.currentPlayer.SpinData.BetType ? 0 : 1500),
                    void (1 === this.currentPlayer.SpinData.BetType || 0 === this.currentPlayer.SpinData.BetType ? (i.CreateCar(this.currentPlayer.SpinData.Number),
                    i.RunCar(),
                    1 === this.currentPlayer.SpinData.BetType ? setTimeout(function() {
                        var t, e;
                        0 < n.currentPlayer.SpinData.PrizeValue ? (e = t = !1,
                        n.txtMoney.visible = !0,
                        n.txtMoney.text = "0",
                        s.contents.CountNumber(n.txtMoney, !0, !1, 0, n.currentPlayer.SpinData.PrizeValue, 0, 1),
                        n.currentPlayer.SpinData.PrizeValue > 100 * n.currentPlayer.BetValue ? (n.Effect(1),
                        t = !0) : 3 <= n.currentPlayer.SpinData.ColorCounts && 200 <= n.currentPlayer.SpinData.TotalPoints && (n.Effect(2),
                        e = t = !0),
                        setTimeout(function() {
                            s.contents.EnableButtons(i),
                            i.DestroyE(),
                            i.DumpCart(n.currentPlayer.SpinData.DumpCart)
                        }, t ? e ? 6e3 : 4e3 : 1500)) : (n.ShowMessage(Message.GetMessage("ol45")),
                        setTimeout(function() {
                            i.ResetGame()
                        }, 1e3))
                    }, 1e3) : (s.contents.EnableButtons(this),
                    s.contents.DisableButton(this.btnAnNon, "btn-txt-disable.png"),
                    s.contents.DisableButton(this.btn5050, "btn-txt-disable.png"))) : 2 === this.currentPlayer.SpinData.BetType && (this.ChangeCar(),
                    setTimeout(function() {
                        i.DestroyE(),
                        s.contents.EnableButtons(i),
                        i.DumpCart(i.currentPlayer.SpinData.DumpCart),
                        i.CheckKetBac(i.currentPlayer.SpinData.BankHalf, n.currentPlayer.SpinData.SafeBet),
                        1 === i.currentPlayer.SpinData.Step && s.contents.DisableButton(i.btnAnNon, "btn-txt-disable.png")
                    }, 1e3))));
                4 !== this.currentPlayer.SpinData.BetType || this.ResetGame()
            }
            ,
            u.prototype.Effect = function(t) {
                var e;
                switch (t) {
                case 1:
                    e = void 0 !== TextureCache["txt-bigwin-" + a.Config.lang + ".png"] ? TextureCache["txt-bigwin-" + a.Config.lang + ".png"] : TextureCache["txt-bigwin-en.png"];
                    break;
                case 2:
                    e = void 0 !== TextureCache["txt-jackpot-" + a.Config.lang + ".png"] ? TextureCache["txt-jackpot-" + a.Config.lang + ".png"] : TextureCache["txt-jackpot-en.png"]
                }
                this.txtEffect = new Sprite(e),
                this.gameContainer.addChild(this.txtEffect),
                this.txtEffect.anchor.set(.5),
                this.txtEffect.y = -200,
                TweenMax.to(this.txtEffect, .5, {
                    data: "predict",
                    y: 0
                }),
                TweenMax.to(this.txtEffect.scale, .5, {
                    data: "predict",
                    x: .9,
                    y: .9,
                    yoyo: !0,
                    repeat: 5,
                    delay: .6
                })
            }
            ,
            u.prototype.DestroyE = function() {
                if (null !== this.txtEffect && void 0 !== this.txtEffect)
                    try {
                        this.txtEffect.destroy()
                    } catch (t) {}
                this.txtMoney.text = "0",
                this.txtMoney.visible = !1
            }
            ,
            u.prototype.ResetGame = function() {
                for (var t = this, e = 0; e < this.gameContainer.children.length; e++) {
                    var n = this.gameContainer.children[e];
                    n.getChildAt(3).visible = !1,
                    n.getChildAt(0).gotoAndPlay(0),
                    TweenMax.to(n.getChildAt(4), .5, {
                        data: "predict",
                        alpha: 0
                    })
                }
                0 < this.gameContainer.children.length && setTimeout(function() {
                    TweenMax.to(t.gameContainer, .5, {
                        data: "predict",
                        x: 600
                    })
                }, 1e3),
                setTimeout(function() {
                    s.contents.DisableButtons(t),
                    s.contents.EnableBet(t),
                    t.ResetMoney(),
                    t.currentPlayer.SpinData.ColorCounts = 0,
                    t.txtMoneyDauTu.text = "0",
                    t.txtMoneyKetSat.text = "0",
                    t.txtTongDiem.text = "0/200",
                    t.btnPlay.visible = !0,
                    t.RemoveCar(),
                    t.numberArr = [],
                    t.DumpCart(0),
                    t.UpdateNumber(),
                    t.UpdateBarNumber(),
                    t.SetColor(t.currentPlayer.SpinData.ColorCounts),
                    t.gameContainer.x = 0
                }, 1400)
            }
            ,
            u.prototype.RunCarVis = function(t) {
                setTimeout(function() {
                    TweenMax.to(t, .3, {
                        x: -91.5,
                        data: "predict"
                    }),
                    TweenMax.to(t.getChildAt(1), .3, {
                        data: "predict",
                        rotation: 2 * Math.PI
                    }),
                    TweenMax.to(t.getChildAt(2), .3, {
                        data: "predict",
                        rotation: 2 * Math.PI
                    })
                }, 800)
            }
            ,
            u.prototype.ChangeCar = function() {
                var t = this.gameContainer.children[this.gameContainer.children.length - 1]
                  , e = this;
                t.getChildAt(3).visible = !1,
                t.getChildAt(0).gotoAndPlay(0),
                TweenMax.to(t.getChildAt(4), .5, {
                    data: "predict",
                    alpha: 0
                }),
                setTimeout(function() {
                    t.getChildAt(0).gotoAndStop(0),
                    t.getChildAt(3).visible = !0,
                    t.getChildAt(3).texture = TextureCache[s.contents.NumberColor(e.currentPlayer.SpinData.Number)],
                    t.getChildAt(4).texture = TextureCache["number-" + e.currentPlayer.SpinData.Number + ".png"],
                    t.getChildAt(4).alpha = 1
                }, 800)
            }
            ,
            u.prototype.ResetMoney = function() {
                for (var t = 0; t < this.locationTxt.length; t++)
                    this.locationTxt[t].text = "0"
            }
            ,
            u.prototype.SetMoney = function() {
                if (0 < this.currentPlayer.Locations.length)
                    for (var t = 0; t < this.locationTxt.length; t++)
                        this.locationTxt[t].text = i.Util.ParseMoney(this.currentPlayer.Locations[t].PrizeValue, void 0)
            }
            ,
            u.prototype.DumpCart = function(t) {
                this.maskDoiVan.width = 0 < t ? 164 * t / 5 : 0,
                5 === t ? s.contents.EnableButton(this.btnDoiVan, "btn-doi-van-normal.png") : s.contents.DisableButton(this.btnDoiVan, "btn-txt-disable.png")
            }
            ,
            u.prototype.CheckKetBac = function(t, e) {
                0 < t ? s.contents.EnableButton(this.btn5050, "btn-50-normal.png") : (this.SetMoneyKetBac(e),
                s.contents.DisableButton(this.btn5050, "btn-txt-disable.png"))
            }
            ,
            u.prototype.SetMoneyKetBac = function(t) {
                console.log(t),
                this.txtMoneyKetSat.text = i.Util.ParseMoney(t)
            }
            ,
            u.prototype.SetMoneyDautu = function(t) {
                s.contents.CountDautu(this.txtMoneyDauTu, !0, !1, t, 1)
            }
            ,
            u.prototype.SetMoneyBalance = function(t) {
                s.contents.CountBalance(this.txtBalance, !0, !1, t, 1)
            }
            ,
            u.prototype.CreateCar = function(t) {
                var e = new Sprite(TextureCache["khung.png"]);
                e.anchor.set(.5);
                var n = new AnimatedSprite(this.framesCar);
                n.anchor.set(.5),
                n.position.set(0, -23),
                n.loop = !1,
                n.animationSpeed = .2;
                var i = new Sprite(TextureCache["banh.png"]);
                i.anchor.set(.5),
                i.position.set(-35, 15);
                var o = new Sprite(TextureCache["banh.png"]);
                o.anchor.set(.5),
                o.position.set(35, 15);
                var r = new Sprite(TextureCache[s.contents.NumberColor(t)]);
                r.anchor.set(.5),
                r.position.set(0, -85);
                var a = new Sprite(TextureCache["number-" + t + ".png"]);
                a.anchor.set(.5),
                a.position.set(0, -25),
                e.position.set(0, 80),
                e.addChild(n, i, o, r, a),
                e.visible = !1,
                this.gameContainer.addChild(e)
            }
            ,
            u.prototype.RemoveCar = function() {
                this.gameContainer.removeChildren(),
                this.gameContainer.x = 0
            }
            ,
            u.prototype.RunCar = function() {
                this.car1 = null,
                this.car2 = null,
                this.car3 = null;
                var t = this;
                1 === this.gameContainer.children.length ? (this.car1 = this.gameContainer.children[0],
                this.car1.x = -364,
                this.car1.visible = !0,
                TweenMax.to(this.car1, 1, {
                    x: -91.5,
                    data: "predict"
                }),
                TweenMax.to(this.car1.getChildAt(1), 1, {
                    data: "predict",
                    rotation: 2 * Math.PI
                }),
                TweenMax.to(this.car1.getChildAt(2), 1, {
                    data: "predict",
                    rotation: 2 * Math.PI
                })) : 2 <= this.gameContainer.children.length && (this.car1 = this.gameContainer.children[this.gameContainer.children.length - 1],
                this.car2 = this.gameContainer.children[this.gameContainer.children.length - 2],
                2 < this.gameContainer.children.length && (this.car3 = this.gameContainer.children[this.gameContainer.children.length - 3]),
                this.car1.visible = !0,
                this.car1.x = -364,
                TweenMax.to(this.car1.getChildAt(1), .5, {
                    data: "predict",
                    rotation: 2 * Math.PI
                }),
                TweenMax.to(this.car1.getChildAt(2), .5, {
                    data: "predict",
                    rotation: 2 * Math.PI
                }),
                TweenMax.to(this.car1, .5, {
                    data: "predict",
                    x: -274.5,
                    onComplete: function() {
                        t.car1.getChildAt(1).rotation = 0,
                        t.car1.getChildAt(2).rotation = 0,
                        t.car2.getChildAt(1).rotation = 0,
                        t.car2.getChildAt(2).rotation = 0,
                        TweenMax.to(t.car1, .8, {
                            data: "predict",
                            x: -91.5
                        }),
                        TweenMax.to(t.car1.getChildAt(1), .8, {
                            data: "predict",
                            rotation: 2 * Math.PI
                        }),
                        TweenMax.to(t.car1.getChildAt(2), .8, {
                            data: "predict",
                            rotation: 2 * Math.PI
                        }),
                        TweenMax.to(t.car2, .8, {
                            data: "predict",
                            x: 91.5
                        }),
                        TweenMax.to(t.car2.getChildAt(1), .8, {
                            data: "predict",
                            rotation: 2 * Math.PI
                        }),
                        TweenMax.to(t.car2.getChildAt(2), .8, {
                            data: "predict",
                            rotation: 2 * Math.PI
                        }),
                        t.car3 && (t.car3.getChildAt(1).rotation = 0,
                        t.car3.getChildAt(2).rotation = 0,
                        TweenMax.to(t.car3, .5, {
                            data: "predict",
                            x: 400
                        }),
                        TweenMax.to(t.car3.getChildAt(1), .5, {
                            data: "predict",
                            rotation: 2 * Math.PI
                        }),
                        TweenMax.to(t.car3.getChildAt(2), .5, {
                            data: "predict",
                            rotation: 2 * Math.PI
                        }))
                    }
                }))
            }
            ,
            u.prototype.SetColor = function(t) {
                for (var e = 0; e < this.chooseColor.length; e++)
                    this.chooseColor[e].texture = TextureCache[this.chooseColor[e].name];
                if (0 < t)
                    for (e = 0; e < t; e++)
                        this.chooseColor[e].texture = TextureCache[this.chooseColor[e].name.replace("disable", "active")]
            }
            ,
            u.prototype.ResetNumber = function() {
                this.numberContainer.removeChildren()
            }
            ,
            u.prototype.UpdateTotalPoint = function(t) {
                this.txtTongDiem.text = t + "/200"
            }
            ,
            u.prototype.Delete = function() {
                s.contents.DeleteTimer(),
                s.contents.DeleteTweens();
                try {
                    PIXI.sound.stopAll(),
                    PIXI.sound.removeAll()
                } catch (t) {}
                this.loader.delete(),
                window.removeEventListener("resize", this.resizeFunc),
                a.Config.isLogin = !1,
                s.contents.DeleteTimer(),
                a.Config.countJp = null;
                try {
                    this.loader && delete this.loader
                } catch (t) {}
                try {
                    this.application.view.remove(),
                    this.application.destroy(!0)
                } catch (t) {}
                try {
                    this.hubs.connection.stop()
                } catch (t) {}
            }
            ,
            u);
            function u(t) {
                this.balance = 0,
                this.framesCar = [],
                this.betArrPos = [[-300, 463], [-230, 463], [-160, 463], [-90, 463], [-20, 463]],
                this.inxG = 1,
                this.size = t.size,
                this.target = t.target,
                this.token = t.token,
                this.his = t.getHistory,
                this.trans = t.getStatistic,
                this.loader = new r.default,
                a.Config.hubUrl = t.hubUrl,
                t.apiUrl && (a.Config.apiUrl = t.apiUrl),
                a.Config.api = t.api,
                a.Config.lang = Message.GetLanguageCode(),
                t.currencyID ? a.Config.currencyId = t.currencyID : a.Config.currencyId = "undefined" != typeof App ? App.account.currencyID : 1,
                this.Init()
            }
            e.games = l
        },
        52: function(t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var i = n(2)
              , o = n(13)
              , r = (a.prototype.Init = function() {
                var e = this;
                this.connection = (new i.HubConnectionBuilder).withUrl(this.url, {
                    accessTokenFactory: function() {
                        return e.token
                    },
                    skipNegotiation: !0,
                    transport: i.HttpTransportType.WebSockets
                }).build(),
                this.connection.serverTimeoutInMilliseconds = 1e5,
                this.connection.start().then(function() {
                    o.Config.isLogin = !0,
                    console.log("connected"),
                    e.connection.invoke("PlayNow", {
                        RoomID: o.Config.roomId,
                        CurrencyID: o.Config.currencyId
                    })
                }).catch(function(t) {
                    return console.error(t)
                }),
                this.connection.on("JoinGame", function(t) {
                    e.game.JoinRoom(t)
                }),
                this.connection.on("ResultSpin", function(t) {
                    e.game.StartSpin(t)
                }),
                this.connection.on("MessageError", function(t) {
                    e.game.ShowError(t)
                }),
                this.connection.on("UpdateJackPot", function(t) {
                    e.game.UpdateJackpot(t)
                })
            }
            ,
            a);
            function a(t, e, n) {
                this.url = t,
                this.token = e,
                this.game = n,
                this.Init()
            }
            e.default = r
        },
        53: function(t, e, n) {
            "use strict";
            var i, o = this && this.__extends || (i = function(t, e) {
                return (i = Object.setPrototypeOf || {
                    __proto__: []
                }instanceof Array && function(t, e) {
                    t.__proto__ = e
                }
                || function(t, e) {
                    for (var n in e)
                        e.hasOwnProperty(n) && (t[n] = e[n])
                }
                )(t, e)
            }
            ,
            function(t, e) {
                function n() {
                    this.constructor = t
                }
                i(t, e),
                t.prototype = null === e ? Object.create(e) : (n.prototype = e.prototype,
                new n)
            }
            );
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var r, a = n(0), s = (r = a.Assets,
            o(h, r),
            h);
            function h() {
                var t = r.call(this) || this;
                return t.assets = [{
                    id: "",
                    src: "/slots/predict/json/assets.json"
                }, {
                    id: "",
                    src: "/slots/predict/json/guides.json"
                }, {
                    id: "framesCar",
                    src: "/slots/predict/assets/images/xe-frames.png"
                }, {
                    id: "bgGuideSoDo",
                    src: "/slots/predict/assets/images/sodo-bg-guide.png"
                }],
                t.add(t.assets),
                t
            }
            e.default = s
        },
        54: function(t, e, n) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
            e.trial = void 0;
            var i = n(13)
              , o = n(0)
              , r = n(23)
              , a = (s.prototype.ResetFree = function() {
                this.NumberData = new Array,
                this.ArrayRate = new Array,
                this.Step = 0,
                this.PrizeValue = 0,
                this.SafeBet = 0,
                this.DumpCart = 5,
                this.BankHalf = 0,
                this.RoomID,
                this.BetValue = 0,
                this.CurrentNumber = 0,
                this.ColorCount = 0,
                this.TotalPoints = 0
            }
            ,
            s.prototype.GetColor = function(t) {
                var e = t % 3
                  , n = 0 == e ? "g" : 1 == e ? "r" : "y";
                return n
            }
            ,
            s.prototype.GenerateRate = function(t) {
                for (var e = 48 - this.NumberData.length, n = 0, i = 0, o = 0, r = 1, n = 0; n < this.NumberData.length; n++)
                    this.NumberData[n] > t && o++;
                r = (r = this.RateBase / ((48 - t - o) / e)) <= 1 ? 1 : r,
                r = 48 == t ? 0 : r;
                var a = 0
                  , s = 1;
                for (n = 0; n < this.NumberData.length; n++)
                    this.NumberData[n] < t && a++;
                s = (s = this.RateBase / ((t - 1 - a) / e)) <= 1 ? 1 : s,
                s = 1 == t ? 0 : s;
                var h = 0;
                for (n = 0; n < this.NumberData.length; n++)
                    "r" == this.GetColor(this.NumberData[n]) && h++;
                var l = (l = this.RateBase / ((16 - h) / e)) <= 1 ? 1 : l
                  , u = 0;
                for (n = 1; n < 49; n++)
                    "r" == this.GetColor(n) && t < n && u++;
                for (i = 0; i < this.NumberData.length; i++)
                    "r" == this.GetColor(this.NumberData[i]) && this.NumberData[i] > t && u--;
                var c = (c = this.RateBase / (u / e)) <= 1 ? 1 : c;
                c = (c = 48 == t ? 0 : c) === 1 / 0 ? 0 : c;
                var p = 0;
                for (n = 1; n < 49; n++)
                    "r" == this.GetColor(n) && n < t && p++;
                for (i = 0; i < this.NumberData.length; i++)
                    "r" == this.GetColor(this.NumberData[i]) && this.NumberData[i] < t && p--;
                var b = (b = this.RateBase / (p / e)) <= 1 ? 1 : b;
                c = (b = 1 == t ? 0 : b) === 1 / 0 ? 0 : c;
                var d = 0;
                for (n = 0; n < this.NumberData.length; n++)
                    "g" == this.GetColor(this.NumberData[n]) && d++;
                var g = (g = this.RateBase / ((16 - d) / e)) <= 1 ? 1 : g
                  , y = 0;
                for (n = 1; n < 49; n++)
                    "g" == this.GetColor(n) && t < n && y++;
                for (i = 0; i < this.NumberData.length; i++)
                    "g" == this.GetColor(this.NumberData[i]) && this.NumberData[i] > t && y--;
                var f = (f = this.RateBase / (y / e)) <= 1 ? 1 : f;
                f = (f = 48 == t ? 0 : f) === 1 / 0 ? 0 : f;
                var m = 0;
                for (n = 1; n < 49; n++)
                    "g" == this.GetColor(n) && n < t && m++;
                for (i = 0; i < this.NumberData.length; i++)
                    "g" == this.GetColor(this.NumberData[i]) && this.NumberData[i] < t && m--;
                var x = (x = this.RateBase / (m / e)) <= 1 ? 1 : x;
                x = (x = 1 == t ? 0 : x) === 1 / 0 ? 0 : x;
                var C = 0;
                for (n = 0; n < this.NumberData.length; n++)
                    "y" == this.GetColor(this.NumberData[n]) && C++;
                var P = (P = this.RateBase / ((16 - C) / e)) <= 1 ? 1 : P
                  , w = 0;
                for (n = 1; n < 49; n++)
                    "y" == this.GetColor(n) && t < n && w++;
                for (i = 0; i < this.NumberData.length; i++)
                    "y" == this.GetColor(this.NumberData[i]) && this.NumberData[i] > t && w--;
                var D = (D = this.RateBase / (w / e)) <= 1 ? 1 : D;
                D = (D = 48 == t ? 0 : D) === 1 / 0 ? 0 : D;
                var v = 0;
                for (n = 1; n < 49; n++)
                    "y" == this.GetColor(n) && n < t && v++;
                for (i = 0; i < this.NumberData.length; i++)
                    "y" == this.GetColor(this.NumberData[i]) && this.NumberData[i] < t && v--;
                var B = (B = this.RateBase / (v / e)) <= 1 ? 1 : B;
                B = (B = 1 == t ? 0 : B) === 1 / 0 ? 0 : B,
                this.ArrayRate = new Array,
                this.ArrayRate.push({
                    LocationID: 1,
                    LocationName: "Tăng",
                    Rate: r.toFixed(3),
                    PrizeValue: r.toFixed(3)
                }),
                this.ArrayRate.push({
                    LocationID: 2,
                    LocationName: "Giảm",
                    Rate: s.toFixed(3),
                    PrizeValue: s.toFixed(3)
                }),
                this.ArrayRate.push({
                    LocationID: 3,
                    LocationName: "Đỏ",
                    Rate: l.toFixed(3),
                    PrizeValue: l.toFixed(3)
                }),
                this.ArrayRate.push({
                    LocationID: 4,
                    LocationName: "Xanh",
                    Rate: g.toFixed(3),
                    PrizeValue: g.toFixed(3)
                }),
                this.ArrayRate.push({
                    LocationID: 5,
                    LocationName: "Vàng",
                    Rate: P.toFixed(3),
                    PrizeValue: P.toFixed(3)
                }),
                this.ArrayRate.push({
                    LocationID: 6,
                    LocationName: "Đỏ tăng",
                    Rate: c.toFixed(3),
                    PrizeValue: c.toFixed(3)
                }),
                this.ArrayRate.push({
                    LocationID: 7,
                    LocationName: "Xanh tăng",
                    Rate: f.toFixed(3),
                    PrizeValue: f.toFixed(3)
                }),
                this.ArrayRate.push({
                    LocationID: 8,
                    LocationName: "Vàng tăng",
                    Rate: D.toFixed(3),
                    PrizeValue: D.toFixed(3)
                }),
                this.ArrayRate.push({
                    LocationID: 9,
                    LocationName: "Đỏ giảm",
                    Rate: b.toFixed(3),
                    PrizeValue: b.toFixed(3)
                }),
                this.ArrayRate.push({
                    LocationID: 10,
                    LocationName: "Xanh giảm",
                    Rate: x.toFixed(3),
                    PrizeValue: x.toFixed(3)
                }),
                this.ArrayRate.push({
                    LocationID: 11,
                    LocationName: "Vàng giảm",
                    Rate: B.toFixed(3),
                    PrizeValue: B.toFixed(3)
                })
            }
            ,
            s.prototype.Play = function(t, e) {
                if (this.NumberData = this.game.numberArr,
                4 === (this.game.currentPlayer.SpinData.BetType = e))
                    return this.game.currentPlayer.PrizeValue = 0,
                    this.game.currentPlayer.Number = 0,
                    void this.game.ResetGame();
                if (2 === e) {
                    for (var n = Math.floor(47 * Math.random()) + 1; 0 <= this.game.numberArr.indexOf(n); )
                        n = Math.floor(47 * Math.random()) + 1;
                    return this.TotalPoints -= this.CurrentNumber,
                    this.TotalPoints += n,
                    this.CurrentNumber = n,
                    this.DumpCart = 0,
                    this.game.numberArr.push(n),
                    this.GenerateRate(n),
                    this.game.numberArr.splice(this.game.numberArr.length - 1, 1),
                    this.game.currentPlayer.SpinData.BankHalf = 0,
                    this.game.currentPlayer.SpinData.SafeBet = this.SafeBet,
                    this.game.currentPlayer.SpinData.DumpCart = this.DumpCart,
                    this.game.currentPlayer.SpinData.Step = this.Step,
                    this.game.currentPlayer.Locations = this.ArrayRate,
                    this.game.currentPlayer.SpinData.PrizeValue = this.PrizeValue,
                    this.game.currentPlayer.SpinData.BetValue = this.BetValue,
                    this.game.currentPlayer.SpinData.ColorCounts = 0,
                    this.game.currentPlayer.SpinData.JackPotStatus = 0,
                    this.game.currentPlayer.SpinData.Number = n,
                    this.game.currentPlayer.SpinData.TotalPoints = this.TotalPoints,
                    this.game.currentPlayer.Account.GoldBalance = this.Balance,
                    void this.game.StartSpin(this.game.currentPlayer)
                }
                if (3 === e) {
                    var i = Math.floor(this.PrizeValue / 2);
                    return this.SafeBet += i,
                    this.PrizeValue = i,
                    this.BetValue = i,
                    this.game.currentPlayer.SpinData.SafeBet = this.SafeBet,
                    this.game.currentPlayer.SpinData.PrizeValue = this.PrizeValue,
                    this.game.currentPlayer.SpinData.BankHalf = 0,
                    this.BankHalf = 0,
                    this.Step++,
                    void this.game.StartSpin(this.game.currentPlayer)
                }
                for (n = Math.floor(47 * Math.random()) + 1; 0 <= this.NumberData.indexOf(n); )
                    n = Math.floor(47 * Math.random()) + 1;
                var o = this.GetColor(n);
                switch (this.BetValue = this.PrizeValue,
                1 < this.Step ? this.Balance -= this.BetValue : this.DumpCart = 0,
                this.Step++,
                this.game.currentPlayer.SpinData.BankHalf = 0,
                this.game.currentPlayer.SpinData.SafeBet = this.SafeBet,
                this.game.currentPlayer.SpinData.DumpCart = this.DumpCart,
                this.game.currentPlayer.SpinData.Step = this.Step,
                this.game.currentPlayer.Locations = this.ArrayRate,
                this.game.currentPlayer.SpinData.BetValue = this.BetValue,
                this.game.currentPlayer.SpinData.ColorCounts = 0,
                this.game.currentPlayer.SpinData.JackPotStatus = 0,
                this.game.currentPlayer.SpinData.Number = n,
                this.game.currentPlayer.SpinData.TotalPoints = this.TotalPoints,
                this.game.currentPlayer.Account.GoldBalance = this.Balance,
                t) {
                case this.E_BETTING.Up:
                    n > this.CurrentNumber ? this.game.currentPlayer.SpinData.PrizeValue = Math.floor(this.PrizeValue * this.ArrayRate[this.E_BETTING.Up - 1].Rate) : this.game.currentPlayer.SpinData.PrizeValue = 0;
                    break;
                case this.E_BETTING.Down:
                    n < this.CurrentNumber ? this.game.currentPlayer.SpinData.PrizeValue = Math.floor(this.PrizeValue * this.ArrayRate[this.E_BETTING.Down - 1].Rate) : this.game.currentPlayer.SpinData.PrizeValue = 0;
                    break;
                case this.E_BETTING.Red:
                    this.game.currentPlayer.SpinData.PrizeValue = "r" == o ? Math.floor(this.PrizeValue * this.ArrayRate[this.E_BETTING.Red - 1].Rate) : 0;
                    break;
                case this.E_BETTING.RedUp:
                    "r" == o && n > this.CurrentNumber ? this.game.currentPlayer.SpinData.PrizeValue = Math.floor(this.PrizeValue * this.ArrayRate[this.E_BETTING.RedUp - 1].Rate) : this.game.currentPlayer.SpinData.PrizeValue = 0;
                    break;
                case this.E_BETTING.RedDown:
                    "r" == o && n < this.CurrentNumber ? this.game.currentPlayer.SpinData.PrizeValue = Math.floor(this.PrizeValue * this.ArrayRate[this.E_BETTING.RedDown - 1].Rate) : this.game.currentPlayer.SpinData.PrizeValue = 0;
                    break;
                case this.E_BETTING.Green:
                    this.game.currentPlayer.SpinData.PrizeValue = "g" == o ? Math.floor(this.PrizeValue * this.ArrayRate[this.E_BETTING.Green - 1].Rate) : 0;
                    break;
                case this.E_BETTING.GreenUp:
                    "g" == o && n > this.CurrentNumber ? this.game.currentPlayer.SpinData.PrizeValue = Math.floor(this.PrizeValue * this.ArrayRate[this.E_BETTING.GreenUp - 1].Rate) : this.game.currentPlayer.SpinData.PrizeValue = 0;
                    break;
                case this.E_BETTING.GreenDown:
                    "g" == o && n < this.CurrentNumber ? this.game.currentPlayer.SpinData.PrizeValue = Math.floor(this.PrizeValue * this.ArrayRate[this.E_BETTING.GreenDown - 1].Rate) : this.game.currentPlayer.SpinData.PrizeValue = 0;
                    break;
                case this.E_BETTING.Yellow:
                    this.game.currentPlayer.SpinData.PrizeValue = "y" == o ? Math.floor(this.PrizeValue * this.ArrayRate[this.E_BETTING.Yellow - 1].Rate) : 0;
                    break;
                case this.E_BETTING.YellowUp:
                    "y" == o && n > this.CurrentNumber ? this.game.currentPlayer.SpinData.PrizeValue = Math.floor(this.PrizeValue * this.ArrayRate[this.E_BETTING.YellowUp - 1].Rate) : this.game.currentPlayer.SpinData.PrizeValue = 0;
                    break;
                case this.E_BETTING.YellowDown:
                    "y" == o && n < this.CurrentNumber ? this.game.currentPlayer.SpinData.PrizeValue = Math.floor(this.PrizeValue * this.ArrayRate[this.E_BETTING.YellowDown - 1].Rate) : this.game.currentPlayer.SpinData.PrizeValue = 0
                }
                this.PrizeValue = this.game.currentPlayer.SpinData.PrizeValue,
                0 < this.PrizeValue ? (this.Balance += this.PrizeValue,
                this.DumpCart++,
                5 <= this.DumpCart && (this.DumpCart = 5),
                this.game.currentPlayer.SpinData.DumpCart = this.DumpCart,
                this.BankHalf = 1,
                this.game.currentPlayer.SpinData.BankHalf = this.BankHalf) : this.Balance -= this.PrizeValue,
                this.NumberData.push(n),
                this.TotalPoints += n,
                this.GenerateRate(n),
                this.NumberData.splice(this.NumberData.length - 1, 1),
                this.CurrentNumber = n,
                this.game.currentPlayer.Locations = this.ArrayRate,
                this.game.currentPlayer.SpinData.TotalPoints = this.TotalPoints,
                this.game.currentPlayer.Account.GoldBalance = this.Balance,
                this.game.currentPlayer.SpinData.Number = n,
                this.game.StartSpin(this.game.currentPlayer)
            }
            ,
            s);
            function s(t) {
                this.player = {
                    SlotInfo: {
                        CurrentRoomID: 1,
                        CurrentTurnID: 0,
                        CurrentStep: 0,
                        NumberData: "",
                        BetValue: 0,
                        SafeBet: 0,
                        DumpCart: 5,
                        BankHalf: 0,
                        TotalPoints: 0,
                        ColorCounts: 0,
                        JackPotStatus: 0,
                        ResponseStatus: 0
                    },
                    Locations: [],
                    SpinData: {
                        BankHalf: 0,
                        BetType: 0,
                        BetValue: 0,
                        ColorCounts: 0,
                        CurrentRoomID: 0,
                        CurrentStep: 0,
                        CurrentTurnID: 0,
                        DumpCart: 5,
                        JackPotPrizeValue: 0,
                        JackPotStatus: 0,
                        LocationID: 0,
                        Number: 0,
                        PrizeValue: 0,
                        ResponseStatus: 1,
                        RoomID: 1,
                        SafeBet: 0,
                        Step: 0,
                        TotalPoints: 0
                    },
                    Account: {
                        AccountID: 0,
                        Username: "",
                        Nickname: "",
                        Avatar: null,
                        SourceID: 1,
                        PortalID: 1,
                        GoldBalance: 0,
                        CoinBalance: 0,
                        CurrencyID: 1
                    },
                    PortalID: 1,
                    CurrencyID: 1,
                    AccountID: 0,
                    AutoSpin: !1,
                    TotalAutoSpin: 0,
                    TotalLine: 0,
                    BetValue: 1e3,
                    AutoRoomId: 0,
                    moneyType: 1,
                    Lines: null,
                    Turbo: !1,
                    RoomID: 1
                },
                this.Balance = 5e7,
                this.JackPotArr = [2e4, 2e5, 1e6, 2e6, 1e7],
                this.JackPot = 0,
                this.NumberData = [],
                this.ArrayRate = [],
                this.RateBase = .97,
                this.RateJack = .015,
                this.TotalPoints = 0,
                this.Step = 0,
                this.PrizeValue = 0,
                this.SafeBet = 0,
                this.DumpCart = 5,
                this.BankHalf = 0,
                this.RoomID = 1,
                this.BetValue = 0,
                this.CurrentNumber = 0,
                this.ColorCount = 0,
                this.E_BETTING = {
                    Up: 1,
                    Down: 2,
                    Red: 3,
                    Green: 4,
                    Yellow: 5,
                    RedUp: 6,
                    GreenUp: 7,
                    YellowUp: 8,
                    RedDown: 9,
                    GreenDown: 10,
                    YellowDown: 11
                },
                this.E_BET_TYPE = {
                    INIT: 0,
                    NORMAL: 1,
                    DumpCart: 2,
                    BankHalf: 3,
                    Collect: 4
                },
                this.GetBetInfo = function() {
                    this.ResetFree();
                    var t = Math.floor(47 * Math.random()) + 1;
                    if (this.game.currentPlayer.SpinData.Step = 1,
                    this.BetValue = i.Config.arrRoom[this.RoomID - 1],
                    this.PrizeValue = i.Config.arrRoom[this.RoomID - 1],
                    this.game.currentPlayer.BetValue = i.Config.arrRoom[this.RoomID - 1],
                    this.game.currentPlayer.SpinData.PrizeValue = i.Config.arrRoom[this.RoomID - 1],
                    this.game.currentPlayer.SpinData.TotalPoints = 0,
                    this.game.currentPlayer.SpinData.ColorCount = 0,
                    this.game.currentPlayer.SpinData.BetType = 0,
                    this.game.currentPlayer.SpinData.DumpCart = 5,
                    this.GenerateRate(t),
                    this.CurrentNumber = t,
                    this.game.currentPlayer.SpinData.Number = t,
                    this.TotalPoints += t,
                    this.game.currentPlayer.SpinData.TotalPoints = this.TotalPoints,
                    this.Balance < this.BetValue)
                        return this.game.ShowMessage(Message.GetMessage("sl40")),
                        r.contents.DisableButtons(this.game),
                        void r.contents.DisableBet(this.game);
                    this.game.currentPlayer.Locations = this.ArrayRate,
                    this.Balance -= this.BetValue,
                    this.game.currentPlayer.Account.GoldBalance = this.Balance,
                    this.game.StartSpin(this.game.currentPlayer)
                }
                ;
                var e = t;
                (this.game = e).currentPlayer && (e.currentPlayerMain = e.currentPlayer),
                e.currentPlayer = this.player,
                i.Config.isTry = !0,
                this.Balance = 5e7,
                this.JackPot = 2e4;
                try {
                    i.Config.countJp && i.Config.countJp.reset(),
                    i.Config.countJp = null
                } catch (t) {}
                this.ResetFree(),
                this.game.JoinRoom(e.currentPlayer),
                e.txtJackpot.text = o.Util.ParseMoney(this.JackPot),
                e.txtBalance.text = o.Util.ParseMoney(this.Balance)
            }
            e.trial = a
        }
    },
    a.c = h,
    a.d = function(t, e, n) {
        a.o(t, e) || Object.defineProperty(t, e, {
            enumerable: !0,
            get: n
        })
    }
    ,
    a.r = function(t) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
            value: "Module"
        }),
        Object.defineProperty(t, "__esModule", {
            value: !0
        })
    }
    ,
    a.t = function(e, t) {
        if (1 & t && (e = a(e)),
        8 & t)
            return e;
        if (4 & t && "object" == typeof e && e && e.__esModule)
            return e;
        var n = Object.create(null);
        if (a.r(n),
        Object.defineProperty(n, "default", {
            enumerable: !0,
            value: e
        }),
        2 & t && "string" != typeof e)
            for (var i in e)
                a.d(n, i, function(t) {
                    return e[t]
                }
                .bind(null, i));
        return n
    }
    ,
    a.n = function(t) {
        var e = t && t.__esModule ? function() {
            return t.default
        }
        : function() {
            return t
        }
        ;
        return a.d(e, "a", e),
        e
    }
    ,
    a.o = function(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e)
    }
    ,
    a.p = "/",
    a(a.s = 50);
    function a(t) {
        if (h[t])
            return h[t].exports;
        var e = h[t] = {
            i: t,
            l: !1,
            exports: {}
        };
        return s[t].call(e.exports, e, e.exports, a),
        e.l = !0,
        e.exports
    }
    var s, h
});
