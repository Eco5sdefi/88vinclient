!function(t, e) {
    "object" == typeof exports && "object" == typeof module ? module.exports = e(require("libs"), require("WebFont")) : "function" == typeof define && define.amd ? define("bacay", ["libs", "WebFont"], e) : "object" == typeof exports ? exports.bacay = e(require("libs"), require("WebFont")) : t.bacay = e(t.libs, t.WebFont)
}(window, function(i, n) {
    return a = {},
    o.m = s = [function(t, e) {
        t.exports = i
    }
    , function(t, e) {
        t.exports = n
    }
    , , function(t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var n = i(4)
          , o = i(1)
          , s = (a.prototype.delete = function() {
            this.game.Delete()
        }
        ,
        a.prototype.load = function(t) {
            this.game.Load(t)
        }
        ,
        a.prototype.join = function(t, e) {
            this.game.Join(t, e)
        }
        ,
        a.prototype.lobby = function(t) {
            this.game.EnterLobby(t)
        }
        ,
        a.prototype.stop = function() {
            this.game.Stop()
        }
        ,
        a);
        function a(t) {
            o.load({
                custom: {
                    families: ["Roboto-Black", "Roboto-Bold", "Roboto-Medium", "Roboto-Regular", "Roboto-Light", "RobotoCondensed-Bold", "RobotoCondensed-Italic", "RobotoCondensed-Light", "RobotoCondensed-Regular", "UTM American Sans", "UTM Swiss Condensed", "UTM Swiss CondensedBold"]
                },
                fontactive: function() {}
            }),
            this.game = new n.games(t)
        }
        e.game = s
    }
    , function(t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var n = i(5)
          , o = i(6)
          , u = i(0)
          , s = i(7)
          , a = i(8)
          , r = i(9)
          , h = (c.prototype.PlayerOtherDevice = function() {
            App.showPopupMessage({
                content: Message.GetMessage("ca-20024"),
                textDone: "OK"
            }),
            this.Delete(),
            App.exitGame()
        }
        ,
        c.prototype.Load = function(t) {
            var e = this;
            e.loader.load(function() {
                return e.Loading(e)
            }, function() {
                $("#divLoading").hide(),
                e.isLoad = !0,
                e.InitHub(t)
            })
        }
        ,
        c.prototype.Loading = function(t) {
            $("#divLoading").show(),
            $("#loading-progress span").css("width", parseInt(t.loader.loader.progress) + "%"),
            $("#loading-progress-txt").html(parseInt(t.loader.loader.progress) + "%")
        }
        ,
        c.prototype.InitHub = function(t) {
            this.hub = new o.default(baCayUrl + "hub",this.token,this),
            this.hub.Connect(this.currencyId, t)
        }
        ,
        c.prototype.Ping = function(t) {
            t.timerPing = setInterval(function() {
                t.hub.connection.invoke("PingPong")
            }, 1e4)
        }
        ,
        c.prototype.Join = function(t, e) {
            this.hub.PlayNow(t, e)
        }
        ,
        c.prototype.JoinGame = function(t, e) {
            if (console.log("JoinGame", t, e),
            !this.isJoin && !this.ready && (this.isJoin || (this.isJoin = !0),
            t)) {
                if (this.roomModel = t,
                App.joinGame({
                    value: this.roomModel.MinBet,
                    type: this.roomModel.MoneyType
                }),
                this.ready || this.Init(),
                this.roomModel && this.roomModel.Players) {
                    for (var i in this.roomModel.Players)
                        this.roomModel.Players[i].AccountID === App.account.accountID + ":" + App.account.portalID && (this.currentPlayer = this.roomModel.Players[i]);
                    this.RenderPlayers(this.roomModel.Players)
                }
                var n = this;
                setTimeout(function() {
                    e && --e.time,
                    n.ChangeOwner(n.roomModel.OwnerId),
                    n.CheckGame(e)
                }, 500)
            }
        }
        ,
        c.prototype.Init = function() {
            PIXI.utils.skipHello(),
            this.size = [window.innerWidth, window.innerHeight],
            this.application = new PIXI.Application(this.size[0],this.size[1],{
                antialias: !0,
                transparent: !0,
                resolution: 1,
                autoResize: !0
            }),
            document.getElementById(this.target).appendChild(this.application.renderer.view);
            var t = this;
            this.Ping(this),
            this.InitContainer(),
            this.InitFrames(),
            this.InitBg(),
            this.InitTableInfo(),
            this.CreateChipBg(),
            this.InitButton(),
            this.barContainer = new a.default({
                min: this.roomModel.MinBet,
                max: this.roomModel.MaxBet,
                step: this.roomModel.BetStep,
                game: this
            }),
            this.barContainer.y = 280,
            this.barContainer.visible = !1,
            this.table.addChild(this.barContainer),
            this.application.ticker.add(function() {
                return t.Update(t)
            }),
            this.ready = !0,
            this.Resize(this),
            this.resizeFunc = function() {
                return t.Resize(t)
            }
            ,
            window.addEventListener("resize", this.resizeFunc),
            this.ResetTab()
        }
        ,
        c.prototype.InitContainer = function() {
            this.bgContainer = new Container,
            this.buttonContainer = new Container,
            this.playerContainer = new Container,
            this.cardContainer = new Container,
            this.messageContainer = new Container,
            this.effectContainer = new Container,
            this.messageContainer.addChild(this.effectContainer),
            this.handCardsContainer = new Container,
            this.drawCardsContainer = new Container,
            this.chipContainer = new Container,
            this.barContainer = new Container,
            this.cardContainer.addChild(this.drawCardsContainer, this.handCardsContainer),
            this.infoContainer = new Container,
            this.resultContainer = new Container,
            this.bienContainer = new Container,
            this.divideContainer = new Container,
            this.application.stage.addChild(this.bgContainer)
        }
        ,
        c.prototype.InitFrames = function() {
            var t;
            for (this.framesDealerChiaBai = [],
            this.framesDealerClick = [],
            this.framesDealerPlay = [],
            this.framesDealerNormal = [],
            this.framesFire = [],
            this.framesWin = framesFromTilesetImage("win.effect", 230, 230),
            t = 1; t < 31; t++)
                this.framesFire.push(TextureCache["fire-work-" + t + ".png"]);
            for (t = 1; t < 15; t++)
                this.framesDealerChiaBai.push(TextureCache["dealer-chia-bai-" + t + ".png"]);
            for (t = 1; t < 25; t++)
                this.framesDealerClick.push(TextureCache["dealer-rung-nguc-" + t + ".png"]),
                this.framesDealerPlay.push(TextureCache["dealer-moi-choi-" + t + ".png"]);
            for (t = 1; t < 49; t++)
                this.framesDealerNormal.push(TextureCache["dealer-normal-" + t + ".png"]);
            var e = [[1, 1, 35, 28, 0, 0, 0], [38, 1, 35, 28, 0, 0, 0], [75, 1, 23, 28, 0, 0, 0], [100, 1, 23, 28, 0, 0, 0], [125, 1, 23, 28, 0, 0, 0], [150, 1, 23, 28, 0, 0, 0], [175, 1, 22, 28, 0, 0, 0], [199, 1, 22, 28, 0, 0, 0], [223, 1, 22, 28, 0, 0, 0], [247, 1, 22, 28, 0, 0, 0], [271, 1, 21, 28, 0, 0, 0], [294, 1, 21, 28, 0, 0, 0], [317, 1, 21, 28, 0, 0, 0], [340, 1, 21, 28, 0, 0, 0], [363, 1, 24, 27, 0, 0, 0], [389, 1, 24, 27, 0, 0, 0], [415, 1, 22, 27, 0, 0, 0], [439, 1, 22, 27, 0, 0, 0], [463, 1, 22, 27, 0, 0, 0], [487, 1, 22, 27, 0, 0, 0], [511, 1, 17, 27, 0, 0, 0], [530, 1, 17, 27, 0, 0, 0]].map(function(t) {
                return frame(TextureCache["number-3-cay.png"], t[0], t[1], t[2], t[3])
            });
            this.framesNumber = {
                sumwhite10: e[0],
                sumyellow10: e[1],
                sumwhite0: e[2],
                sumwhite5: e[3],
                sumyellow0: e[4],
                sumyellow5: e[5],
                sumwhite8: e[6],
                sumwhite9: e[7],
                sumyellow8: e[8],
                sumyellow9: e[9],
                sumwhite3: e[10],
                sumwhite6: e[11],
                sumyellow3: e[12],
                sumyellow6: e[13],
                sumwhite4: e[14],
                sumyellow4: e[15],
                sumwhite2: e[16],
                sumwhite7: e[17],
                sumyellow2: e[18],
                sumyellow7: e[19],
                sumwhite1: e[20],
                sumyellow1: e[21]
            };
            var i = [[1, 1, 82, 82, 0, 0, 0], [85, 1, 82, 82, 0, 0, 0], [1, 85, 64, 64, 0, 0, 0], [1, 151, 64, 64, 0, 0, 0], [67, 85, 64, 64, 0, 0, 0], [133, 85, 45, 45, 0, 0, 0], [133, 132, 44, 44, 0, 0, 0], [67, 151, 64, 64, 0, 0, 0]].map(function(t) {
                return frame(TextureCache["lstcircle1.png"], t[0], t[1], t[2], t[3])
            });
            this.framesBien = {
                BienNhanAnimation: i[0],
                bien0: i[1],
                bien1: i[2],
                bien2: i[3],
                bienblue: i[4],
                bien3: i[5],
                bien4: i[6],
                biengreen: i[7]
            };
            var n = [[2, 2, 50, 50], [54, 2, 36, 36], [92, 2, 36, 36], [130, 2, 36, 36], [168, 2, 26, 26], [168, 30, 26, 26]].map(function(t) {
                return frame(TextureCache["asset_3cay.png"], t[0], t[1], t[2], t[3])
            });
            this.framesAsset = {
                betother: n[1],
                betothersend: n[3],
                betotherconfirm: n[0],
                betotherconfirmed: n[2],
                owner: n[4],
                fedchicken: n[5]
            }
        }
        ,
        c.prototype.InitBg = function() {
            this.table = new Sprite(TextureCache["table-" + this.roomModel.MoneyType]),
            this.table.anchor.set(.5),
            this.table.position.set(this.size[0] / 2, this.size[1] / 2),
            this.bgContainer.addChild(this.table);
            var t = new PIXI.Text(Message.GetMessage("na1"),{
                fontFamily: this.fontFaceBold,
                fontSize: 50,
                fill: "#000"
            });
            t.alpha = .1,
            t.anchor.set(.5),
            t.y = -30,
            this.table.addChild(t),
            this.dealer = new AnimatedSprite(this.framesDealerNormal),
            this.dealer.anchor.set(.5),
            this.dealer.position.set(0, -253),
            this.dealer.animationSpeed = .2,
            this.dealer.interactive = !0,
            this.dealer.buttonMode = !0,
            this.dealer.on("pointerdown", this.DealerDown.bind(this.dealer, this)),
            this.dealer.play(),
            this.table.addChild(this.dealer);
            for (var e = 0; e < 8; e++) {
                var i = new Sprite(TextureCache["ic-ad-user.png"]);
                i.anchor.set(.5),
                i.position.set(this.playerPos[e][0], this.playerPos[e][1]),
                this.table.addChild(i)
            }
            this.notify = new Sprite(TextureCache["big-bg-notify.png"]),
            this.notify.anchor.set(.5),
            this.notify.position.set(0, -102),
            this.notify.addChild(new PIXI.Text("CHỜ NGƯỜI CHƠI",{
                fontFamily: this.fontFaceBold,
                fontSize: 18,
                fill: "white"
            })),
            this.notify.children[0].anchor.set(.5),
            this.notify.visible = !1,
            this.txtStatus = new Sprite(TextureCache["small-bg-notify.png"]),
            this.txtStatus.anchor.set(.5),
            this.txtStatus.position.set(0, 58),
            this.txtStatus.addChild(new PIXI.Text("CHỜ NGƯỜI CHƠI",{
                fontFamily: this.fontFaceBold,
                fontSize: 12,
                fill: "white"
            })),
            this.txtStatus.children[0].anchor.set(.5),
            this.txtStatus.visible = !1,
            this.table.addChild(this.notify, this.txtStatus, this.playerContainer, this.chipContainer, this.bienContainer, this.cardContainer, this.resultContainer, this.buttonContainer),
            this.iconChuong = new Sprite(this.framesAsset.owner),
            this.iconChuong.anchor.set(.5),
            this.iconChuong.position.set(this.dealer.x, this.dealer.y),
            this.iconChuong.visible = !1,
            this.table.addChild(this.iconChuong)
        }
        ,
        c.prototype.BtnOver = function() {
            this.texture = TextureCache[this.name.replace("normal", "hover")]
        }
        ,
        c.prototype.BtnOut = function() {
            this.texture = TextureCache[this.name]
        }
        ,
        c.prototype.BtnDown = function() {
            this.texture = TextureCache[this.name.replace("normal", "click")]
        }
        ,
        c.prototype.InitButton = function() {
            this.btnDatChuong = new Sprite(TextureCache["btn-game-normal.png"]),
            this.btnDatChuong.name = "btn-game-normal.png",
            this.btnDatChuong.anchor.set(.5),
            this.btnDatChuong.position.set(480, 300),
            this.btnDatChuong.addChild(new PIXI.Text(Message.GetMessage("ca53"),{
                fontFamily: this.fontRobotoCondensedBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["white"]
            })),
            this.btnDatChuong.children[0].anchor.set(.5),
            this.btnDatChuong.children[0].position.set(0, -10),
            this.txtMoneyBet = new PIXI.Text("0",{
                fontFamily: this.fontRobotoCondensedBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffcc00"]
            }),
            this.txtMoneyBet.anchor.set(.5),
            this.txtMoneyBet.y = 12,
            this.btnDatChuong.addChild(this.txtMoneyBet),
            this.btnDatChuong.interactive = !0,
            this.btnDatChuong.buttonMode = !0,
            this.btnDatChuong.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnDatChuongClick.bind(this.btnDatChuong, this)),
            this.btnDatChuong.visible = !1,
            this.btnFlip = new Sprite(TextureCache["btn-game-normal.png"]),
            this.btnFlip.name = "btn-game-normal.png",
            this.btnFlip.anchor.set(.5),
            this.btnFlip.position.set(480, 300),
            this.btnFlip.addChild(new PIXI.Text(Message.GetMessage("ca80"),{
                fontFamily: this.fontRobotoCondensedBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["white"]
            })),
            this.btnFlip.children[0].anchor.set(.5),
            this.btnFlip.interactive = !0,
            this.btnFlip.buttonMode = !0,
            this.btnFlip.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnFlipClick.bind(this.btnFlip, this)),
            this.btnFlip.visible = !1,
            this.btnGopGa = new Sprite(TextureCache["btn-game-normal.png"]),
            this.btnGopGa.name = "btn-game-normal.png",
            this.btnGopGa.anchor.set(.5),
            this.btnGopGa.position.set(480, 300),
            this.btnGopGa.addChild(new PIXI.Text(Message.GetMessage("ca76"),{
                fontFamily: this.fontRobotoCondensedBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["white"]
            })),
            this.btnGopGa.children[0].anchor.set(.5),
            this.btnGopGa.children[0].position.set(0, -10),
            this.txtMoneyGopGa = new PIXI.Text(u.Util.ParseMoney(this.roomModel.MinBet),{
                fontFamily: this.fontRobotoCondensedBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffcc00"]
            }),
            this.txtMoneyGopGa.anchor.set(.5),
            this.txtMoneyGopGa.y = 12,
            this.btnGopGa.addChild(this.txtMoneyGopGa),
            this.btnGopGa.interactive = !0,
            this.btnGopGa.buttonMode = !0,
            this.btnGopGa.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnGopGaClick.bind(this.btnGopGa, this)),
            this.btnGopGa.visible = !1,
            this.btnBienMax = new Sprite(TextureCache["btn-game-normal.png"]),
            this.btnBienMax.name = "btn-game-normal.png",
            this.btnBienMax.anchor.set(.5),
            this.btnBienMax.position.set(340, 300),
            this.btnBienMax.addChild(new PIXI.Text(Message.GetMessage("ca77"),{
                fontFamily: this.fontRobotoCondensedBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["white"]
            })),
            this.btnBienMax.children[0].anchor.set(.5),
            this.btnBienMax.children[0].position.set(0, -10),
            this.txtMoneyBienMax = new PIXI.Text(u.Util.MoneyHelper(this.roomModel.MaxBet).toString(),{
                fontFamily: this.fontRobotoCondensedBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffcc00"]
            }),
            this.txtMoneyBienMax.anchor.set(.5),
            this.txtMoneyBienMax.y = 12,
            this.btnBienMax.addChild(this.txtMoneyBienMax),
            this.btnBienMax.interactive = !0,
            this.btnBienMax.buttonMode = !0,
            this.btnBienMax.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnBienMaxClick.bind(this.btnBienMax, this)),
            this.btnBienMax.visible = !1,
            this.btnBienMin = new Sprite(TextureCache["btn-game-normal.png"]),
            this.btnBienMin.name = "btn-game-normal.png",
            this.btnBienMin.anchor.set(.5),
            this.btnBienMin.position.set(200, 300),
            this.btnBienMin.addChild(new PIXI.Text(Message.GetMessage("ca77"),{
                fontFamily: this.fontRobotoCondensedBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["white"]
            })),
            this.btnBienMin.children[0].anchor.set(.5),
            this.btnBienMin.children[0].position.set(0, -10),
            this.txtMoneyBienMin = new PIXI.Text(u.Util.MoneyHelper(this.roomModel.MinBet).toString(),{
                fontFamily: this.fontRobotoCondensedBold,
                fontSize: "vi" === this.lang ? 20 : 14,
                fill: ["#ffcc00"]
            }),
            this.txtMoneyBienMin.anchor.set(.5),
            this.txtMoneyBienMin.y = 12,
            this.btnBienMin.addChild(this.txtMoneyBienMin),
            this.btnBienMin.interactive = !0,
            this.btnBienMin.buttonMode = !0,
            this.btnBienMin.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnBienMinClick.bind(this.btnBienMin, this)),
            this.btnBienMin.visible = !1,
            this.btnNhanBien = new Sprite(TextureCache["btn-game-normal.png"]),
            this.btnNhanBien.name = "btn-game-normal.png",
            this.btnNhanBien.anchor.set(.5),
            this.btnNhanBien.position.set(60, 300),
            this.btnNhanBien.addChild(new PIXI.Text(Message.GetMessage("ca78"),{
                fontFamily: this.fontRobotoCondensedBold,
                fontSize: "vi" === this.lang ? 18 : 12,
                fill: ["white"]
            })),
            this.btnNhanBien.children[0].anchor.set(0, .5),
            this.btnNhanBien.children[0].position.set(-30, 0),
            this.btnNhanBien.addChild(new Sprite(TextureCache["checkbox-1.png"])),
            this.btnNhanBien.children[1].anchor.set(.5),
            this.btnNhanBien.children[1].position.set(-45, 0),
            this.btnNhanBien.addChild(new Sprite(TextureCache["tick.png"])),
            this.btnNhanBien.children[2].visible = !1,
            this.btnNhanBien.children[2].anchor.set(.5),
            this.btnNhanBien.children[2].position.set(-45, 0),
            this.btnNhanBien.interactive = !0,
            this.btnNhanBien.buttonMode = !0,
            this.btnNhanBien.on("pointerover", this.BtnOver).on("pointerout", this.BtnOut).on("pointerdown", this.BtnDown).on("pointerup", this.BtnNhanBienClick.bind(this.btnNhanBien, this)),
            this.btnNhanBien.visible = !1,
            this.buttonContainer.addChild(this.btnDatChuong, this.btnFlip, this.btnGopGa, this.btnBienMax, this.btnBienMin, this.btnNhanBien)
        }
        ,
        c.prototype.DisableButton = function(t) {
            t.interactive = !1,
            t.buttonMode = !1,
            t.texture = TextureCache[t.name.replace("normal", "disable")]
        }
        ,
        c.prototype.EnableButton = function(t) {
            t.interactive = !0,
            t.buttonMode = !0,
            t.texture = TextureCache[t.name]
        }
        ,
        c.prototype.BtnDatChuongClick = function(t) {
            t.hub.Bet(t.barContainer.betValue)
        }
        ,
        c.prototype.BtnFlipClick = function(t) {
            t.hub.Flip()
        }
        ,
        c.prototype.BtnGopGaClick = function(t) {
            t.hub.FeedChicken()
        }
        ,
        c.prototype.BtnBienMaxClick = function(t) {
            this.visible = !1,
            t.btnBienMin.visible = !1,
            t.btnNhanBien.visible = !1;
            var e = t.roomModel.Players;
            for (var i in e)
                if (i != t.currentPlayer.AccountID && i != t.roomModel.OwnerId) {
                    var n = e[i]
                      , o = t.GetPlayerByAccountId(n.AccountID);
                    !o || o.isSendBetOther || o.isConfirmBetOther || o.isConfirmedBetOther || t.hub.BetOthers(n.AccountID, t.roomModel.MaxBet)
                }
        }
        ,
        c.prototype.BtnBienMinClick = function(t) {
            this.visible = !1,
            t.btnBienMax.visible = !1,
            t.btnNhanBien.visible = !1;
            var e = t.roomModel.Players;
            for (var i in e)
                if (i != t.currentPlayer.AccountID && i != t.roomModel.OwnerId) {
                    var n = e[i]
                      , o = t.GetPlayerByAccountId(n.AccountID);
                    !o || o.isSendBetOther || o.isConfirmBetOther || o.isConfirmedBetOther || t.hub.BetOthers(n.AccountID, t.roomModel.MinBet)
                }
        }
        ,
        c.prototype.BtnNhanBienClick = function(t) {
            t.GetPlayerByAccountId(t.currentPlayer.AccountID),
            this.children[2].visible = !this.children[2].visible,
            this.visible = !1,
            t.btnBienMax.visible = !1,
            t.btnBienMin.visible = !1,
            t.ActionBetother()
        }
        ,
        c.prototype.GetPlayerByAccountId = function(t) {
            for (var e, i = 0; i < this.players.length; i++)
                if (this.players[i] && this.players[i].accountId == t) {
                    e = this.players[i];
                    break
                }
            return e
        }
        ,
        c.prototype.GetPlayerByPosition = function(t) {
            for (var e, i = 0; i < this.players.length; i++)
                if (this.players[i] && this.players[i].pos === t) {
                    e = this.players[i];
                    break
                }
            return e
        }
        ,
        c.prototype.ChangeOwner = function(t) {
            var e = this.GetPlayerByAccountId(t);
            if (e) {
                this.iconChuong.visible = !0;
                try {
                    TweenMax.to(this.iconChuong, .5, {
                        data: "bacay",
                        x: e.avatar.x + 30,
                        y: e.avatar.y - e.avatar.height / 2 + 10
                    })
                } catch (t) {}
            }
        }
        ,
        c.prototype.ShowNotify = function(t, e) {
            var i = this;
            this.notify.scale.set(.01),
            this.notify.visible = !0,
            this.notify.children[0].text = t;
            try {
                TweenMax.to(this.notify.scale, .4, {
                    data: "bacay",
                    x: 1,
                    y: 1
                })
            } catch (t) {}
            if (e) {
                var n = this;
                setTimeout(function() {
                    try {
                        TweenMax.to(i.notify.scale, .2, {
                            data: "bacay",
                            x: .01,
                            y: .01
                        })
                    } catch (t) {}
                    setTimeout(function() {
                        n.notify.visible = !1
                    }, 300)
                }, e)
            }
        }
        ,
        c.prototype.ShowStatus = function(t, e) {
            var i = this;
            u.Util.ClearTimeOut(this.timeStatus),
            this.txtStatus.scale.set(.01),
            this.txtStatus.visible = !0,
            this.txtStatus.children[0].text = t;
            try {
                TweenMax.to(this.txtStatus.scale, .4, {
                    data: "bacay",
                    x: 1,
                    y: 1
                })
            } catch (t) {}
            var n = this;
            e && (this.timeStatus = setTimeout(function() {
                try {
                    TweenMax.to(i.txtStatus.scale, .2, {
                        data: "bacay",
                        x: .01,
                        y: .01
                    })
                } catch (t) {}
                setTimeout(function() {
                    n.txtStatus.visible = !1
                }, 300)
            }, e))
        }
        ,
        c.prototype.InitTableInfo = function() {
            var t = this.roomModel;
            this.btnBack = new Sprite(TextureCache["btn-def.png"]),
            this.btnBack.anchor.set(.5),
            this.btnBack.position.set(-520, -this.size[1] / 2 + 45),
            this.btnBack.addChild(new Sprite(TextureCache["ic-back.png"])),
            this.btnBack.children[0].anchor.set(.5),
            this.btnBack.interactive = !0,
            this.btnBack.buttonMode = !0,
            this.btnBack.on("pointerover", this.BtnBackOver).on("pointerout", this.BtnBackOut).on("pointerdown", this.BtnBackDown.bind(this.btnBack, this));
            var e = new PIXI.Text(Message.GetMessage(0 === t.MoneyType ? "tb113" : "tb112") + ": " + u.Util.NumberToString(t.Name, 3),{
                fontFamily: this.fontRobotoCondensedRegular,
                fontSize: 17,
                fill: ["#a17eb0"]
            });
            e.anchor.set(0, .5),
            e.position.set(-480, -this.size[1] / 2 + 25);
            var i = new PIXI.Text(Message.GetMessage("ca81").toUpperCase() + u.Util.ParseMoney(t.MinBet) + " " + Config.MoneyText[t.MoneyType],{
                fontFamily: this.fontRobotoCondensedRegular,
                fontSize: 17,
                fill: ["#a17eb0"]
            });
            i.anchor.set(0, .5),
            i.position.set(-480, -this.size[1] / 2 + 45),
            this.lblSession = new PIXI.Text(Message.GetMessage("ca95").toUpperCase() + " #",{
                fontFamily: this.fontRobotoCondensedRegular,
                fontSize: 17,
                fill: ["#a17eb0"]
            }),
            this.lblSession.anchor.set(0, .5),
            this.lblSession.position.set(-480, -this.size[1] / 2 + 65),
            this.infoContainer.addChild(this.btnBack, e, i, this.lblSession),
            this.table.addChild(this.infoContainer)
        }
        ,
        c.prototype.DealerDown = function(t) {
            var e = this;
            e.stop(),
            e.interactive = !1,
            e.buttonMode = !1,
            e.loop = !1,
            e.textures = t.framesDealerClick,
            e.gotoAndPlay(0),
            e.onComplete = function() {
                t.DealerNormal()
            }
        }
        ,
        c.prototype.DealerNormal = function() {
            var t = this.dealer;
            t.stop(),
            t.interactive = !0,
            t.buttonMode = !0,
            t.loop = !0,
            t.textures = this.framesDealerNormal,
            t.gotoAndPlay(0)
        }
        ,
        c.prototype.Update = function(t) {
            t.timer && t.timer.tick()
        }
        ,
        c.prototype.Resize = function(t) {
            if (t.size = [$(window).width(), $(window).height()],
            t.application.renderer.resize($(window).width(), $(window).height()),
            t.size[0] < 1280 || t.size[1] < 720) {
                var e = Math.min(t.size[0] / 1280, t.size[1] / 720);
                t.table.scale.set(e)
            } else
                t.table.scale.set(1);
            t.table.anchor.set(.5),
            t.table.position.set(t.size[0] / 2, t.size[1] / 2)
        }
        ,
        c.prototype.ResetTab = function() {
            window.addEventListener("blur", function() {
                TweenLite.lagSmoothing(0)
            }, !1),
            window.addEventListener("focus", function() {
                TweenLite.lagSmoothing(1e3, 16)
            }, !1)
        }
        ,
        c.prototype.BtnBackOver = function() {
            this.texture = TextureCache["btn-def-h.png"]
        }
        ,
        c.prototype.BtnBackOut = function() {
            this.texture = TextureCache["btn-def.png"]
        }
        ,
        c.prototype.BtnBackDown = function(t) {
            var e = t.players[0];
            e.isLeave ? (t.hub.UnregisterLeaveRoom(),
            e.isUnLeave = !0) : (t.hub.LeaveGame(),
            e.isUnLeave = !1)
        }
        ,
        c.prototype.RenderPlayer = function(t) {
            var e = t.Position - this.currentPlayer.Position;
            e < 0 && (e += this.roomModel.MaxPlayer);
            try {
                this.players[e].destroy({
                    children: !0
                })
            } catch (t) {}
            this.players[e] = new s.default({
                position: e,
                player: t,
                xy: this.playerPos[e],
                w: t.AccountID === this.currentPlayer.AccountID ? 120 : 100,
                h: t.AccountID === this.currentPlayer.AccountID ? 120 : 100,
                b: t.AccountID === this.currentPlayer.AccountID ? 85 : 75,
                game: this
            }),
            this.playerContainer.addChild(this.players[e]),
            t.RegisterLeaveRoom && (this.players[e].leaveStatus.visible = !0,
            this.players[e].isLeave = !0)
        }
        ,
        c.prototype.RenderPlayers = function(t) {
            for (var e = 0; e < this.players.length; e++) {
                if (this.players[e])
                    try {
                        this.players[e].destroy({
                            children: !0
                        })
                    } catch (t) {}
                this.players[e] = null
            }
            for (var e in this.players = [null, null, null, null, null, null, null, null],
            t)
                this.RenderPlayer(t[e])
        }
        ,
        c.prototype.PlayerLeave = function(t, e) {
            if (t === this.currentPlayer.AccountID)
                this.currentPlayer && t == this.currentPlayer.AccountID && e && "object" == typeof e && this.hub.ShowMessage(e),
                App.closePopupMessage(),
                this.Delete(),
                App.handleBack();
            else {
                var i = this.GetPlayerByAccountId(t);
                if (i) {
                    var n = i.pos;
                    i.Reset(),
                    i.destroy({
                        children: !0
                    }),
                    delete this.players[n],
                    this.players[n] = null
                }
                this.CheckPlayer()
            }
        }
        ,
        c.prototype.CheckPlayer = function() {
            for (var t, e = 0, i = 0; i < this.players.length; i++)
                this.players[i] && (e++,
                t = this.players[i]);
            1 === e && (this.RemoveTimer(),
            this.ChangeOwner(t.accountId))
        }
        ,
        c.prototype.PlayerJoin = function(t) {
            this.RenderPlayer(t)
        }
        ,
        c.prototype.CreateChipBg = function() {
            this.arrChipBg = [];
            for (var t = 0; t < 8; t++) {
                var e = new Sprite(TextureCache["bg-chip.png"]);
                e.anchor.set(0, .5),
                e.position.set(this.chipPos[t][0], this.chipPos[t][1]),
                e.visible = !1,
                e.addChild(new Sprite(TextureCache["chip-in-game.png"])),
                e.children[0].anchor.set(0, .5),
                e.children[0].scale.set(.6),
                e.children[0].x = 5,
                e.addChild(new PIXI.Text("0",{
                    fontFamily: "Roboto-Bold",
                    fontSize: 14,
                    fill: [1 === this.roomModel.MoneyType ? "yellow" : "white"]
                })),
                e.children[1].x = 30,
                e.children[1].anchor.set(0, .5),
                this.chipContainer.addChild(e),
                this.arrChipBg.push(e)
            }
            this.chickenBg = new Sprite(TextureCache["bg-chip.png"]),
            this.chickenBg.anchor.set(0, .5),
            this.chickenBg.position.set(-this.chickenBg.width / 2, -150),
            this.chickenBg.addChild(new Sprite(TextureCache["chip-in-game.png"])),
            this.chickenBg.children[0].anchor.set(0, .5),
            this.chickenBg.children[0].scale.set(.6),
            this.chickenBg.children[0].x = 5,
            this.txtChickenMoney = new PIXI.Text("0",{
                fontFamily: "Roboto-Bold",
                fontSize: 14,
                fill: [1 === this.roomModel.MoneyType ? "yellow" : "white"]
            }),
            this.chickenBg.addChild(this.txtChickenMoney),
            this.txtChickenMoney.x = 30,
            this.txtChickenMoney.anchor.set(0, .5),
            this.chipContainer.addChild(this.chickenBg),
            this.chickenBg.visible = !1
        }
        ,
        c.prototype.RemoveDrawCard = function() {
            this.drawCardsContainer.removeChildren(),
            this.drawCardsContainer.visible = !0
        }
        ,
        c.prototype.DrawCard = function() {
            var t = this;
            this.RemoveDrawCard(),
            this.arrDraw = [];
            var e = [];
            for (var i in this.roomModel.Players)
                if (0 < this.roomModel.Players[i].Status) {
                    var n = this.GetPlayerByAccountId(i);
                    n && e.push(n.pos)
                }
            for (i = 0; i < 3; i++)
                for (var o = 0; o < e.length; o++) {
                    var s = new Sprite(TextureCache["joker.png"]);
                    s.anchor.set(.5),
                    s.position.set(this.dealer.x, this.dealer.y),
                    s.scale.set(.01),
                    s.rot = 10 * (i - 1) * Math.PI / 180,
                    s.rotation = 2 * Math.PI,
                    s.i = i,
                    s.pos = this.cardPos[e[o]],
                    s.p = e[o],
                    s.obj = this.GetPlayerByPosition(e[o]).accountId === this.currentPlayer.AccountID ? this.cardOwn : this.cardOther,
                    this.arrDraw.push(s),
                    this.drawCardsContainer.addChild(s)
                }
            var a = this;
            for (this.timeRender = setTimeout(function() {
                a.drawCardsContainer.visible = !1,
                3 !== t.roomModel.GameLoop.Phrase && (a.RenderHandCards(),
                0 < a.roomModel.Players[a.currentPlayer.AccountID].Status && (a.btnFlip.visible = !0))
            }, 1e3 * (.5 + .075 * a.arrDraw.length)),
            i = 0; i < a.arrDraw.length; i++) {
                try {
                    TweenMax.to(a.arrDraw[i], .3, {
                        data: "bacay",
                        delay: .075 * i,
                        rotation: a.arrDraw[i].rot,
                        x: a.arrDraw[i].pos[0] + (a.arrDraw[i].i - 1) * (0 === a.arrDraw[i].p ? 35 : 20),
                        y: a.arrDraw[i].pos[1] + (1 === a.arrDraw[i].i ? 0 : 0 === a.arrDraw[i].p ? 4 : 2)
                    })
                } catch (t) {}
                try {
                    TweenMax.to(a.arrDraw[i].scale, .3, {
                        data: "bacay",
                        delay: .075 * i,
                        x: a.arrDraw[i].obj.width / a.cardOri.width,
                        y: a.arrDraw[i].obj.height / a.cardOri.height
                    })
                } catch (t) {}
            }
        }
        ,
        c.prototype.CreateTimer = function() {
            this.timer = new u.Timer({
                width: 118,
                height: 118
            }),
            this.timer.position.set(this.players[0].avatar.x - 60, this.players[0].avatar.y - 60),
            this.playerContainer.addChild(this.timer),
            this.timer.startTimer(10, 10)
        }
        ,
        c.prototype.CheckGame = function(t) {
            var e = this.roomModel.GameLoop.Phrase;
            e <= 0 ? this.ShowWait() : (this.ShowBetLog(),
            1 === e || 2 === e ? 1 === e ? this.StartBettingTime(this.roomModel, t) : 2 === e && t.time && this.StartAnimationTime(this.roomModel, t) : 3 === e && (this.RenderHandCards(),
            this.ShowAllResult(this.roomModel, t))),
            0 < e && 0 === this.roomModel.Players[this.currentPlayer.AccountID].Status && this.ShowStatus(Message.GetMessage("me6"))
        }
        ,
        c.prototype.ShowBetLog = function() {
            var t = this.roomModel.Players
              , e = this.roomModel.GameLoop.Phrase;
            for (var i in t)
                try {
                    (p = this.GetPlayerByAccountId(t[i].AccountID)) && 1 === t[i].Status && 1 !== t[i].RoleInGame && this.roomModel.GameLoop.BetLogs[t[i].AccountID] && this.UpdateBetting(t[i], void 0 !== this.roomModel.GameLoop.BetLogs[t[i].AccountID] ? this.roomModel.GameLoop.BetLogs[t[i].AccountID] : this.roomModel.MinBet, !0)
                } catch (t) {}
            for (var n = this.roomModel.GameLoop.FedChickenLogs, o = this.roomModel.MinBet, s = 0, a = (i = 0,
            n.length); i < a; i++)
                try {
                    (p = this.GetPlayerByAccountId(n[i])).ShowChick(),
                    s += o
                } catch (t) {}
            0 < s && (this.txtChickenMoney.text = u.Util.ParseMoney(s),
            this.chickenBg.visible = !0),
            1 === e && 0 < this.roomModel.GameLoop.BetLogs[this.currentPlayer.AccountID] && !this.roomModel.Players[this.currentPlayer.AccountID].FedChicken ? this.btnGopGa.visible = !0 : this.btnGopGa.visible = !1;
            for (var r = this.roomModel.GameLoop.BetOtherLogs, h = this.currentPlayer.AccountID, c = this.GetPlayerByAccountId(this.currentPlayer.AccountID), l = 0, d = r.length; l < d; l++)
                try {
                    var p = void 0;
                    h === r[l].From ? p = this.GetPlayerByAccountId(r[l].To) : h === r[l].To && (p = this.GetPlayerByAccountId(r[l].From)),
                    p && (1 <= e && r[l].Accepted ? (p.ShowBetOther(r[l].Money, 2),
                    c.betOtherMoney += r[l].Money) : 1 === e && this.BetOther(r[l].From, r[l].To, r[l].Money))
                } catch (t) {}
        }
        ,
        c.prototype.ShowWait = function() {
            this.roomModel.CountPlayers < 2 ? this.ShowNotify(Message.GetMessage("me7")) : this.ShowNotify(Message.GetMessage("me6"))
        }
        ,
        c.prototype.StartGame = function(t, e) {
            console.log("StartGame", t, e),
            this.roomModel = t,
            this.ResetGame(),
            this.DisableArrChip(),
            u.Util.ClearTimeOut(this.timeReset),
            this.RenderPlayers(this.roomModel.Players),
            this.ChangeOwner(this.roomModel.OwnerId),
            0 === t.GameLoop.Phrase ? (this.DisabeButtons(),
            this.ShowWait(),
            this.currentPlayer = this.roomModel.Players[App.account.accountID + ":" + App.account.portalID]) : this.chickenBg.visible = !0,
            e && 1 < this.roomModel.CountPlayers && this.ShowTimer(e.totalTime, e.time)
        }
        ,
        c.prototype.ReRenPlayers = function() {
            for (var t = 0, e = 0; e < this.players.length; e++)
                this.players[e] && t++;
            t !== this.roomModel.Players.length && this.RenderPlayers(this.roomModel.Players)
        }
        ,
        c.prototype.DisableGame = function() {
            this.chickenBg.visible = !1;
            for (var t = 0; t < this.arrChipBg.length; t++)
                this.arrChipBg[t].visible = !1
        }
        ,
        c.prototype.GetCard = function(t) {
            if (t < 0 || 36 <= t)
                return "joker.png";
            var e = t % 9 + 1
              , i = Math.floor(t / 9);
            return 9 < e && (e = 1),
            e + (i = this.suite[i]) + ".png"
        }
        ,
        c.prototype.CheckBetLog = function() {}
        ,
        c.prototype.UpdateGameLoopId = function() {
            this.lblSession.text = Message.GetMessage("ca95").toUpperCase() + (this.roomModel.CurrentGameLoopId <= 0 ? " #" : this.roomModel.CurrentGameLoopId)
        }
        ,
        c.prototype.UpdateSession = function(t) {
            for (var e in this.roomModel.Players) {
                var i = this.GetPlayerByAccountId(e);
                i && (i.player = this.roomModel.Players[e],
                i.UpdateBalance(0 === this.roomModel.MoneyType ? i.player.Account.CoinBalance : i.player.Account.GoldBalance))
            }
            this.currentPlayer = this.roomModel.Players[App.account.accountID + ":" + App.account.portalID]
        }
        ,
        c.prototype.DisabeButtons = function() {
            this.btnBienMax.visible = this.btnBienMin.visible = this.btnDatChuong.visible = this.btnFlip.visible = this.btnGopGa.visible = this.btnNhanBien.visible = this.btnNhanBien.children[2].visible = !1
        }
        ,
        c.prototype.StartBettingTime = function(t, e) {
            console.log("startbettingtime", t, e),
            this.ShowNotify(Message.GetMessage("me25")),
            App.closePopupMessage(),
            this.roomModel = t,
            this.UpdateGameLoopId(),
            this.UpdateSession(t),
            this.currentPlayer && (this.currentPlayer.AccountID === t.OwnerId || 1 !== this.roomModel.Players[this.currentPlayer.AccountID].Status || 0 < t.GameLoop.BetLogs[this.currentPlayer.AccountID] ? this.currentPlayer.AccountID !== t.OwnerId && 0 < t.GameLoop.BetLogs[this.currentPlayer.AccountID] ? 1 === this.currentPlayer.Status && 2 < t.CountActivePlayer && (this.btnNhanBien.visible = !0,
            this.btnBienMax.visible = !0,
            this.btnBienMin.visible = !0) : 1 !== this.currentPlayer.Status || t.Players[this.currentPlayer.AccountID].FedChicken || (this.btnGopGa.visible = !0) : (this.barContainer.Show(),
            this.btnDatChuong.visible = !0));
            for (var i = t.GameLoop.FedChickenLogs, n = 0, o = i.length; n < o; n++)
                try {
                    var s = this.GetPlayerByAccountId(i[n]);
                    s && (s.iconChick.visible = !0),
                    i[n] === this.currentPlayer.AccountID && (this.barContainer.visible = !1)
                } catch (t) {
                    console.log(t)
                }
            this.ShowTimer(e.totalTime, e.time)
        }
        ,
        c.prototype.RemoveTimer = function() {
            if (this.timer)
                try {
                    this.timer.clearTimer(),
                    this.timer = null
                } catch (t) {}
        }
        ,
        c.prototype.ShowTimer = function(t, e) {
            this.RemoveTimer();
            var i = this.roomModel.OwnerId === this.currentPlayer.AccountID ? 118 : 98
              , n = this.roomModel.OwnerId === this.currentPlayer.AccountID ? 118 : 98;
            this.timer = new u.Timer({
                width: i,
                height: n,
                lineWidth: 2
            });
            var o = this.GetPlayerByAccountId(this.roomModel.OwnerId);
            this.timer.position.set(o.avatar.x - (this.roomModel.OwnerId === this.currentPlayer.AccountID ? 60 : 50), o.avatar.y - (this.roomModel.OwnerId === this.currentPlayer.AccountID ? 60 : 50)),
            this.playerContainer.addChild(this.timer),
            this.timer.startTimer(t, e)
        }
        ,
        c.prototype.DeleteNanBai = function() {
            if (this.nanBaiContainer)
                try {
                    this.nanBaiContainer.destroy({
                        children: !0
                    }),
                    this.nanBaiContainer = null
                } catch (t) {}
        }
        ,
        c.prototype.ShowNanBai = function(t) {
            this.DeleteNanBai(),
            this.notify.visible = !1,
            this.nanBaiContainer = new r.default(this,t),
            this.nanBaiContainer.visible = !0,
            this.application.stage.addChild(this.nanBaiContainer)
        }
        ,
        c.prototype.UpdateBetting = function(t, e, i) {
            if (console.log("UpdateBetting", t, e),
            t.AccountID == this.currentPlayer.AccountID && (this.barContainer.Hide(),
            this.roomModel.IsPlaying && 1 === this.roomModel.GameLoop.Phrase && 1 === this.currentPlayer.Status && this.currentPlayer.AccountID != this.roomModel.OwnerId && (this.btnGopGa.visible = !0,
            this.roomModel.GameLoop.BetLogs[this.currentPlayer.AccountID] = e,
            2 < this.roomModel.CountActivePlayer))) {
                this.btnNhanBien.visible = !0,
                this.btnBienMax.visible = !0,
                this.btnBienMin.visible = !0;
                var n = this.roomModel.Players;
                for (var o in n)
                    if (o != this.currentPlayer.AccountID && o != this.roomModel.OwnerId) {
                        var s = this.GetPlayerByAccountId(o);
                        s && (s.ShowBetOther(),
                        s.isConfirmBetOther && (this.btnNhanBien.visible = !0))
                    }
            }
            if (this.roomModel.IsPlaying) {
                var a = this.GetPlayerByAccountId(t.AccountID);
                a && 0 !== e && (a.UpdateBetting(e),
                i || a.UpdateMoney(t, -e))
            }
        }
        ,
        c.prototype.StartAnimationTime = function(t, e) {
            if (console.log("StartAnimationTime", t, e),
            this.ShowNotify(Message.GetMessage("ca110")),
            this.DisabeButtons(),
            this.barContainer.visible = !1,
            this.roomModel = t,
            this.UpdateSession(t),
            !(e.time < 4)) {
                if (this.DrawCard(),
                this.roomModel.GameLoop.FedChickenLogs.length <= 1 && 0 < this.feedChicken.length) {
                    var i = this.feedChicken[0]
                      , n = this.GetPlayerByAccountId(i);
                    n.iconChick.visible = !1,
                    n && (n.RestoreChick(),
                    n.ShowMoney(this.roomModel.MinBet),
                    n.isFedChicken = !1,
                    n.betMoney -= this.roomModel.MinBet),
                    this.chickenBg.visible = !1,
                    1 === this.roomModel.MoneyType ? n.player.Account.GoldBalance += this.roomModel.MinBet : n.Player.Account.CoinBalance += this.roomModel.MinBet,
                    i == this.currentPlayer.AccountID && this.ShowStatus(Message.GetMessage("bacay.nobetchicken").replace("{0}", this.roomModel.MinBet), 2e3)
                }
                this.HideOther()
            }
        }
        ,
        c.prototype.HideOther = function() {
            for (var t = 0; t < this.players.length; t++)
                this.players[t] && this.players[t].HideBetOther()
        }
        ,
        c.prototype.FeedChicken = function(t, e) {
            var i = this;
            console.log("FeedChicken", t, e),
            this.feedChicken.push(t);
            try {
                t == this.currentPlayer.AccountID && (this.btnGopGa.visible = !1);
                var n = this.GetPlayerByAccountId(t)
                  , o = this.roomModel.MinBet;
                n.UpdateChick(),
                n.ShowMoney(-this.roomModel.MinBet),
                n.betMoney += this.roomModel.MinBet,
                setTimeout(function() {
                    i.chickenBg.visible = !0,
                    i.txtChickenMoney.text = u.Util.ParseMoney(e)
                }, 500),
                1 === this.roomModel.MoneyType ? n.player.Account.GoldBalance -= o : n.player.Account.CoinBalance -= o,
                n.UpdateMoney(n.player.Account, -o),
                this.roomModel.GameLoop.FedChickenLogs.push(t)
            } catch (t) {
                console.log(t)
            }
        }
        ,
        c.prototype.RemoveHandCards = function() {
            this.handCardsContainer.visible = !0,
            this.handCardsContainer && this.handCardsContainer.destroy({
                children: !0
            }),
            this.handCardsContainer = new Container,
            this.cardContainer.addChild(this.handCardsContainer),
            this.resultContainer && this.resultContainer.destroy({
                children: !0
            }),
            this.resultContainer = new Container,
            this.table.addChildAt(this.resultContainer, this.table.children.length - 2)
        }
        ,
        c.prototype.RenderHandCards = function() {
            this.drawCardsContainer.visible = !1;
            for (var t = 0; t < this.players.length; t++)
                if (null !== this.players[t] && 0 < this.roomModel.Players[this.players[t].accountId].Status) {
                    var e = this.players[t];
                    e.RenderHand(),
                    e.accountId === this.currentPlayer.AccountID && this.ShowNanBai(this.roomModel.Players[e.accountId].Hand.HandCards)
                }
        }
        ,
        c.prototype.BetOther = function(t, e, i) {
            if (console.log("BetOther", t, e, i),
            App && this.currentPlayer && 1 === this.currentPlayer.Status && this.currentPlayer.AccountID != this.roomModel.OwnerId && (t == this.currentPlayer.AccountID || e == this.currentPlayer.AccountID)) {
                var n = this.currentPlayer.AccountID == t ? e : t
                  , o = this.currentPlayer.AccountID === t ? 0 : 1
                  , s = this.GetPlayerByAccountId(n);
                if (s && s.ShowBetOther(i, o),
                1 == o && 0 < this.roomModel.GameLoop.BetLogs[this.currentPlayer.AccountID])
                    return this.btnNhanBien.children[2].visible ? void this.ActionBetother() : void 0
            }
        }
        ,
        c.prototype.AcceptedBet = function(t, e, i, n) {
            var o, s;
            console.log("AcceptedBet", t, e, i, n),
            t == this.currentPlayer.AccountID && (o = this.GetPlayerByAccountId(e),
            s = this.GetPlayerByAccountId(t)),
            e == this.currentPlayer.AccountID && (o = this.GetPlayerByAccountId(t),
            s = this.GetPlayerByAccountId(e)),
            o && s && (o.ShowBetOther(n, 2),
            o.betMoney += n,
            s.betOtherMoney += n,
            s.betMoney += n,
            o.ShowMoney(-n, !0),
            s.ShowMoney(-n, !0))
        }
        ,
        c.prototype.CancelBetOther = function(t) {
            console.log("CancelBetOther", t);
            var e = this.roomModel.GameLoop.BetOtherLogs
              , i = this.currentPlayer.AccountID
              , n = this.GetPlayerByAccountId(i)
              , o = 0
              , s = 0;
            if (n) {
                for (var a in e) {
                    var r = e[a];
                    if (r.Accepted && (r.From == i || r.To == i)) {
                        s = r.Money,
                        o = r.From == i ? r.To : r.From;
                        var h = this.GetPlayerByAccountId(o);
                        if (!h)
                            continue;
                        n.ShowMoney(s, !0),
                        h.ShowMoney(s, !0),
                        n.betMoney -= s,
                        h.betMoney -= s,
                        h.HideBetOther()
                    }
                }
                var c = this;
                setTimeout(function() {
                    c.ShowStatus(Message.GetMessage("bacay.betunsuccess").replace("{0}", u.Util.ParseMoney(s)), 2e3)
                }, 800)
            }
        }
        ,
        c.prototype.ActionBetother = function() {
            var t = this.roomModel.Players;
            for (var e in t)
                if (e != this.currentPlayer.AccountID && e != this.roomModel.OwnerId) {
                    var i = t[e]
                      , n = this.GetPlayerByAccountId(i.AccountID);
                    n && n.isConfirmBetOther && !n.isConfirmedBetOther && this.hub.AcceptBet(i.AccountID, !0)
                }
        }
        ,
        c.prototype.CancelBetChicken = function(t) {
            console.log("CancelBetChicken", t);
            var e = this.roomModel.GameLoop.FedChickenLogs
              , i = this.currentPlayer.AccountID
              , n = this.GetPlayerByAccountId(i)
              , o = this.roomModel.MinBet;
            if (n) {
                for (var s in e) {
                    var a = e[s]
                      , r = this.GetPlayerByAccountId(a);
                    if (!r)
                        return;
                    1 === this.roomModel.MoneyType ? r.player.Account.GoldBalance += o : r.player.Account.CoinBalance += o,
                    r.iconChick.visible = !1,
                    r.UpdateMoney(r.player.Account, o)
                }
                this.chickenBg.visible = !1,
                this.ShowStatus(Message.GetMessage("bacay.unchicken").replace("{0}", u.Util.ParseMoney(o)), 2e3),
                n.updateStatus(t)
            }
        }
        ,
        c.prototype.FlipCards = function(t, e) {
            if (console.log("FlipCards", t, e),
            t === this.currentPlayer.AccountID) {
                try {
                    this.nanBaiContainer.visible = !1
                } catch (t) {}
                this.btnFlip.visible = !1
            }
            try {
                var i = this.GetPlayerByAccountId(t);
                if (i) {
                    (!i.handCards || i.handCards && i.handCards.length < 3) && i.RenderHand();
                    for (var n = 0; n < i.handCards.length; n++)
                        i.handCards[n].OrdinalValue = e.handCards[n].ordinalValue,
                        i.handCards[n].visible = !0,
                        i.handCards[n].flip = !0,
                        this.Flip(i.handCards[n])
                }
            } catch (t) {}
        }
        ,
        c.prototype.Flip = function(t) {
            var e = this;
            if (t)
                try {
                    TweenMax.to(t.scale, .3, {
                        data: "bacay",
                        x: .01,
                        onComplete: function() {
                            t.texture = TextureCache[e.GetCard(t.OrdinalValue)];
                            try {
                                TweenMax.to(t.scale, .3, {
                                    data: "bacay",
                                    x: t.s
                                })
                            } catch (t) {}
                        }
                    })
                } catch (t) {}
        }
        ,
        c.prototype.ShowAllResult = function(t, e) {
            try {
                this.nanBaiContainer.visible = !1
            } catch (t) {}
            this.drawCardsContainer.visible = !1,
            u.Util.ClearTimeOut(this.timeRender),
            this.DisabeButtons(),
            this.HideOther(),
            this.roomModel = t,
            this.ShowNotify(Message.GetMessage("me18"));
            var i = t.Players;
            for (var n in i)
                if (1 === i[n].Status && i[n].Hand && 3 === i[n].Hand.HandCards.length) {
                    var o = this.GetPlayerByAccountId(i[n].AccountID);
                    o.player = i[n],
                    this.CheckToFlip(o, i[n].Hand.HandCards)
                }
            e && this.ShowTimer(e.totalTime, e.time)
        }
        ,
        c.prototype.CheckToFlip = function(t, e) {
            if (t) {
                (!t.handCards || t.handCards && t.handCards.length < 3) && t.RenderHand();
                try {
                    for (var i = 0; i < 3; i++)
                        t.handCards[i].OrdinalValue = e[i].OrdinalValue,
                        t.handCards[i].flip || (t.handCards[i].visible = !0,
                        t.handCards[i].flip = !0,
                        this.Flip(t.handCards[i]))
                } catch (t) {}
            }
        }
        ,
        c.prototype.DisableArrChip = function() {
            for (var t = 0; t < this.arrChipBg.length; t++)
                this.arrChipBg[t].visible = !1
        }
        ,
        c.prototype.ShowPrize = function(t) {
            console.log("ShowPrize", t),
            u.Util.ClearTimeOut(this.timeRender);
            var e = this.roomModel.Players;
            for (var i in e)
                if (1 === e[i].Status && e[i].Hand && 3 === e[i].Hand.HandCards.length) {
                    var n = this.GetPlayerByAccountId(e[i].AccountID);
                    n.player = e[i],
                    this.CheckToFlip(n, e[i].Hand.HandCards)
                }
            var o = t.resultList;
            this.roomModel.IsPlaying = !1;
            try {
                this.nanBaiContainer.visible = !1
            } catch (t) {}
            for (var i in this.DisableArrChip(),
            o) {
                var s = o[i]
                  , a = this.GetPlayerByAccountId(s.accountId);
                a && (a.iconChick.visible = !1,
                a.ShowSum(s.change),
                a.ShowResult(s),
                s.isChickenKiller && a.RestoreChick(),
                this.chickenBg.visible = !1,
                s.change += a.betMoney,
                0 !== s.change && a.MoneyResult(s.change))
            }
            var r = this;
            r.timeReset = setTimeout(function() {
                r.ResetGame()
            }, 5e3)
        }
        ,
        c.prototype.ResetGame = function() {
            u.Util.ClearTimeOut(this.timeReset),
            this.DeleteTween(),
            this.RemoveDrawCard(),
            this.RemoveHandCards(),
            this.CheckPlayer(),
            this.notify.visible = !1,
            this.txtStatus.visible = !1,
            this.feedChicken = [];
            for (var t = 0; t < this.players.length; t++)
                this.players[t] && (this.players[t].handCards = [],
                this.players[t].isSendBetOther = !1,
                this.players[t].isConfirmBetOther = !1,
                this.players[t].isConfirmedBetOther = !1,
                this.players[t].btnBien.visible = !1,
                this.players[t].Reset());
            this.barContainer.btnSlider.data = null,
            this.barContainer.btnSlider.alpha = 1,
            this.barContainer.btnSlider.dragging = !1
        }
        ,
        c.prototype.AskToSell = function(t) {
            if (console.log("AskToSell", t),
            this.GetPlayerByAccountId(this.currentPlayer.AccountID)) {
                var e = this;
                App.showPopupMessage({
                    content: Message.GetMessage("ca25"),
                    textDone: Message.GetMessage("ca59"),
                    handleDone: function() {
                        e.hub.connection.invoke("SellOwner", !0).then(function(t) {
                            App.closePopupMessage()
                        })
                    },
                    textCancel: Message.GetMessage("me14").toUpperCase(),
                    handleCancel: function() {
                        e.hub.connection.invoke("SellOwner", !1).then(function(t) {
                            App.closePopupMessage()
                        })
                    },
                    timer: 5e3
                })
            }
        }
        ,
        c.prototype.AskOtherToBuy = function(t, e, i) {
            console.log("AskOtherToBuy", t, e, i);
            var n = this;
            App.showPopupMessage({
                content: e + " " + Message.GetMessage("ca26"),
                textDone: Message.GetMessage("ca60"),
                handleDone: function() {
                    n.hub.connection.invoke("BuyOwner").then(function(t) {
                        App.closePopupMessage()
                    })
                },
                textCancel: Message.GetMessage("me14").toUpperCase(),
                handleCancel: function() {
                    App.closePopupMessage()
                },
                timer: 5e3
            })
        }
        ,
        c.prototype.UpdateConnectionStatus = function(t, e) {
            var i = this.GetPlayerByAccountId(t);
            i && i.UpdateStatus(e)
        }
        ,
        c.prototype.EnterLobby = function() {
            this.hub.EnterLobby(this.currencyId)
        }
        ,
        c.prototype.ExitLobby = function() {
            this.hub.ExitLobby()
        }
        ,
        c.prototype.Stop = function() {
            this.ExitLobby(),
            this.hub.connection.stop()
        }
        ,
        c.prototype.DeleteTween = function() {
            for (var t = TweenMax.getAllTweens(), e = 0; e < t.length; e++)
                "bacay" === t[e].data && t[e].kill()
        }
        ,
        c.prototype.Delete = function() {
            u.Util.ClearTimeInterval(this.timerPing),
            u.Util.ClearTimeOut(this.timeStatus),
            this.isJoin = !1,
            this.ready = !1,
            window.removeEventListener("resize", this.resizeFunc);
            for (var t = TweenMax.getAllTweens(), e = 0; e < t.length; e++)
                "bacay" === t[e].data && t[e].kill();
            try {
                this.application.renderer.view.remove(),
                this.application.destroy(!0)
            } catch (t) {}
        }
        ,
        c);
        function c(t) {
            this.accountId = 0,
            this.isLoad = !1,
            this.cardOri = {
                width: 68,
                height: 92,
                rotation: 10
            },
            this.cardOwn = {
                width: 96,
                height: 130
            },
            this.cardOther = {
                width: 46,
                height: 63
            },
            this.cardPos = [[-95, 170], [90, 150], [390, 100], [370, -100], [140, -200], [-150, -200], [-370, -100], [-400, 100]],
            this.isJoin = !1,
            this.feedChicken = [],
            this.ready = !1,
            this.fontRobotoCondensedRegular = "RobotoCondensed-Regular",
            this.fontRobotoCondensedBold = "RobotoCondensed-Bold",
            this.fontFaceBold = "Roboto-Bold",
            this.fontFace = "Roboto-Light",
            this.playerPos = [[-250, 150], [200, 150], [500, 80], [480, -150], [250, -240], [-260, -240], [-480, -150], [-510, 60]],
            this.players = [null, null, null, null, null, null, null, null],
            this.chipPos = [[-190, 75], [50, 75], [340, 45], [320, -155], [70, -145], [-180, -145], [-400, -45], [-440, 45]],
            this.numberPos = [[-95, 75], [95, 95], [390, 45], [370, -45], [140, -145], [-150, -145], [-370, -45], [-400, 45]],
            this.moneyText = ["XU", "GAM"],
            this.suite = {
                3: "do",
                2: "co",
                1: "tep",
                0: "bich",
                4: ""
            },
            this.size = t.size,
            this.target = t.target,
            this.token = t.token,
            this.loader = new n.default,
            this.currencyId = t.currencyID,
            this.lang = Message.GetLanguageCode(),
            this.isLoad = !1,
            this.isJoin = !1,
            this.ready = !1
        }
        e.games = h
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        );
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var s, a = i(0), r = (s = a.Assets,
        o(h, s),
        h);
        function h() {
            var t = s.call(this) || this;
            return t.assets = [{
                id: "",
                src: "/assets/images/common/bai.json"
            }, {
                id: "",
                src: "/assets/images/common/betbar.json"
            }, {
                id: "",
                src: "/assets/images/common/common.json"
            }, {
                id: "",
                src: "/assets/images/common/dealer.json"
            }, {
                id: "",
                src: "/assets/images/common/firework.json"
            }, {
                id: "win.effect",
                src: "/assets/images/common/win.png"
            }, {
                id: "table-1",
                src: "/assets/images/common/table-vip.png"
            }, {
                id: "table-0",
                src: "/assets/images/common/table-normal.png"
            }, {
                id: "",
                src: "/assets/images/bacay/bacay.json"
            }, {
                id: "asset_3cay.png",
                src: "/assets/images/bacay/asset_3cay.png"
            }, {
                id: "lstcircle1.png",
                src: "/assets/images/bacay/lstcircle1.png"
            }, {
                id: "number-3-cay.png",
                src: "/assets/images/bacay/number-3-cay.png"
            }],
            t.add(t.assets),
            t
        }
        e.default = r
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        );
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var s, a = i(0), r = (s = a.Hub,
        o(h, s),
        h.prototype.Listen = function() {
            s.prototype.Listen.call(this);
            var o = this;
            o.connection.on("startBettingTime", function(t, e) {
                o.game && o.game.StartBettingTime(t, e)
            }),
            o.connection.on("updateBetting", function(t, e) {
                o.game && o.game.UpdateBetting(t, e)
            }),
            o.connection.on("startAnimationTime", function(t, e) {
                o.game && o.game.StartAnimationTime(t, e)
            }),
            o.connection.on("betOther", function(t, e, i) {
                o.game && o.game.BetOther(t, e, i)
            }),
            o.connection.on("acceptedBet", function(t, e, i, n) {
                o.game && o.game.AcceptedBet(t, e, i, n)
            }),
            o.connection.on("cancelBetOther", function(t) {
                o.game && o.game.CancelBetOther(t)
            }),
            o.connection.on("feedChicken", function(t, e) {
                o.game && o.game.FeedChicken(t, e)
            }),
            o.connection.on("cancelBetChicken", function(t) {
                console.log("cancelBetChicken", t),
                o.game && o.game.CancelBetChicken(t)
            }),
            o.connection.on("flipCards", function(t, e) {
                o.game && o.game.FlipCards(t, e)
            }),
            o.connection.on("showAllResult", function(t, e) {
                o.game && o.game.ShowAllResult(t, e)
            }),
            o.connection.on("showPrize", function(t) {
                o.game && o.game.ShowPrize(t)
            }),
            o.connection.on("askToSell", function(t) {
                o.game && o.game.AskToSell(t)
            }),
            o.connection.on("askOtherToBuy", function(t, e, i) {
                o.game && o.game.AskOtherToBuy(t, e, i)
            }),
            o.connection.on("changeOwner", function(t) {
                o.game && o.game.ChangeOwner(t)
            }),
            o.connection.on("playerMessage", function(t, e) {
                if (o.game) {
                    var i = Message.GetMessage("me" + t.code);
                    0 <= i.indexOf("{0}") && (i = i.replace("{0}", a.Util.ParseMoney(o.game.roomModel.MinBet))),
                    o.game.ShowStatus(i, e)
                }
            })
        }
        ,
        h);
        function h(t, e, i) {
            var n = s.call(this, t, e, i) || this;
            return n.AutoPlay = function() {
                this.connection.invoke("AutoPlay").then(function(t) {
                    console.log("AutoPlay", t)
                })
            }
            ,
            n.Bet = function(t) {
                this.connection.invoke("Bet", t).then(function(t) {
                    console.log("Bet", t)
                })
            }
            ,
            n.BuyOwner = function() {
                this.connection.invoke("BuyOwner").then(function(t) {
                    console.log("BuyOwner", t)
                })
            }
            ,
            n.SellOwner = function(t) {
                this.connection.invoke("SellOwner", t).then(function(t) {
                    console.log("SellOwner", t)
                })
            }
            ,
            n.BetOthers = function(t, e) {
                this.connection.invoke("BetOthers", t, e).then(function(t) {
                    console.log("BetOthers", t)
                })
            }
            ,
            n.AcceptBet = function(t, e) {
                this.connection.invoke("AcceptBet", t, e).then(function(t) {
                    console.log("AcceptBet", t)
                })
            }
            ,
            n.FeedChicken = function() {
                this.connection.invoke("FeedChicken").then(function(t) {
                    console.log("FeedChicken", t)
                })
            }
            ,
            n.Flip = function() {
                this.connection.invoke("Flip").then(function(t) {
                    console.log("Flip", t)
                })
            }
            ,
            n
        }
        e.default = r
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        );
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var s, h = i(0), a = (s = h.Player,
        o(r, s),
        r.prototype.InitChick = function() {
            this.iconChick = new Sprite(this.game.framesAsset.fedchicken),
            this.iconChick.anchor.set(.5),
            this.iconChick.position.set(this.avatar.x + this.avatar.width / 2 - 5, this.avatar.y - 30),
            this.iconChick.visible = !1,
            this.addChild(this.iconChick)
        }
        ,
        r.prototype.InitBien = function() {
            this.bienContainer = new Container,
            this.btnBien = new Sprite(this.game.framesBien.bien3),
            this.btnBien.anchor.set(.5),
            this.txtMoneyBien = new PIXI.Text("",{
                fontFamily: this.game.fontFace,
                fontSize: 16,
                fill: "#fff"
            }),
            this.txtMoneyBien.anchor.set(.5),
            this.txtMoneyBien.position.set(0, 0),
            this.btnBien.addChild(this.txtMoneyBien),
            this.btnBien.position.set(this.avatar.x - 30, this.avatar.y - this.avatar.height / 2 + 20),
            this.addChild(this.btnBien),
            this.btnBien.visible = !1,
            this.minBetOther = new Container,
            this.minBetOtherBg = new Sprite(this.game.framesBien.bien2),
            this.minBetOtherBg.anchor.set(.5),
            0 === this.pos || 7 === this.pos || 6 === this.pos || 5 === this.pos ? this.minBetOtherBg.position.set(this.avatar.x + this.avatar.width / 2 + this.minBetOtherBg.width / 2 + 10, this.avatar.y - this.minBetOtherBg.height / 2 - 5) : this.minBetOtherBg.position.set(this.avatar.x - this.avatar.width / 2 - this.minBetOtherBg.width / 2 - 10, this.avatar.y - this.minBetOtherBg.height / 2 - 5),
            this.minBetOtherBgSend = new Sprite(this.game.framesBien.bien1),
            this.minBetOtherBgSend.anchor.set(.5),
            this.minBetOtherBgSend.position.set(this.minBetOtherBg.x, this.minBetOtherBg.y),
            this.minBetOtherBgAccepted = new Sprite(this.game.framesBien.bien4),
            this.minBetOtherBgAccepted.anchor.set(.5),
            this.minBetOtherBgAccepted.position.set(this.minBetOtherBg.x + (0 === this.pos || 7 === this.pos || 6 === this.pos || 5 === this.pos ? 55 : -55), this.minBetOtherBg.y - 30),
            this.minBetOtherWaitCircle = new Sprite(this.game.framesBien.bien0),
            this.minBetOtherWaitCircle.anchor.set(.5),
            this.minBetOtherWaitCircle.position.set(this.minBetOtherBg.x, this.minBetOtherBg.y),
            this.minBetOtherText = new PIXI.Text("",{
                fontFamily: this.game.fontFace,
                fontSize: 16,
                fill: "#fff"
            }),
            this.minBetOtherText.anchor.set(.5),
            this.minBetOtherText.position.set(this.minBetOtherBg.x, this.minBetOtherBg.y),
            this.minBetOther.addChild(this.minBetOtherBg, this.minBetOtherBgSend, this.minBetOtherBgAccepted, this.minBetOtherWaitCircle, this.minBetOtherText),
            this.minBetOther.interactive = !0,
            this.minBetOther.buttonMode = !0,
            this.minBetOther.on("pointerover", this.BetOtherOver.bind(this.minBetOther, this)).on("pointerout", this.BetOtherOut.bind(this.minBetOther, this)).on("pointerdown", this.minBetOtherDown.bind(this.minBetOther, this)),
            this.maxBetOther = new Container,
            this.maxBetOtherBg = new Sprite(this.game.framesBien.bien2),
            this.maxBetOtherBg.anchor.set(.5),
            0 === this.pos || 7 === this.pos || 6 === this.pos || 5 === this.pos ? this.maxBetOtherBg.position.set(this.avatar.x + this.avatar.width / 2 + this.maxBetOtherBg.width / 2 + 10, this.avatar.y + this.maxBetOtherBg.height / 2 + 5) : this.maxBetOtherBg.position.set(this.avatar.x - this.avatar.width / 2 - this.maxBetOtherBg.width / 2 - 10, this.avatar.y + this.maxBetOtherBg.height / 2 + 5),
            this.maxBetOtherBgSend = new Sprite(this.game.framesBien.bien1),
            this.maxBetOtherBgSend.anchor.set(.5),
            this.maxBetOtherBgSend.position.set(this.maxBetOtherBg.x, this.maxBetOtherBg.y),
            this.maxBetOtherBgAccepted = new Sprite(this.game.framesBien.bien4),
            this.maxBetOtherBgAccepted.anchor.set(.5),
            this.maxBetOtherBgAccepted.position.set(this.maxBetOtherBg.x + (0 === this.pos || 7 === this.pos || 6 === this.pos || 5 === this.pos ? 55 : -55), this.maxBetOtherBg.y - 30),
            this.maxBetOtherWaitCircle = new Sprite(this.game.framesBien.bien0),
            this.maxBetOtherWaitCircle.anchor.set(.5),
            this.maxBetOtherWaitCircle.position.set(this.maxBetOtherBg.x, this.maxBetOtherBg.y),
            this.maxBetOtherText = new PIXI.Text("",{
                fontFamily: this.game.fontFace,
                fontSize: 16,
                fill: "#fff"
            }),
            this.maxBetOtherText.anchor.set(.5),
            this.maxBetOtherText.position.set(this.maxBetOtherBg.x, this.maxBetOtherBg.y),
            this.maxBetOther.addChild(this.maxBetOtherBg, this.maxBetOtherBgSend, this.maxBetOtherBgAccepted, this.maxBetOtherWaitCircle, this.maxBetOtherText),
            this.maxBetOther.interactive = !0,
            this.maxBetOther.buttonMode = !0,
            this.maxBetOther.on("pointerover", this.BetOtherOver.bind(this.minBetOther, this)).on("pointerout", this.BetOtherOut.bind(this.minBetOther, this)).on("pointerdown", this.maxBetOtherDown.bind(this.maxBetOther, this)),
            this.bienContainer.visible = !1,
            this.bienContainer.addChild(this.minBetOther, this.maxBetOther),
            this.game.bienContainer.addChild(this.bienContainer)
        }
        ,
        r.prototype.BetOtherOver = function(t) {
            1 === t.game.roomModel.GameLoop.Phrase && (this.alpha = .8)
        }
        ,
        r.prototype.BetOtherOut = function(t) {
            this.alpha = 1
        }
        ,
        r.prototype.minBetOtherDown = function(e) {
            var t = e.player.AccountID;
            if (e.isConfirmBetOther)
                e.game.hub.AcceptBet(t, !0);
            else if (!e.isSendBetOther) {
                e.minBetOtherBgSend.visible = !0,
                e.maxBetOther.visible = !1;
                try {
                    e.tCircle = TweenMax.to(e.minBetOtherBgSend, .8, {
                        data: "bacay",
                        rotation: 2 * Math.PI,
                        repeat: -1
                    })
                } catch (t) {}
                e.game.hub.connection.invoke("BetOthers", t, e.game.roomModel.MinBet).then(function(t) {
                    t ? e.isSendBetOther = !0 : (e.minBetOtherBgSend.visible = !1,
                    e.maxBetOther.visible = !0)
                })
            }
        }
        ,
        r.prototype.maxBetOtherDown = function(e) {
            var t = e.player.AccountID;
            if (e.isConfirmBetOther)
                e.game.hub.AcceptBet(t, !0);
            else if (!e.isSendBetOther) {
                e.maxBetOtherBgSend.visible = !0,
                e.minBetOther.visible = !1;
                try {
                    e.tCircle = TweenMax.to(e.maxBetOtherBgSend, .8, {
                        rotation: 2 * Math.PI,
                        repeat: -1
                    })
                } catch (t) {}
                e.game.hub.connection.invoke("BetOthers", t, e.game.roomModel.MaxBet).then(function(t) {
                    t ? e.isSendBetOther = !0 : (e.maxBetOtherBgSend.visible = !1,
                    e.minBetOther.visible = !0)
                })
            }
        }
        ,
        r.prototype.ShowChick = function() {
            this.iconChick.visible = !0;
            try {
                TweenMax.to(this.iconChick.scale, .3, {
                    data: "bacay",
                    x: 1.5,
                    y: 1.5,
                    yoyo: !0,
                    repeat: 1
                })
            } catch (t) {}
        }
        ,
        r.prototype.UpdateBetting = function(t) {
            var e = new Sprite(TextureCache["chip-in-game.png"]);
            e.anchor.set(0, .5),
            e.scale.set(.01),
            e.position.set(this.avatar.x, this.avatar.y);
            var i = this.game.chipPos[this.pos]
              , n = this;
            this.chipContainer.addChild(e),
            this.ShowMoney(-t);
            try {
                TweenMax.to(e, .5, {
                    data: "bacay",
                    x: i[0] + 5,
                    y: i[1]
                })
            } catch (t) {}
            try {
                TweenMax.to(e.scale, .5, {
                    data: "bacay",
                    x: .6,
                    y: .6
                })
            } catch (t) {}
            setTimeout(function() {
                e.visible = !1,
                n.game.arrChipBg[n.pos].visible = !0,
                n.game.arrChipBg[n.pos].children[1].text = h.Util.ParseMoney(t)
            }, 500),
            this.betMoney = t
        }
        ,
        r.prototype.UpdateMoney = function(t, e) {
            null == t ? 1 === this.game.roomModel.MoneyType ? this.player.Account.GoldBalance += e : this.player.Account.CoinBalance += e : this.player && t && (this.player.Account = t,
            this.txtMoney.text = h.Util.ParseMoney(1 === this.game.roomModel.MoneyType ? this.player.Account.GoldBalance : this.player.Account.CoinBalance))
        }
        ,
        r.prototype.UpdateChick = function(t) {
            var e = new Sprite(TextureCache["chip-in-game.png"]);
            this.isFedChicken = !0,
            this.ShowChick(),
            e.anchor.set(0, .5),
            e.scale.set(.01),
            e.position.set(this.avatar.x, this.avatar.y),
            this.chipContainer.addChild(e);
            try {
                TweenMax.to(e, .5, {
                    data: "bacay",
                    x: this.game.chickenBg.x + 5,
                    y: this.game.chickenBg.y
                })
            } catch (t) {}
            try {
                TweenMax.to(e.scale, .5, {
                    data: "bacay",
                    x: .6,
                    y: .6
                })
            } catch (t) {}
            setTimeout(function() {
                e.visible = !1
            }, 500)
        }
        ,
        r.prototype.RestoreChick = function() {
            var t = new Sprite(TextureCache["chip-in-game.png"]);
            t.anchor.set(0, .5),
            t.position.set(this.game.chickenBg.x + 5, this.game.chickenBg.y),
            this.chipContainer.addChild(t);
            try {
                TweenMax.to(t, .5, {
                    data: "bacay",
                    x: this.avatar.x + 5,
                    y: this.avatar.y
                })
            } catch (t) {}
            try {
                TweenMax.to(t.scale, .5, {
                    data: "bacay",
                    x: .6,
                    y: .6
                })
            } catch (t) {}
            setTimeout(function() {
                t.visible = !1
            }, 500)
        }
        ,
        r.prototype.RenderHand = function() {
            if (!this.isGen && (this.isGen = !0,
            this.ResetHand(),
            this.handCards = [],
            0 < this.game.roomModel.Players[this.accountId].Hand.HandCards.length)) {
                for (var t = this.game.cardPos[this.pos], e = 0 === this.pos ? this.game.cardOwn : this.game.cardOther, i = 0; i < 3; i++) {
                    var n = new Sprite(TextureCache["joker.png"]);
                    n.anchor.set(.5),
                    n.scale.set(e.width / this.game.cardOri.width, e.height / this.game.cardOri.height),
                    n.position.set(t[0] + (i - 1) * (0 === this.pos ? 35 : 20), t[1] + (1 === i ? 0 : 0 === this.pos ? 4 : 2)),
                    n.rotation = 10 * (i - 1) * Math.PI / 180,
                    n.flip = !1,
                    n.s = e.width / this.game.cardOri.width,
                    n.OrdinalValue = -1,
                    this.handCards.push(n),
                    this.handContainer.addChild(n)
                }
                if (this.accountId === this.game.currentPlayer.AccountID)
                    for (var o = 0; o < this.handCards.length; o++)
                        this.handCards[o].visible = !1
            }
        }
        ,
        r.prototype.ShowSum = function(t) {
            var e, i = this.player.Hand.Sum, n = 0 < t ? "sumyellow" : "sumwhite";
            e = 1 === this.player.Hand.Rank ? TextureCache["10-at-cu-" + this.game.lang + ".png"] : this.game.framesNumber[n + i];
            var o = new Sprite(e);
            o.anchor.set(.5),
            o.position.set(this.game.numberPos[this.pos][0], this.game.numberPos[this.pos][1]),
            o.scale.set(1.2),
            this.effectContainer.addChild(o)
        }
        ,
        r.prototype.ShowResult = function(t) {
            if (0 < t.change) {
                var e = new AnimatedSprite(this.game.framesWin);
                e.anchor.set(.5),
                0 < this.pos && e.scale.set(.86),
                e.position.set(this.avatar.x, this.avatar.y + 10),
                e.animationSpeed = .5,
                e.play(),
                this.effectContainer.addChild(e)
            }
            if (t.ownerText && t.ownerText.toLocaleLowerCase() == "WinAll".toLocaleLowerCase()) {
                var i = new Sprite(TextureCache["ca-lang-sang-tien-" + this.game.lang + ".png"]);
                if (i.anchor.set(.5),
                0 === this.pos) {
                    i.position.set(0, 0);
                    var n = new AnimatedSprite(this.game.framesFire);
                    n.anchor.set(.5),
                    n.scale.set(2),
                    n.animationSpeed = .5,
                    n.position.set(0, 0),
                    n.play(),
                    this.effectContainer.addChild(n)
                } else
                    i.scale.set(.45),
                    i.position.set(this.avatar.x, this.avatar.y + this.avatar.height / 2 - i.height / 2);
                this.effectContainer.addChild(i)
            } else if (t.ownerText && t.ownerText.toLocaleLowerCase() == "LoseAll".toLocaleLowerCase()) {
                (r = new Sprite(TextureCache["bg-black-effect.png"])).anchor.set(.5);
                var o = new Sprite(TextureCache["phat-luong-" + this.game.lang + ".png"]);
                o.anchor.set(.5),
                r.addChild(o),
                r.scale.set(0 === this.pos ? .9 : .8),
                r.position.set(this.avatar.x, this.avatar.y + this.avatar.height / 2 - r.height / 2),
                this.effectContainer.addChild(r)
            } else if (t.isChickenKiller) {
                (r = new Sprite(TextureCache["bg-orange-effect.png"])).anchor.set(.5);
                var s = new Sprite(TextureCache["thang-ga-" + this.game.lang + ".png"]);
                s.anchor.set(.5),
                r.addChild(s),
                r.scale.set(0 === this.pos ? .9 : .8),
                r.position.set(this.avatar.x, this.avatar.y + this.avatar.height / 2 - r.height / 2),
                this.effectContainer.addChild(r)
            } else if (0 < t.change) {
                var a = new Sprite(TextureCache["thang-" + this.game.lang + ".png"]);
                a.anchor.set(.5),
                a.scale.set(0 === this.pos ? .9 : .8),
                a.position.set(this.avatar.x, this.avatar.y + this.avatar.height / 2 - a.height / 2),
                this.effectContainer.addChild(a)
            } else {
                var r;
                (r = new Sprite(TextureCache["bg-black-effect.png"])).anchor.set(.5);
                var h = new Sprite(TextureCache["thua-" + this.game.lang + ".png"]);
                h.anchor.set(.5),
                r.addChild(h),
                r.scale.set(0 === this.pos ? .9 : .8),
                r.position.set(this.avatar.x, this.avatar.y + this.avatar.height / 2 - r.height / 2),
                this.effectContainer.addChild(r)
            }
        }
        ,
        r.prototype.ShowMoney = function(t, e) {
            var i = new PIXI.Text((0 < t ? "+" : "") + h.Util.ParseMoney(t),{
                fontFamily: this.game.fontFaceBold,
                fontSize: 20,
                fill: "yellow"
            });
            i.anchor.set(.5),
            i.position.set(this.avatar.x, this.avatar.y),
            this.game.resultContainer.addChild(i);
            try {
                TweenMax.to(i, 2, {
                    data: "bacay",
                    y: i.y - 100,
                    alpha: 0
                })
            } catch (t) {}
            e && (1 === this.game.roomModel.MoneyType ? this.player.Account.GoldBalance += t : this.player.Account.CoinBalance += t,
            this.UpdateBalance(0 === this.game.roomModel.MoneyType ? this.player.Account.CoinBalance : this.player.Account.GoldBalance))
        }
        ,
        r.prototype.MoneyResult = function(t) {
            var e = new PIXI.Text((0 < t ? "+" : "") + h.Util.ParseMoney(t),{
                fontFamily: this.game.fontFaceBold,
                fontSize: 20,
                fill: "yellow"
            });
            e.anchor.set(.5),
            e.position.set(this.avatar.x, this.avatar.y),
            this.game.resultContainer.addChild(e);
            try {
                TweenMax.to(e, 2, {
                    data: "bacay",
                    y: e.y - 100,
                    alpha: 0
                })
            } catch (t) {}
            this.UpdateBalance(0 === this.game.roomModel.MoneyType ? this.player.Account.CoinBalance : this.player.Account.GoldBalance)
        }
        ,
        r.prototype.UpdateStatus = function(t) {
            1 === t ? this.isUnLeave || this.isLeave ? (this.isUnLeave = !1,
            this.leaveStatus.visible = !1,
            this.isLeave = !1,
            this.accountId === this.game.currentPlayer.AccountID && this.game.ShowStatus(Message.GetMessage("me9"), 2e3)) : this.disStatus.visible = !1 : 2 === t ? (this.isLeave = !0,
            this.leaveStatus.visible = !0,
            this.accountId === this.game.currentPlayer.AccountID && this.game.ShowStatus(Message.GetMessage("me8"), 2e3)) : 0 === t && (this.disStatus.visible = !0)
        }
        ,
        r.prototype.ShowBetOther = function(t, e) {
            if (1 === this.player.Status && this.player.AccountID !== this.game.currentPlayer.AccountID && this.player.AccountID != this.game.roomModel.OwnerId && this.game.currentPlayer.AccountID != this.game.roomModel.OwnerId) {
                this.btnBien.visible = !1;
                var i = this.game.roomModel.MinBet
                  , n = this.game.roomModel.MaxBet;
                if (void 0 === e) {
                    if (this.bienContainer.visible)
                        return;
                    this.betOtherMoney = 0,
                    this.isSendBetOther = !1,
                    this.isConfirmBetOther = !1,
                    this.isConfirmedBetOther = !1,
                    this.bienContainer.visible = !0,
                    this.minBetOther.visible = !0,
                    this.minBetOther.alpha = 1,
                    this.minBetOtherBg.visible = !0,
                    this.minBetOtherBgSend.visible = !1,
                    this.minBetOtherBgAccepted.visible = !1,
                    this.minBetOtherWaitCircle.visible = !1,
                    this.minBetOtherText.visible = !0,
                    this.minBetOtherText.text = h.Util.ParseMoney(i),
                    this.maxBetOther.visible = !0,
                    this.maxBetOther.alpha = 1,
                    this.maxBetOtherBg.visible = !0,
                    this.maxBetOtherBgSend.visible = !1,
                    this.maxBetOtherBgAccepted.visible = !1,
                    this.maxBetOtherWaitCircle.visible = !1,
                    this.maxBetOtherText.visible = !0,
                    this.maxBetOtherText.text = h.Util.ParseMoney(n)
                } else if (0 == e || 1 == e || 2 == e) {
                    var o, s, a, r;
                    if (this.bienContainer.visible = !0,
                    r = t == i ? (this.minBetOther.visible = !0,
                    this.minBetOtherText.text = h.Util.ParseMoney(i),
                    this.maxBetOther.visible = !1,
                    a = this.minBetOtherBgSend,
                    s = this.minBetOtherBgAccepted,
                    o = this.minBetOtherWaitCircle,
                    this.minBetOtherText) : (this.minBetOther.visible = !1,
                    this.maxBetOther.visible = !0,
                    this.maxBetOtherText.text = h.Util.ParseMoney(n),
                    a = this.maxBetOtherBgSend,
                    s = this.maxBetOtherBgAccepted,
                    o = this.maxBetOtherWaitCircle,
                    this.maxBetOtherText),
                    0 == e)
                        this.isSendBetOther = !0,
                        a.visible = !0,
                        s.visible = !1,
                        o.visible = !1;
                    else if (1 == e) {
                        this.isConfirmBetOther = !0,
                        a.visible = !1,
                        s.visible = !1,
                        o.visible = !0;
                        try {
                            this.tCircle = TweenMax.to(o, .8, {
                                data: "bacay",
                                rotation: 2 * Math.PI,
                                repeat: -1
                            })
                        } catch (t) {}
                    } else if (2 == e) {
                        this.betOtherMoney = t,
                        this.isConfirmedBetOther = !0,
                        a.visible = !1,
                        s.visible = !1,
                        r.visible = !1,
                        o.visible = !1;
                        try {
                            this.tCircle.kill()
                        } catch (t) {}
                        this.minBetOtherBg.visible = !1,
                        this.maxBetOtherBg.visible = !1,
                        t == this.game.roomModel.MinBet ? this.btnBien.texture = this.game.framesBien.bien3 : t == this.game.roomModel.MaxBet && (this.btnBien.texture = this.game.framesBien.bien4),
                        this.txtMoneyBien.text = h.Util.ParseMoney(t),
                        this.txtMoneyBien.style.fontSize = 1e5 <= t ? 14 : 16,
                        this.btnBien.visible = !0
                    }
                }
            }
        }
        ,
        r.prototype.HideBetOther = function() {
            try {
                this.tCircle.kill()
            } catch (t) {}
            this.bienContainer.visible = !1,
            this.minBetOther.visible = !1,
            this.maxBetOther.visible = !1,
            this.minBetOtherBg.visible = !0,
            this.minBetOtherBgSend.visible = !1,
            this.minBetOtherBgAccepted.visible = !1,
            this.minBetOtherWaitCircle.visible = !1,
            this.minBetOtherText.visible = !0,
            this.maxBetOtherBg.visible = !0,
            this.maxBetOtherBgSend.visible = !1,
            this.maxBetOtherBgAccepted.visible = !1,
            this.maxBetOtherWaitCircle.visible = !1,
            this.maxBetOtherText.visible = !0
        }
        ,
        r.prototype.ResetHand = function() {
            if (this.handContainer)
                try {
                    this.handContainer.destroy({
                        children: !0
                    })
                } catch (t) {}
            this.handContainer = new Container,
            this.game.handCardsContainer.addChild(this.handContainer)
        }
        ,
        r.prototype.Reset = function() {
            if (this.betMoney = 0,
            this.isGen = !1,
            this.handCards = [],
            this.HideBetOther(),
            this.handContainer)
                try {
                    this.handContainer.destroy({
                        children: !0
                    })
                } catch (t) {}
            if (this.handContainer = new Container,
            this.game.handCardsContainer.addChild(this.handContainer),
            this.effectContainer)
                try {
                    this.effectContainer.destroy({
                        children: !0
                    })
                } catch (t) {}
            this.effectContainer = new Container,
            this.game.resultContainer.addChild(this.effectContainer)
        }
        ,
        r);
        function r(t) {
            var e = s.call(this, t) || this;
            return e.handCards = [],
            e.betMoney = 0,
            e.betOtherMoney = 0,
            e.isFedChicken = !1,
            e.isLeave = !1,
            e.isUnLeave = !1,
            e.isGen = !1,
            e.isSendBetOther = !1,
            e.isConfirmBetOther = !1,
            e.isConfirmedBetOther = !1,
            e.InitChick(),
            e.InitBien(),
            e.chipContainer = new Container,
            e.addChild(e.chipContainer),
            e.Reset(),
            e
        }
        e.default = a
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        );
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var s, a = i(0), r = (s = PIXI.Container,
        o(h, s),
        h.prototype.Init = function() {
            this.bg = new Sprite(TextureCache["bet-bar.png"]),
            this.txtMoney = new PIXI.Text(a.Util.ParseMoney(this.min),{
                fontFamily: this.game.fontRobotoCondensedBold,
                fontSize: 18,
                fill: ["white"]
            }),
            this.txtMoney.anchor.set(.5),
            this.txtMoney.position.set(55, 18),
            this.btnSlider = new Sprite(TextureCache["btn-control.png"]),
            this.btnSlider.anchor.set(0, .5),
            this.btnSlider.position.set(155, 18.5),
            this.btnSlider.buttonMode = !0,
            this.btnSlider.interactive = !0,
            this.btnSlider.on("pointerdown", this.BtnSliderDown).on("pointermove", this.BtnSliderMove.bind(this.btnSlider, this)).on("pointerup", this.BtnSliderUp).on("pointerupoutside", this.BtnSliderUp),
            this.btnMinus = new Sprite(TextureCache["btn-control-dn-normal.png"]),
            this.btnMinus.name = "btn-control-dn-normal.png",
            this.btnMinus.anchor.set(0, .5),
            this.btnMinus.position.set(110, 18.5),
            this.btnMinus.buttonMode = !0,
            this.btnMinus.interactive = !0,
            this.btnMinus.on("pointerover", this.game.BtnOver).on("pointerout", this.game.BtnOut).on("pointerdown", this.BtnMinusDown.bind(this.btnMinus, this)),
            this.btnPlus = new Sprite(TextureCache["btn-control-up-normal.png"]),
            this.btnPlus.name = "btn-control-up-normal.png",
            this.btnPlus.anchor.set(0, .5),
            this.btnPlus.position.set(350, 18.5),
            this.btnPlus.buttonMode = !0,
            this.btnPlus.interactive = !0,
            this.btnPlus.on("pointerover", this.game.BtnOver).on("pointerout", this.game.BtnOut).on("pointerdown", this.BtnPlusDown.bind(this.btnPlus, this)),
            this.bg.addChild(this.txtMoney, this.btnSlider, this.btnMinus, this.btnPlus),
            this.addChild(this.bg)
        }
        ,
        h.prototype.DisableBtn = function(t) {
            t.buttonMode = !1,
            t.interactive = !1,
            t.texture = TextureCache[t.name.replace("normal", "disable")]
        }
        ,
        h.prototype.EnableBtn = function(t) {
            t.buttonMode = !0,
            t.interactive = !0,
            t.texture = TextureCache[t.name]
        }
        ,
        h.prototype.BtnMinusDown = function(t) {
            var e = t.betValue - t.step;
            e = e < t.min ? t.min : e,
            t.UpdateBetBar(e)
        }
        ,
        h.prototype.BtnPlusDown = function(t) {
            var e = t.betValue + t.step;
            e = e > this.max ? t.max : e,
            t.UpdateBetBar(e)
        }
        ,
        h.prototype.BtnSliderDown = function(t) {
            this.data = t.data,
            this.alpha = .9,
            this.dragging = !0
        }
        ,
        h.prototype.BtnSliderUp = function() {
            this.data = null,
            this.alpha = 1,
            this.dragging = !1
        }
        ,
        h.prototype.BtnSliderMove = function(t) {
            var e = this;
            if (e.dragging) {
                var i = e.data.getLocalPosition(e.parent);
                e.x = i.x,
                e.y = i.y
            }
            e.x < 155 && (e.x = 155),
            315 < e.x && (e.x = 315),
            18.5 !== e.y && (e.y = 18.5);
            var n = Math.round((e.x - t.minX) / (t.maxX - t.minX) * (t.max - t.min) + t.min);
            t.UpdateBetBar(n)
        }
        ,
        h.prototype.UpdateBetBar = function(t) {
            t > this.min && t < this.max && (t = Math.floor(t / this.step) * this.step),
            t = t < this.min ? this.min : t > this.max ? this.max : t,
            this.betValue = t,
            this.txtMoney.text = a.Util.ParseMoney(t),
            this.game.txtMoneyBet.text = a.Util.ParseMoney(t),
            this.betValue === this.min ? this.DisableBtn(this.btnMinus) : this.EnableBtn(this.btnMinus),
            this.betValue === this.max ? this.DisableBtn(this.btnPlus) : this.EnableBtn(this.btnPlus);
            var e = Math.round((t - this.min) * (this.maxX - this.minX) / (this.max - this.min)) + this.minX;
            t === this.max && (e = 315),
            e <= 315 && (this.btnSlider.x = e)
        }
        ,
        h.prototype.Show = function() {
            this.visible = !0;
            var t = this.betValue > this.max ? this.max : this.betValue;
            (t = this.GetMaxBet(t, this.min, this.max, this.step)) != this.betValue && (this.betValue = t),
            this.game.txtMoneyBet.text = a.Util.ParseMoney(t)
        }
        ,
        h.prototype.Hide = function() {
            this.visible = !1,
            this.game.btnDatChuong.visible = !1
        }
        ,
        h);
        function h(t) {
            var e = s.call(this) || this;
            return e.min = 0,
            e.max = 0,
            e.step = 0,
            e.minX = 155,
            e.maxX = 315,
            e.GetMaxBet = function(t, e, i, n) {
                var o = i
                  , s = this.game.GetPlayerByAccountId(this.accountId);
                return s && s.player && s.player.Account && (1 === this.game.roomModel.MoneyType ? o = s.player.Account.GoldBalance : 0 === this.game.roomModel.MoneyType && (o = s.player.Account.CoinBalance),
                0 === this.game.roomModel.Rule ? o = Math.floor(o / 2) : 1 === this.game.roomModel.Rule ? o = Math.floor(o / 3) : 2 !== this.game.roomModel.Rule && 3 !== this.game.roomModel.Rule || (o = Math.floor(o / 4)),
                o < t && (t = Math.floor((o - e) / n) * n + e)),
                t
            }
            ,
            e.game = t.game,
            e.min = t.min,
            e.max = t.max,
            e.step = t.step,
            e.Init(),
            e.betValue = t.min,
            console.log(t),
            e
        }
        e.default = r
    }
    , function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t, e) {
            return (n = Object.setPrototypeOf || {
                __proto__: []
            }instanceof Array && function(t, e) {
                t.__proto__ = e
            }
            || function(t, e) {
                for (var i in e)
                    e.hasOwnProperty(i) && (t[i] = e[i])
            }
            )(t, e)
        }
        ,
        function(t, e) {
            function i() {
                this.constructor = t
            }
            n(t, e),
            t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype,
            new i)
        }
        );
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var s, a = (s = PIXI.Container,
        o(r, s),
        r.prototype.Init = function() {
            var t = this.game
              , e = new Sprite(TextureCache["bg-black.png"]);
            e.anchor.set(.5),
            e.position.set(t.size[0] / 2, t.size[1] / 2),
            this.lblNanBai = new PIXI.Text(Message.GetMessage("me27"),{
                fontFamily: t.fontFaceBold,
                fontSize: 26,
                fill: "#fff"
            }),
            this.lblNanBai.anchor.set(.5),
            this.lblNanBai.position.set(t.size[0] / 2, t.size[1] / 2 - 130),
            this.txtTimer = new PIXI.Text("7s",{
                fontFamily: t.fontFace,
                fontSize: 18,
                fill: "yellow"
            }),
            this.txtTimer.anchor.set(.5),
            this.txtTimer.position.set(t.size[0] / 2, t.size[1] / 2 - 100),
            this.addChild(e, this.lblNanBai, this.txtTimer),
            console.log(this.cards);
            for (var i = 0; i < this.cards.length; i++) {
                var n = new Sprite(TextureCache[t.GetCard(this.cards[i].OrdinalValue)]);
                console.log(this.cards[i].OrdinalValue, t.GetCard(this.cards[i].OrdinalValue)),
                n.anchor.set(.5),
                n.position.set(t.size[0] / 2, t.size[1] / 2),
                n.width = 115,
                n.height = 155,
                n.i = !0,
                n.interactive = !0,
                n.buttonMode = !0,
                n.on("pointerdown", this.CardDown).on("pointermove", this.CardMove.bind(n, this)).on("pointerup", this.CardUp).on("pointeroutside", this.CardUp),
                this.addChild(n)
            }
            var o = new Sprite(TextureCache["bai-up.png"]);
            o.anchor.set(.5),
            o.position.set(t.size[0] / 2, t.size[1] / 2),
            o.width = 115,
            o.height = 155,
            o.i = !1,
            o.interactive = !0,
            o.buttonMode = !0,
            o.on("pointerdown", this.CardDown).on("pointermove", this.CardMove.bind(o, this)).on("pointerup", this.CardUp.bind(o, this)).on("pointeroutside", this.CardUp.bind(o, this)),
            this.addChild(o),
            this.CountTimer(this)
        }
        ,
        r.prototype.CountTimer = function(t) {
            t.timer--,
            0 <= t.timer ? (t.txtTimer.text = t.timer + "s",
            setTimeout(function() {
                return t.CountTimer(t)
            }, 1e3)) : t.txtTimer.visible = !1
        }
        ,
        r.prototype.CardDown = function(t) {
            this.data = t.data,
            this.dragging = !0
        }
        ,
        r.prototype.CardUp = function(t) {
            this.data = null,
            this.alpha = 1,
            this.dragging = !1;
            var e = this;
            this.i || (e.x <= t.game.size[0] / 2 - 10 || e.x >= t.game.size[0] / 2 + 10 || e.y <= t.game.size[1] / 2 - 10 || e.y >= t.game.size[1] / 2 + 10) && (e.visible = !1)
        }
        ,
        r.prototype.CardMove = function(t) {
            var e = this;
            if (e.dragging) {
                var i = e.data.getLocalPosition(e.parent);
                e.x = i.x,
                e.y = i.y
            }
        }
        ,
        r);
        function r(t, e) {
            var i = s.call(this) || this;
            return i.timer = 0,
            i.game = t,
            i.timer = 8,
            i.cards = e,
            i.Init(),
            i
        }
        e.default = a
    }
    ],
    o.c = a,
    o.d = function(t, e, i) {
        o.o(t, e) || Object.defineProperty(t, e, {
            enumerable: !0,
            get: i
        })
    }
    ,
    o.r = function(t) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
            value: "Module"
        }),
        Object.defineProperty(t, "__esModule", {
            value: !0
        })
    }
    ,
    o.t = function(e, t) {
        if (1 & t && (e = o(e)),
        8 & t)
            return e;
        if (4 & t && "object" == typeof e && e && e.__esModule)
            return e;
        var i = Object.create(null);
        if (o.r(i),
        Object.defineProperty(i, "default", {
            enumerable: !0,
            value: e
        }),
        2 & t && "string" != typeof e)
            for (var n in e)
                o.d(i, n, function(t) {
                    return e[t]
                }
                .bind(null, n));
        return i
    }
    ,
    o.n = function(t) {
        var e = t && t.__esModule ? function() {
            return t.default
        }
        : function() {
            return t
        }
        ;
        return o.d(e, "a", e),
        e
    }
    ,
    o.o = function(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e)
    }
    ,
    o.p = "/",
    o(o.s = 3);
    function o(t) {
        if (a[t])
            return a[t].exports;
        var e = a[t] = {
            i: t,
            l: !1,
            exports: {}
        };
        return s[t].call(e.exports, e, e.exports, o),
        e.l = !0,
        e.exports
    }
    var s, a
});
